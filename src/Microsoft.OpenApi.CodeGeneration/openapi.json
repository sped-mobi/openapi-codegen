{
  "openapi": "3.0.0",
  "x-codegen": {
    "repositoryName": "ed-fi-core",
    "defaultRoute": "api/v1/[controller]",
    "rootNamespace": "EdFiCore",
    "contextName": "EdFiCoreDbContext",
    "supervisorName": "EdFiCoreSupervisor",
    "primaryKeyType": "Guid",
    "outputDir": "S:\\stage\\temp\\",
    "addPrimaryKeyProperties": true,
    "addForeignKeyProperties": true,
    "addReverseNavigationProperties": true,
    "rootProjectName": "EdFiCore",
    "solutionName": "edficore",
    "databaseName": "EdFiCore"
  },
  "info": {
    "title": "Ed-Fi Operational Data Store API",
    "description": "The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation. \n***\n > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.* \n***\n",
    "version": "3-oas3"
  },
  "servers": [
    {
      "url": "//api.ed-fi.org:443/v3.1.0/api/data/v3"
    }
  ],
  "security": [
    {
      "oauth2_client_credentials": []
    }
  ],
  "tags": [
    {
      "name": "academicWeeks",
      "description": "This entity represents the academic weeks for a school year, optionally captured to support analyses."
    },
    {
      "name": "accountabilityRatings",
      "description": "An accountability rating for a school or district."
    },
    {
      "name": "accountCodes",
      "description": "The set of account codes defined by an education organization for a fiscal year."
    },
    {
      "name": "accounts",
      "description": "This financial entity represents a funding source combined with its purpose and type of transaction. It provides a formal record of the debits and credits relating to the specific account."
    },
    {
      "name": "actuals",
      "description": "This financial entity represents the sum of the financial transactions to date relating to a specific account."
    },
    {
      "name": "applicants",
      "description": "This entity represents an individual who has applied for a position with any public or private education institution or agency."
    },
    {
      "name": "assessmentItems",
      "description": "This entity represents one of many single measures that make up an assessment."
    },
    {
      "name": "assessments",
      "description": "This entity represents a tool, instrument, process, or exhibition composed of a systematic sampling of behavior for measuring a student's competence, knowledge, skills, or behavior. An assessment can be used to measure differences in individuals or groups and changes in performance from one occasion to the next."
    },
    {
      "name": "bellSchedules",
      "description": "This entity represents the schedule of class period meeting times."
    },
    {
      "name": "budgets",
      "description": "This financial entity represents the amount of monies allocated to be spent or received by an education organization as related to a specific account."
    },
    {
      "name": "calendarDates",
      "description": "The type of scheduled or unscheduled event for the day."
    },
    {
      "name": "calendars",
      "description": "A set of dates associated with an organization."
    },
    {
      "name": "classPeriods",
      "description": "This entity represents the designation of a regularly scheduled series of class meetings at designated times and days of the week."
    },
    {
      "name": "cohorts",
      "description": "This entity represents any type of list of designated students for tracking, analysis, or intervention."
    },
    {
      "name": "communityOrganizations",
      "description": "This entity represents an administrative unit at the state level which exists primarily to operate local community providers."
    },
    {
      "name": "communityProviderLicenses",
      "description": "The legal document held by the CommunityProvider that authorizes the holder to perform certain functions and or services."
    },
    {
      "name": "communityProviders",
      "description": "This entity represents an educational organization that includes staff and students who participate in classes and educational activity groups."
    },
    {
      "name": "competencyObjectives",
      "description": "This entity holds additional competencies for student achievement that are not associated with specific learning objectives (e.g., paying attention in class)."
    },
    {
      "name": "contractedStaffs",
      "description": "This financial entity represents the sum of the financial transactions to date for contracted staff. ContractedStaff includes \"contractors\" or \"consultants\" who perform services for an agreed upon fee, or an employee of a management service contracted to work on site."
    },
    {
      "name": "courseOfferings",
      "description": "This entity represents an entry in the course catalog of available courses offered by the school during a session."
    },
    {
      "name": "courses",
      "description": "This educational entity represents the organization of subject matter and related learning experiences provided for the instruction of students on a regular or systematic basis."
    },
    {
      "name": "courseTranscripts",
      "description": "This entity is the final record of a student's performance in their courses at the end of a semester or school year."
    },
    {
      "name": "credentials",
      "description": "The legal document giving authorization to perform teaching assignment services."
    },
    {
      "name": "disciplineActions",
      "description": "This event entity represents actions taken by an education organization after a disruptive event that is recorded as a discipline incident."
    },
    {
      "name": "disciplineIncidents",
      "description": "This event entity represents an occurrence of an infraction ranging from a minor behavioral problem that disrupts the orderly functioning of a school or classroom (such as tardiness) to a criminal act that results in the involvement of a law enforcement official (such as robbery). A single event (e.g., a fight) is one incident regardless of how many perpetrators or victims are involved. Discipline incidents are events classified as warranting discipline action."
    },
    {
      "name": "educationContents",
      "description": "This entity represents materials for students or teachers that can be used for teaching, learning, research, and more. Education content includes full courses, course materials, modules, intervention descriptions, textbooks, streaming videos, tests, software, and any other tools, materials, or techniques used to support access to knowledge."
    },
    {
      "name": "educationOrganizationInterventionPrescriptionAssociations",
      "description": "This association indicates interventions made available by an education organization. Often, a district-level education organization purchases a set of intervention prescriptions and makes them available to its schools for use on demand."
    },
    {
      "name": "educationOrganizationNetworkAssociations",
      "description": "Properties of the association between the EducationOrganization and its network(s)."
    },
    {
      "name": "educationOrganizationNetworks",
      "description": "This entity is a self-organized membership network of peer-level education organizations intended to provide shared services or collective procurement."
    },
    {
      "name": "educationOrganizationPeerAssociations",
      "description": "The association from an education organization to its peers."
    },
    {
      "name": "educationServiceCenters",
      "description": "This entity represents a regional, multi-services public agency authorized by state law to develop, manage and provide services, programs, or other support options (e.g., construction, food services, and technology services) to LEAs."
    },
    {
      "name": "feederSchoolAssociations",
      "description": "The association from feeder school to the receiving school."
    },
    {
      "name": "gradebookEntries",
      "description": "This entity represents an assignment, homework, or classroom assessment to be recorded in a gradebook."
    },
    {
      "name": "grades",
      "description": "This educational entity represents an overall score or assessment tied to a course over a period of time (i.e., the grading period). Student grades are usually a compilation of marks and other scores."
    },
    {
      "name": "gradingPeriods",
      "description": "This entity represents the time span for which grades are reported."
    },
    {
      "name": "graduationPlans",
      "description": "This entity is a plan outlining the required credits, credits by subject, credits by course, and other criteria required for graduation. A graduation plan may be one or more standard plans defined by an education organization and/or individual plans for some or all students."
    },
    {
      "name": "interventionPrescriptions",
      "description": "This entity represents a formal prescription of an instructional approach focusing on the specific techniques and materials used to teach a given subject. This can be prescribed by academic research, an interventions vendor, or another entity."
    },
    {
      "name": "interventions",
      "description": "An implementation of an instructional approach focusing on the specific techniques and materials used to teach a given subject."
    },
    {
      "name": "interventionStudies",
      "description": "An experimental or quasi-experimental study of an intervention technique."
    },
    {
      "name": "learningObjectives",
      "description": "This entity represents identified learning objectives for courses in specific grades."
    },
    {
      "name": "learningStandards",
      "description": "This entity is a sub-element of a learning objective consisting of a precise statement of the expectation of a student's proficiency."
    },
    {
      "name": "localEducationAgencies",
      "description": "This entity represents an administrative unit at the local level which exists primarily to operate schools or to contract for educational services. It includes school districts, charter schools, charter management organizations, or other local administrative organizations."
    },
    {
      "name": "locations",
      "description": "This entity represents the physical space where students gather for a particular class/section. The Location may be an indoor or outdoor area designated for the purpose of meeting the educational needs of students."
    },
    {
      "name": "objectiveAssessments",
      "description": "This entity represents subtests that assess specific learning objectives."
    },
    {
      "name": "openStaffPositions",
      "description": "This entity represents an open staff position that the education organization is seeking to fill."
    },
    {
      "name": "parents",
      "description": "This entity represents a parent or guardian of a student, such as mother, father, or caretaker."
    },
    {
      "name": "payrolls",
      "description": "This financial entity represents the sum of the financial transactions to date for employee compensation. An \"employee\" who performs services under the direction of the employing institution or agency, is compensated for such services by the employer and is eligible for employee benefits and wage or salary tax withholdings."
    },
    {
      "name": "postSecondaryEvents",
      "description": "This entity captures significant postsecondary events during a student's high school tenure (e.g., FAFSA application or college application, acceptance, and enrollment) or during a student's enrollment at a post-secondary institution."
    },
    {
      "name": "postSecondaryInstitutions",
      "description": "An organization that provides educational programs for individuals who have completed or otherwise left educational programs in secondary school(s)."
    },
    {
      "name": "programs",
      "description": "This entity represents any program designed to work in conjunction with, or as a supplement to, the main academic program. Programs may provide instruction, training, services, or benefits through federal, state, or local agencies. Programs may also include organized extracurricular activities for students."
    },
    {
      "name": "reportCards",
      "description": "This educational entity represents the collection of student grades for courses taken during a grading period."
    },
    {
      "name": "restraintEvents",
      "description": "This event entity represents the instances where a special education student was physically or mechanically restrained due to imminent serious physical harm to themselves or others, imminent serious property destruction or a combination of both imminent serious physical harm to themselves or others and imminent serious property destruction."
    },
    {
      "name": "schools",
      "description": "This entity represents an educational organization that includes staff and students who participate in classes and educational activity groups."
    },
    {
      "name": "schoolYearTypes",
      "description": "Identifier for a school year."
    },
    {
      "name": "sectionAttendanceTakenEvents",
      "description": "Captures attendance taken event for given section."
    },
    {
      "name": "sections",
      "description": "This entity represents a setting in which organized instruction of course content is provided, in-person or otherwise, to one or more students for a given period of time. A course offering may be offered to more than one section."
    },
    {
      "name": "sessions",
      "description": "A term in the school year, generally a unit of time into which courses are scheduled, instruction occurs and by which credits are awarded. Sessions may be interrupted by vacations or other events."
    },
    {
      "name": "staffAbsenceEvents",
      "description": "This event entity represents the recording of the dates of staff absence."
    },
    {
      "name": "staffCohortAssociations",
      "description": "This association indicates the Staff associated with a cohort of students."
    },
    {
      "name": "staffEducationOrganizationAssignmentAssociations",
      "description": "This association indicates the education organization to which a staff member provides services; also known as school of service."
    },
    {
      "name": "staffEducationOrganizationContactAssociations",
      "description": "This association provides the contact information of the staff associated with the education organization."
    },
    {
      "name": "staffEducationOrganizationEmploymentAssociations",
      "description": "This association indicates the EducationOrganization an employee, contractor, volunteer, or other service provider is formally associated with typically indicated by which organization the staff member has a services contract with or receives compensation from."
    },
    {
      "name": "staffLeaves",
      "description": "This entity represents the recording of the dates of staff leave (e.g., sick leave, personal time, vacation)."
    },
    {
      "name": "staffProgramAssociations",
      "description": "This association indicates the Staff associated with a program."
    },
    {
      "name": "staffs",
      "description": "This entity represents an individual who performs specified activities for any public or private education institution or agency that provides instructional and/or support services to students or staff at the early childhood level through high school completion. For example, this includes:\r\n    1. An \"employee\" who performs services under the direction of the employing institution or agency is compensated for such services by the employer and is eligible for employee benefits and wage or salary tax withholdings\r\n    2. A \"contractor\" or \"consultant\" who performs services for an agreed upon fee or an employee of a management service contracted to work on site\r\n    3. A \"volunteer\" who performs services on a voluntary and uncompensated basis\r\n    4. An in-kind service provider\r\n    5. An independent contractor or businessperson working at a school site."
    },
    {
      "name": "staffSchoolAssociations",
      "description": "This association indicates the School(s) to which a staff member provides instructional services."
    },
    {
      "name": "staffSectionAssociations",
      "description": "This association indicates the class sections to which a staff member is assigned."
    },
    {
      "name": "stateEducationAgencies",
      "description": "This entity represents the agency of the state charged with the primary responsibility for coordinating and supervising public instruction, including the setting of standards for elementary and secondary instructional programs."
    },
    {
      "name": "studentAcademicRecords",
      "description": "This educational entity represents the cumulative record of academic achievement for a student."
    },
    {
      "name": "studentAssessments",
      "description": "This entity represents the analysis or scoring of a student's response on an assessment. The analysis results in a value that represents a student's performance on a set of items on a test."
    },
    {
      "name": "studentCohortAssociations",
      "description": "This association represents the Cohort(s) for which a student is designated."
    },
    {
      "name": "studentCompetencyObjectives",
      "description": "This entity represents the competency assessed or evaluated for the student against a specific learning  objective."
    },
    {
      "name": "studentCTEProgramAssociations",
      "description": "This association represents the career and technical education (CTE) program that a student participates in. The association is an extension of the StudentProgramAssociation particular for CTE programs."
    },
    {
      "name": "studentDisciplineIncidentAssociations",
      "description": "This association indicates those students who were victims, perpetrators, witnesses, and reporters for a discipline incident."
    },
    {
      "name": "studentEducationOrganizationAssociations",
      "description": "This association represents student information that is specific to a student's relationship with an EducationOrganization. Enrollment relationship semantics are covered by StudentSchoolAssociation."
    },
    {
      "name": "studentEducationOrganizationResponsibilityAssociations",
      "description": "This association indicates any relationship between a student and an education organization other than how the state views enrollment. Enrollment relationship semantics are covered by StudentSchoolAssociation."
    },
    {
      "name": "studentGradebookEntries",
      "description": "This entity holds a student's grade or competency level for a gradebook entry."
    },
    {
      "name": "studentHomelessProgramAssociations",
      "description": "This association represents the McKinney-Vento Homeless Program program(s) that a student participates in or from which the Student receives services."
    },
    {
      "name": "studentInterventionAssociations",
      "description": "This association indicates the students participating in an intervention."
    },
    {
      "name": "studentInterventionAttendanceEvents",
      "description": "This event entity represents the recording of whether a student is in attendance for an intervention service."
    },
    {
      "name": "studentLanguageInstructionProgramAssociations",
      "description": "This association represents the Title III Language Instruction for Limited English Proficient and Immigrant Students program(s) that a student participates in or from which the Student receives services."
    },
    {
      "name": "studentLearningObjectives",
      "description": "This entity represents the competency assessed or evaluated for the student against a specific LearningObjective."
    },
    {
      "name": "studentMigrantEducationProgramAssociations",
      "description": "This association represents the migrant education program(s) that a student participates in or receives services from. The association is an extension of the StudentProgramAssociation with added elements particular to migrant education programs."
    },
    {
      "name": "studentNeglectedOrDelinquentProgramAssociations",
      "description": "This association represents the Title I Part D Neglected or Delinquent program(s) that a student participates in or from which the Student receives services."
    },
    {
      "name": "studentParentAssociations",
      "description": "This association relates students to their parents, guardians, or caretakers."
    },
    {
      "name": "studentProgramAssociations",
      "description": "This association represents the Program(s) that a student participates in or is served by."
    },
    {
      "name": "studentProgramAttendanceEvents",
      "description": "This event entity represents the recording of whether a student is in attendance to receive or participate in program services."
    },
    {
      "name": "students",
      "description": "This entity represents an individual for whom instruction, services, and/or care are provided in an early childhood, elementary, or secondary educational program under the jurisdiction of a school, education agency or other institution or program. A student is a person who has been enrolled in a school or other educational institution."
    },
    {
      "name": "studentSchoolAssociations",
      "description": "This association represents the School in which a student is enrolled. The semantics of enrollment may differ slightly by state. Non-enrollment relationships between a student and an education organization may be described using the StudentEducationOrganizationAssociation."
    },
    {
      "name": "studentSchoolAttendanceEvents",
      "description": "This event entity represents the recording of whether a student is in attendance for a school day."
    },
    {
      "name": "studentSchoolFoodServiceProgramAssociations",
      "description": "This association represents the school food services program(s), such as the Free or Reduced Lunch Program, that a student participates in or from which the Student receives services."
    },
    {
      "name": "studentSectionAssociations",
      "description": "This association indicates the course sections to which a student is assigned."
    },
    {
      "name": "studentSectionAttendanceEvents",
      "description": "This event entity represents the recording of whether a student is in attendance for a section."
    },
    {
      "name": "studentSpecialEducationProgramAssociations",
      "description": "This association represents the special education program(s) that a student participates in or receives services from. The association is an extension of the StudentProgramAssociation particular for special education programs."
    },
    {
      "name": "studentTitleIPartAProgramAssociations",
      "description": "This association represents the Title I Part A program(s) that a student participates in or from which the Student receives services. The association is an extension of the StudentProgramAssociation particular for Title I Part A programs."
    }
  ],
  "paths": {
    "/ed-fi/academicWeeks": {
      "get": {
        "tags": [ "academicWeeks" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getAcademicWeeks",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "weekIdentifier",
            "in": "query",
            "description": "The school label for the week.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 80,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The start date for the academic week.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date for the academic week.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "totalInstructionalDays",
            "in": "query",
            "description": "The total instructional days during the academic week.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/academicWeek"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "academicWeeks" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postAcademicWeek",
        "requestBody": {
          "$ref": "#/components/requestBodies/academicWeek"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/academicWeeks/{id}": {
      "get": {
        "tags": [ "academicWeeks" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getAcademicWeeksById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/academicWeek"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "academicWeeks" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putAcademicWeek",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/academicWeek"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "academicWeeks" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteAcademicWeekById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/accounts": {
      "get": {
        "tags": [ "accounts" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getAccounts",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "The alphanumeric string that identifies the account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "fiscalYear",
            "in": "query",
            "description": "The financial accounting year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "accountName",
            "in": "query",
            "description": "A descriptive name for the account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 100,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/account"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "accounts" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postAccount",
        "requestBody": {
          "$ref": "#/components/requestBodies/account"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/accounts/{id}": {
      "get": {
        "tags": [ "accounts" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getAccountsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "accounts" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/account"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "accounts" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteAccountById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/accountabilityRatings": {
      "get": {
        "tags": [ "accountabilityRatings" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getAccountabilityRatings",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ratingTitle",
            "in": "query",
            "description": "The title of the rating (e.g., School Rating, Safety Score).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The school year for which the AccountabilityRating is assessed.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rating",
            "in": "query",
            "description": "An accountability rating level, designation, or assessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 35,
              "type": "string"
            }
          },
          {
            "name": "ratingDate",
            "in": "query",
            "description": "The date the rating was awarded.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "ratingOrganization",
            "in": "query",
            "description": "The organization that assessed the rating.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 35,
              "type": "string"
            }
          },
          {
            "name": "ratingProgram",
            "in": "query",
            "description": "The program associated with the AccountabilityRating (e.g., NCLB, AEIS).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/accountabilityRating"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "accountabilityRatings" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postAccountabilityRating",
        "requestBody": {
          "$ref": "#/components/requestBodies/accountabilityRating"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/accountabilityRatings/{id}": {
      "get": {
        "tags": [ "accountabilityRatings" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getAccountabilityRatingsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accountabilityRating"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "accountabilityRatings" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putAccountabilityRating",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/accountabilityRating"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "accountabilityRatings" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteAccountabilityRatingById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/accountCodes": {
      "get": {
        "tags": [ "accountCodes" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getAccountCodes",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "accountClassificationDescriptor",
            "in": "query",
            "description": "The type of account code associated with the account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "accountCodeNumber",
            "in": "query",
            "description": "An account code defined for the education accounting system by the education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "fiscalYear",
            "in": "query",
            "description": "The financial accounting year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "accountCodeDescription",
            "in": "query",
            "description": "A description of the account code.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/accountCode"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "accountCodes" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postAccountCode",
        "requestBody": {
          "$ref": "#/components/requestBodies/accountCode"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/accountCodes/{id}": {
      "get": {
        "tags": [ "accountCodes" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getAccountCodesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accountCode"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "accountCodes" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putAccountCode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/accountCode"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "accountCodes" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteAccountCodeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/actuals": {
      "get": {
        "tags": [ "actuals" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getActuals",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "asOfDate",
            "in": "query",
            "description": "The date of the reported actual element.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "The alphanumeric string that identifies the account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "fiscalYear",
            "in": "query",
            "description": "The financial accounting year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "amountToDate",
            "in": "query",
            "description": "Current balance for the account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/actual"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "actuals" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postActual",
        "requestBody": {
          "$ref": "#/components/requestBodies/actual"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/actuals/{id}": {
      "get": {
        "tags": [ "actuals" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getActualsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actual"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "actuals" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putActual",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/actual"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "actuals" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteActualById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/grand-bend/applicants": {
      "get": {
        "tags": [ "applicants" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getApplicants",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "applicantIdentifier",
            "in": "query",
            "description": "A unique alphanumeric code assigned to an applicant.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "highlyQualifiedAcademicSubjectDescriptor",
            "in": "query",
            "description": "An applicant subject in which a teacher applicant is classified as highly qualified.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "citizenshipStatusDescriptor",
            "in": "query",
            "description": "An indicator of whether or not the person is a U.S. citizen.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "highestCompletedLevelOfEducationDescriptor",
            "in": "query",
            "description": "The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "sexDescriptor",
            "in": "query",
            "description": "A person's gender.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "birthDate",
            "in": "query",
            "description": "The month, day, and year on which an individual was born.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "generationCodeSuffix",
            "in": "query",
            "description": "An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          },
          {
            "name": "highlyQualifiedTeacher",
            "in": "query",
            "description": "An indication of whether a teacher applicant is classified as highly qualified for his/her prospective assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections to be taught.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hispanicLatinoEthnicity",
            "in": "query",
            "description": "An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastSurname",
            "in": "query",
            "description": "The name borne in common by members of a family.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "loginId",
            "in": "query",
            "description": "The login ID for the user; used for security access control interface.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "maidenName",
            "in": "query",
            "description": "The person's maiden name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "middleName",
            "in": "query",
            "description": "A secondary name given to an individual at birth, baptism, or during another naming ceremony.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "personalTitlePrefix",
            "in": "query",
            "description": "A prefix used to denote the title, degree, position, or seniority of the person.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "yearsOfPriorProfessionalExperience",
            "in": "query",
            "description": "The total number of years that an individual has previously held a similar professional position in one or more education institutions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "yearsOfPriorTeachingExperience",
            "in": "query",
            "description": "The total number of years that an individual has previously held a teaching position in one or more education institutions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/grandBend_applicant"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "applicants" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postApplicant",
        "requestBody": {
          "$ref": "#/components/requestBodies/grandBend_applicant"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/grand-bend/applicants/{id}": {
      "get": {
        "tags": [ "applicants" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getApplicantsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grandBend_applicant"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "applicants" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putApplicant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/grandBend_applicant"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "applicants" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteApplicantById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/assessments": {
      "get": {
        "tags": [ "assessments" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getAssessments",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "assessmentIdentifier",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to an assessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Namespace for the Assessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "assessmentCategoryDescriptor",
            "in": "query",
            "description": "The category of an assessment based on format and content. For example:          Achievement test          Advanced placement test          Alternate assessment/grade-level standards          Attitudinal test          Cognitive and perceptual skills test          ...",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "adaptiveAssessment",
            "in": "query",
            "description": "Indicates that the assessment is adaptive.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "assessmentFamily",
            "in": "query",
            "description": "The AssessmentFamily this Assessment is a member of.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "assessmentForm",
            "in": "query",
            "description": "Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "assessmentTitle",
            "in": "query",
            "description": "The title or name of the Assessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 100,
              "type": "string"
            }
          },
          {
            "name": "assessmentVersion",
            "in": "query",
            "description": "The version identifier for the assessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxRawScore",
            "in": "query",
            "description": "The maximum raw score achievable across all assessment items that are correct and scored at the maximum.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nomenclature",
            "in": "query",
            "description": "Reflects the specific nomenclature used for Assessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 35,
              "type": "string"
            }
          },
          {
            "name": "revisionDate",
            "in": "query",
            "description": "The month, day, and year that the conceptual design for the assessment was most recently revised substantially.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/assessment"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "assessments" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postAssessment",
        "requestBody": {
          "$ref": "#/components/requestBodies/assessment"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/assessments/{id}": {
      "get": {
        "tags": [ "assessments" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getAssessmentsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assessment"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "assessments" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putAssessment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/assessment"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "assessments" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteAssessmentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/assessmentItems": {
      "get": {
        "tags": [ "assessmentItems" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getAssessmentItems",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "identificationCode",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "assessmentIdentifier",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to an assessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Namespace for the Assessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "assessmentItemCategoryDescriptor",
            "in": "query",
            "description": "Category or type of the AssessmentItem. For example:          Multiple choice          Analytic          Prose          ...",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "assessmentItemURI",
            "in": "query",
            "description": "The URI (typical a URL) pointing to the entry in an assessment item bank, which describes this content item.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "correctResponse",
            "in": "query",
            "description": "The correct response for the AssessmentItem.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          },
          {
            "name": "expectedTimeAssessed",
            "in": "query",
            "description": "The duration of time allotted for the AssessmentItem.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxRawScore",
            "in": "query",
            "description": "The maximum raw score achievable across all assessment items that are correct and scored at the maximum.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nomenclature",
            "in": "query",
            "description": "Reflects the specific nomenclature used for AssessmentItem.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 35,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/assessmentItem"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "assessmentItems" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postAssessmentItem",
        "requestBody": {
          "$ref": "#/components/requestBodies/assessmentItem"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/assessmentItems/{id}": {
      "get": {
        "tags": [ "assessmentItems" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getAssessmentItemsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assessmentItem"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "assessmentItems" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putAssessmentItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/assessmentItem"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "assessmentItems" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteAssessmentItemById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/bellSchedules": {
      "get": {
        "tags": [ "bellSchedules" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getBellSchedules",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "bellScheduleName",
            "in": "query",
            "description": "Name or title of the BellSchedule.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "alternateDayName",
            "in": "query",
            "description": "An alternate name for the day (e.g., Red, Blue).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bellSchedule"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "bellSchedules" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postBellSchedule",
        "requestBody": {
          "$ref": "#/components/requestBodies/bellSchedule"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/bellSchedules/{id}": {
      "get": {
        "tags": [ "bellSchedules" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getBellSchedulesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bellSchedule"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "bellSchedules" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putBellSchedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/bellSchedule"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "bellSchedules" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteBellScheduleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/budgets": {
      "get": {
        "tags": [ "budgets" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getBudgets",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "asOfDate",
            "in": "query",
            "description": "The date of the reported budget element.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "The alphanumeric string that identifies the account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "fiscalYear",
            "in": "query",
            "description": "The financial accounting year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "amount",
            "in": "query",
            "description": "Amount budgeted for the account for this fiscal year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/budget"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "budgets" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postBudget",
        "requestBody": {
          "$ref": "#/components/requestBodies/budget"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/budgets/{id}": {
      "get": {
        "tags": [ "budgets" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getBudgetsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/budget"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "budgets" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putBudget",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/budget"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "budgets" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteBudgetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/calendars": {
      "get": {
        "tags": [ "calendars" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getCalendars",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "calendarCode",
            "in": "query",
            "description": "The identifier for the Calendar.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year associated with the Calendar.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "calendarTypeDescriptor",
            "in": "query",
            "description": "Indicates the type of Calendar.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/calendar"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "calendars" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postCalendar",
        "requestBody": {
          "$ref": "#/components/requestBodies/calendar"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/calendars/{id}": {
      "get": {
        "tags": [ "calendars" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getCalendarsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendar"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "calendars" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putCalendar",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/calendar"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "calendars" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteCalendarById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/calendarDates": {
      "get": {
        "tags": [ "calendarDates" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getCalendarDates",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The month, day, and year of the CalendarEvent.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "calendarCode",
            "in": "query",
            "description": "The identifier for the Calendar.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year associated with the Calendar.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/calendarDate"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "calendarDates" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postCalendarDate",
        "requestBody": {
          "$ref": "#/components/requestBodies/calendarDate"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/calendarDates/{id}": {
      "get": {
        "tags": [ "calendarDates" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getCalendarDatesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarDate"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "calendarDates" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putCalendarDate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/calendarDate"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "calendarDates" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteCalendarDateById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/classPeriods": {
      "get": {
        "tags": [ "classPeriods" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getClassPeriods",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "classPeriodName",
            "in": "query",
            "description": "An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "officialAttendancePeriod",
            "in": "query",
            "description": "Indicator of whether this class period is used for official daily attendance.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/classPeriod"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "classPeriods" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postClassPeriod",
        "requestBody": {
          "$ref": "#/components/requestBodies/classPeriod"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/classPeriods/{id}": {
      "get": {
        "tags": [ "classPeriods" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getClassPeriodsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/classPeriod"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "classPeriods" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putClassPeriod",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/classPeriod"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "classPeriods" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteClassPeriodById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/cohorts": {
      "get": {
        "tags": [ "cohorts" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getCohorts",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "cohortIdentifier",
            "in": "query",
            "description": "The name or ID for the Cohort.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "academicSubjectDescriptor",
            "in": "query",
            "description": "The academic subject associated with an academic intervention.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "cohortScopeDescriptor",
            "in": "query",
            "description": "The scope of cohort (e.g., school, district, classroom).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "cohortTypeDescriptor",
            "in": "query",
            "description": "The type of cohort (e.g., academic intervention, classroom breakout).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "cohortDescription",
            "in": "query",
            "description": "The description of the Cohort and its purpose.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/cohort"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "cohorts" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postCohort",
        "requestBody": {
          "$ref": "#/components/requestBodies/cohort"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/cohorts/{id}": {
      "get": {
        "tags": [ "cohorts" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getCohortsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cohort"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "cohorts" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putCohort",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/cohort"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "cohorts" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteCohortById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/communityOrganizations": {
      "get": {
        "tags": [ "communityOrganizations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getCommunityOrganizations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "communityOrganizationId",
            "in": "query",
            "description": "The identifier assigned to a CommunityOrganization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/communityOrganization"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "communityOrganizations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postCommunityOrganization",
        "requestBody": {
          "$ref": "#/components/requestBodies/communityOrganization"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/communityOrganizations/{id}": {
      "get": {
        "tags": [ "communityOrganizations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getCommunityOrganizationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/communityOrganization"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "communityOrganizations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putCommunityOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/communityOrganization"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "communityOrganizations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteCommunityOrganizationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/communityProviders": {
      "get": {
        "tags": [ "communityProviders" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getCommunityProviders",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "communityProviderId",
            "in": "query",
            "description": "The identifier assigned to a CommunityProvider.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "communityOrganizationId",
            "in": "query",
            "description": "The identifier assigned to a CommunityOrganization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "providerCategoryDescriptor",
            "in": "query",
            "description": "Indicates the category of the provider.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "providerProfitabilityDescriptor",
            "in": "query",
            "description": "Indicates the profitability status of the provider.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "providerStatusDescriptor",
            "in": "query",
            "description": "Indicates the status of the provider.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "licenseExemptIndicator",
            "in": "query",
            "description": "An indication of whether the provider is exempt from having a license.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "schoolIndicator",
            "in": "query",
            "description": "An indication of whether the community provider is a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/communityProvider"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "communityProviders" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postCommunityProvider",
        "requestBody": {
          "$ref": "#/components/requestBodies/communityProvider"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/communityProviders/{id}": {
      "get": {
        "tags": [ "communityProviders" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getCommunityProvidersById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/communityProvider"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "communityProviders" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putCommunityProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/communityProvider"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "communityProviders" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteCommunityProviderById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/communityProviderLicenses": {
      "get": {
        "tags": [ "communityProviderLicenses" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getCommunityProviderLicenses",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "licenseIdentifier",
            "in": "query",
            "description": "The unique identifier issued by the licensing organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "licensingOrganization",
            "in": "query",
            "description": "The organization issuing the license.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "communityProviderId",
            "in": "query",
            "description": "The identifier assigned to a CommunityProvider.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "licenseStatusDescriptor",
            "in": "query",
            "description": "An indication of the status of the license.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "licenseTypeDescriptor",
            "in": "query",
            "description": "An indication of the category of the license.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "authorizedFacilityCapacity",
            "in": "query",
            "description": "The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "licenseEffectiveDate",
            "in": "query",
            "description": "The month, day, and year on which a license is active or becomes effective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "licenseExpirationDate",
            "in": "query",
            "description": "The month, day, and year on which a license will expire.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "licenseIssueDate",
            "in": "query",
            "description": "The month, day, and year on which an active license was issued.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "oldestAgeAuthorizedToServe",
            "in": "query",
            "description": "The oldest age of children a provider is authorized or licensed to serve.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "youngestAgeAuthorizedToServe",
            "in": "query",
            "description": "The youngest age of children a provider is authorized or licensed to serve.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/communityProviderLicense"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "communityProviderLicenses" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postCommunityProviderLicense",
        "requestBody": {
          "$ref": "#/components/requestBodies/communityProviderLicense"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/communityProviderLicenses/{id}": {
      "get": {
        "tags": [ "communityProviderLicenses" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getCommunityProviderLicensesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/communityProviderLicense"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "communityProviderLicenses" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putCommunityProviderLicense",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/communityProviderLicense"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "communityProviderLicenses" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteCommunityProviderLicenseById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/competencyObjectives": {
      "get": {
        "tags": [ "competencyObjectives" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getCompetencyObjectives",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "objectiveGradeLevelDescriptor",
            "in": "query",
            "description": "The grade level for which the CompetencyObjective is targeted.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "objective",
            "in": "query",
            "description": "The designated title of the CompetencyObjective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "competencyObjectiveId",
            "in": "query",
            "description": "The Identifier for the CompetencyObjective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of the student competency objective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "successCriteria",
            "in": "query",
            "description": "One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the CompetencyObjective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 150,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/competencyObjective"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "competencyObjectives" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postCompetencyObjective",
        "requestBody": {
          "$ref": "#/components/requestBodies/competencyObjective"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/competencyObjectives/{id}": {
      "get": {
        "tags": [ "competencyObjectives" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getCompetencyObjectivesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/competencyObjective"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "competencyObjectives" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putCompetencyObjective",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/competencyObjective"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "competencyObjectives" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteCompetencyObjectiveById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/contractedStaffs": {
      "get": {
        "tags": [ "contractedStaffs" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getContractedStaffs",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "asOfDate",
            "in": "query",
            "description": "The date of the reported contracted staff element.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "The alphanumeric string that identifies the account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "fiscalYear",
            "in": "query",
            "description": "The financial accounting year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "staffUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "amountToDate",
            "in": "query",
            "description": "Current balance (amount paid to contractor) for account for the fiscal year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/contractedStaff"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "contractedStaffs" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postContractedStaff",
        "requestBody": {
          "$ref": "#/components/requestBodies/contractedStaff"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/contractedStaffs/{id}": {
      "get": {
        "tags": [ "contractedStaffs" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getContractedStaffsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contractedStaff"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "contractedStaffs" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putContractedStaff",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/contractedStaff"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "contractedStaffs" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteContractedStaffById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/courses": {
      "get": {
        "tags": [ "courses" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getCourses",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "courseCode",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "academicSubjectDescriptor",
            "in": "query",
            "description": "The intended major subject area of the course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "careerPathwayDescriptor",
            "in": "query",
            "description": "Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "courseDefinedByDescriptor",
            "in": "query",
            "description": "Specifies whether the course was defined by the SEA, LEA, School, or national organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "courseGPAApplicabilityDescriptor",
            "in": "query",
            "description": "An indicator of whether or not the course being described is included in the computation of the student's Grade Point Average, and if so, if it is weighted differently from regular courses.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "minimumAvailableCreditTypeDescriptor",
            "in": "query",
            "description": "The type of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "maximumAvailableCreditTypeDescriptor",
            "in": "query",
            "description": "The type of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "courseDescription",
            "in": "query",
            "description": "A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "courseTitle",
            "in": "query",
            "description": "The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "dateCourseAdopted",
            "in": "query",
            "description": "Date the course was adopted by the education agency.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "highSchoolCourseRequirement",
            "in": "query",
            "description": "An indication that this course may satisfy high school graduation requirements in the course's subject area.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxCompletionsForCredit",
            "in": "query",
            "description": "Designates how many times the course may be taken with credit received by the student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maximumAvailableCreditConversion",
            "in": "query",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "maximumAvailableCredits",
            "in": "query",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "minimumAvailableCreditConversion",
            "in": "query",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "minimumAvailableCredits",
            "in": "query",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "numberOfParts",
            "in": "query",
            "description": "The number of parts identified for a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "timeRequiredForCompletion",
            "in": "query",
            "description": "The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/course"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "courses" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postCourse",
        "requestBody": {
          "$ref": "#/components/requestBodies/course"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/courses/{id}": {
      "get": {
        "tags": [ "courses" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getCoursesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/course"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "courses" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putCourse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/course"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "courses" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteCourseById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/courseOfferings": {
      "get": {
        "tags": [ "courseOfferings" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getCourseOfferings",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "localCourseCode",
            "in": "query",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sessionName",
            "in": "query",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "courseCode",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instructionalTimePlanned",
            "in": "query",
            "description": "The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "localCourseTitle",
            "in": "query",
            "description": "The descriptive name given to a course of study offered in the school, if different from the CourseTitle.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/courseOffering"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "courseOfferings" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postCourseOffering",
        "requestBody": {
          "$ref": "#/components/requestBodies/courseOffering"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/courseOfferings/{id}": {
      "get": {
        "tags": [ "courseOfferings" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getCourseOfferingsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/courseOffering"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "courseOfferings" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putCourseOffering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/courseOffering"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "courseOfferings" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteCourseOfferingById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/courseTranscripts": {
      "get": {
        "tags": [ "courseTranscripts" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getCourseTranscripts",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "courseAttemptResultDescriptor",
            "in": "query",
            "description": "The result from the student's attempt to take the course, for example:          Pass          Fail          Incomplete          Withdrawn.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "courseCode",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "courseEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "termDescriptor",
            "in": "query",
            "description": "The term for the session during the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "externalEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "courseRepeatCodeDescriptor",
            "in": "query",
            "description": "Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student's academic grade average.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "attemptedCreditTypeDescriptor",
            "in": "query",
            "description": "The type of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "earnedCreditTypeDescriptor",
            "in": "query",
            "description": "The type of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "whenTakenGradeLevelDescriptor",
            "in": "query",
            "description": "Student's grade level at time of course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "methodCreditEarnedDescriptor",
            "in": "query",
            "description": "The method the credits were earned (e.g., Classroom, Examination, Transfer).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "alternativeCourseCode",
            "in": "query",
            "description": "The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "alternativeCourseTitle",
            "in": "query",
            "description": "The descriptive name given to a course of study offered in the school, if different from the CourseTitle.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "attemptedCreditConversion",
            "in": "query",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "attemptedCredits",
            "in": "query",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "courseTitle",
            "in": "query",
            "description": "The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "earnedCreditConversion",
            "in": "query",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "earnedCredits",
            "in": "query",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "finalLetterGradeEarned",
            "in": "query",
            "description": "The final indicator of student performance in a class as submitted by the instructor.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          },
          {
            "name": "finalNumericGradeEarned",
            "in": "query",
            "description": "The final indicator of student performance in a class as submitted by the instructor.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/courseTranscript"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "courseTranscripts" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postCourseTranscript",
        "requestBody": {
          "$ref": "#/components/requestBodies/courseTranscript"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/courseTranscripts/{id}": {
      "get": {
        "tags": [ "courseTranscripts" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getCourseTranscriptsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/courseTranscript"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "courseTranscripts" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putCourseTranscript",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/courseTranscript"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "courseTranscripts" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteCourseTranscriptById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/credentials": {
      "get": {
        "tags": [ "credentials" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getCredentials",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "stateOfIssueStateAbbreviationDescriptor",
            "in": "query",
            "description": "The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "credentialIdentifier",
            "in": "query",
            "description": "Identifier or serial number assigned to the credential.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "credentialFieldDescriptor",
            "in": "query",
            "description": "The field of certification for the certificate (e.g., Mathematics, Music).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "credentialTypeDescriptor",
            "in": "query",
            "description": "An indication of the category of credential an individual holds.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "teachingCredentialBasisDescriptor",
            "in": "query",
            "description": "An indication of the pre-determined criteria for granting the teaching credential that an individual holds.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "teachingCredentialDescriptor",
            "in": "query",
            "description": "An indication of the category of a legal document giving authorization to perform teaching assignment services.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "effectiveDate",
            "in": "query",
            "description": "The year, month and day on which an active credential held by an individual was issued.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "expirationDate",
            "in": "query",
            "description": "The month, day, and year on which an active credential held by an individual will expire.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issuanceDate",
            "in": "query",
            "description": "The month, day, and year on which an active credential was issued to an individual.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Namespace for the Credential.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/credential"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "credentials" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postCredential",
        "requestBody": {
          "$ref": "#/components/requestBodies/credential"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/credentials/{id}": {
      "get": {
        "tags": [ "credentials" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getCredentialsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credential"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "credentials" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putCredential",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/credential"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "credentials" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteCredentialById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/disciplineActions": {
      "get": {
        "tags": [ "disciplineActions" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getDisciplineActions",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "disciplineActionIdentifier",
            "in": "query",
            "description": "Identifier assigned by the education organization to the DisciplineAction.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "disciplineDate",
            "in": "query",
            "description": "The date of the DisciplineAction.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "responsibilitySchoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "assignmentSchoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "disciplineActionLengthDifferenceReasonDescriptor",
            "in": "query",
            "description": "Indicates the reason for the difference, if any, between the official and actual lengths of a student's disciplinary assignment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "actualDisciplineActionLength",
            "in": "query",
            "description": "Indicates the actual length in school days of a student's disciplinary assignment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "disciplineActionLength",
            "in": "query",
            "description": "The length of time in school days for the DisciplineAction (e.g. removal, detention), if applicable.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "iepPlacementMeetingIndicator",
            "in": "query",
            "description": "An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student's Individualized Education Program (IEP) team to determine appropriate placement.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "receivedEducationServicesDuringExpulsion",
            "in": "query",
            "description": "An indication of whether the student received educational services when removed from the regular school program for disciplinary reasons.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "relatedToZeroTolerancePolicy",
            "in": "query",
            "description": "An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/disciplineAction"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "disciplineActions" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postDisciplineAction",
        "requestBody": {
          "$ref": "#/components/requestBodies/disciplineAction"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/disciplineActions/{id}": {
      "get": {
        "tags": [ "disciplineActions" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getDisciplineActionsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disciplineAction"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "disciplineActions" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putDisciplineAction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/disciplineAction"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "disciplineActions" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteDisciplineActionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/disciplineIncidents": {
      "get": {
        "tags": [ "disciplineIncidents" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getDisciplineIncidents",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "incidentIdentifier",
            "in": "query",
            "description": "A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "staffUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          },
          {
            "name": "incidentLocationDescriptor",
            "in": "query",
            "description": "Identifies where the DisciplineIncident occurred and whether or not it occurred on school, for example:          On school          Administrative offices area          Cafeteria area          Classroom          Hallway or stairs          ...",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "reporterDescriptionDescriptor",
            "in": "query",
            "description": "Information on the type of individual who reported the DisciplineIncident. When known and/or if useful, use a more specific option code (e.g., \"Counselor\" rather than \"Professional Staff\"); for example:          Student          Parent/guardian          Law enforcement officer          Nonschool personnel          Representative of visiting school          ...",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "caseNumber",
            "in": "query",
            "description": "The case number assigned to the DisciplineIncident by law enforcement or other organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "incidentCost",
            "in": "query",
            "description": "The value of any quantifiable monetary loss directly resulting from the DisciplineIncident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "incidentDate",
            "in": "query",
            "description": "The month, day, and year on which the DisciplineIncident occurred.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "incidentDescription",
            "in": "query",
            "description": "The description for an incident.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "incidentTime",
            "in": "query",
            "description": "An indication of the time of day the incident took place.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportedToLawEnforcement",
            "in": "query",
            "description": "Indicator of whether the incident was reported to law enforcement.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "reporterName",
            "in": "query",
            "description": "Identifies the reporter of the DisciplineIncident by name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/disciplineIncident"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "disciplineIncidents" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postDisciplineIncident",
        "requestBody": {
          "$ref": "#/components/requestBodies/disciplineIncident"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/disciplineIncidents/{id}": {
      "get": {
        "tags": [ "disciplineIncidents" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getDisciplineIncidentsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disciplineIncident"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "disciplineIncidents" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putDisciplineIncident",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/disciplineIncident"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "disciplineIncidents" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteDisciplineIncidentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/educationContents": {
      "get": {
        "tags": [ "educationContents" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getEducationContents",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "contentIdentifier",
            "in": "query",
            "description": "A unique identifier for the EducationContent.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 225,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "learningStandardId",
            "in": "query",
            "description": "The identifier for the specific learning standard (e.g., 111.15.3.1.A).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "contentClassDescriptor",
            "in": "query",
            "description": "The predominate type or kind characterizing the learning resource.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "costRateDescriptor",
            "in": "query",
            "description": "The rate by which the cost applies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "interactivityStyleDescriptor",
            "in": "query",
            "description": "The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "additionalAuthorsIndicator",
            "in": "query",
            "description": "Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \"et al\".",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "cost",
            "in": "query",
            "description": "An amount that has to be paid or spent to buy or obtain the EducationContent.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "An extended written representation of the education content.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "learningResourceMetadataURI",
            "in": "query",
            "description": "The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Namespace for the EducationContent.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "publicationDate",
            "in": "query",
            "description": "The date on which this content was first published.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "publicationYear",
            "in": "query",
            "description": "The year at which this content was first published.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "publisher",
            "in": "query",
            "description": "The organization credited with publishing the resource.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "shortDescription",
            "in": "query",
            "description": "A short description or name of the entity.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "timeRequired",
            "in": "query",
            "description": "Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "useRightsURL",
            "in": "query",
            "description": "The URL where the owner specifies permissions for using the resource.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The version identifier for the content.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/educationContent"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "educationContents" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postEducationContent",
        "requestBody": {
          "$ref": "#/components/requestBodies/educationContent"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/educationContents/{id}": {
      "get": {
        "tags": [ "educationContents" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getEducationContentsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/educationContent"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "educationContents" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putEducationContent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/educationContent"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "educationContents" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteEducationContentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/educationOrganizationInterventionPrescriptionAssociations": {
      "get": {
        "tags": [ "educationOrganizationInterventionPrescriptionAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getEducationOrganizationInterventionPrescriptionAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "interventionPrescriptionEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "interventionPrescriptionIdentificationCode",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to an intervention prescription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The begin date of the period during which the InterventionPrescription is available.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date of the period during which the InterventionPrescription is available.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/educationOrganizationInterventionPrescriptionAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "educationOrganizationInterventionPrescriptionAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postEducationOrganizationInterventionPrescriptionAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/educationOrganizationInterventionPrescriptionAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/educationOrganizationInterventionPrescriptionAssociations/{id}": {
      "get": {
        "tags": [ "educationOrganizationInterventionPrescriptionAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getEducationOrganizationInterventionPrescriptionAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/educationOrganizationInterventionPrescriptionAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "educationOrganizationInterventionPrescriptionAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putEducationOrganizationInterventionPrescriptionAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/educationOrganizationInterventionPrescriptionAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "educationOrganizationInterventionPrescriptionAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteEducationOrganizationInterventionPrescriptionAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/educationOrganizationNetworks": {
      "get": {
        "tags": [ "educationOrganizationNetworks" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getEducationOrganizationNetworks",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "educationOrganizationNetworkId",
            "in": "query",
            "description": "The identifier assigned to a network of education organizations.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "networkPurposeDescriptor",
            "in": "query",
            "description": "The purpose(s) of the network (e.g., shared services, collective procurement).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/educationOrganizationNetwork"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "educationOrganizationNetworks" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postEducationOrganizationNetwork",
        "requestBody": {
          "$ref": "#/components/requestBodies/educationOrganizationNetwork"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/educationOrganizationNetworks/{id}": {
      "get": {
        "tags": [ "educationOrganizationNetworks" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getEducationOrganizationNetworksById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/educationOrganizationNetwork"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "educationOrganizationNetworks" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putEducationOrganizationNetwork",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/educationOrganizationNetwork"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "educationOrganizationNetworks" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteEducationOrganizationNetworkById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/educationOrganizationNetworkAssociations": {
      "get": {
        "tags": [ "educationOrganizationNetworkAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getEducationOrganizationNetworkAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "memberEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationNetworkId",
            "in": "query",
            "description": "The identifier assigned to a network of education organizations.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The date on which the EducationOrganization joined this network.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The date on which the EducationOrganization left this network.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/educationOrganizationNetworkAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "educationOrganizationNetworkAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postEducationOrganizationNetworkAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/educationOrganizationNetworkAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/educationOrganizationNetworkAssociations/{id}": {
      "get": {
        "tags": [ "educationOrganizationNetworkAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getEducationOrganizationNetworkAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/educationOrganizationNetworkAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "educationOrganizationNetworkAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putEducationOrganizationNetworkAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/educationOrganizationNetworkAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "educationOrganizationNetworkAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteEducationOrganizationNetworkAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/educationOrganizationPeerAssociations": {
      "get": {
        "tags": [ "educationOrganizationPeerAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getEducationOrganizationPeerAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "peerEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/educationOrganizationPeerAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "educationOrganizationPeerAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postEducationOrganizationPeerAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/educationOrganizationPeerAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/educationOrganizationPeerAssociations/{id}": {
      "get": {
        "tags": [ "educationOrganizationPeerAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getEducationOrganizationPeerAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/educationOrganizationPeerAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "educationOrganizationPeerAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putEducationOrganizationPeerAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/educationOrganizationPeerAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "educationOrganizationPeerAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteEducationOrganizationPeerAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/educationServiceCenters": {
      "get": {
        "tags": [ "educationServiceCenters" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getEducationServiceCenters",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "educationServiceCenterId",
            "in": "query",
            "description": "The identifier assigned to an education service center.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "stateEducationAgencyId",
            "in": "query",
            "description": "The identifier assigned to a state education agency.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/educationServiceCenter"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "educationServiceCenters" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postEducationServiceCenter",
        "requestBody": {
          "$ref": "#/components/requestBodies/educationServiceCenter"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/educationServiceCenters/{id}": {
      "get": {
        "tags": [ "educationServiceCenters" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getEducationServiceCentersById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/educationServiceCenter"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "educationServiceCenters" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putEducationServiceCenter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/educationServiceCenter"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "educationServiceCenters" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteEducationServiceCenterById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/feederSchoolAssociations": {
      "get": {
        "tags": [ "feederSchoolAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getFeederSchoolAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The month, day, and year of the first day of the feeder school association.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "feederSchoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The month, day, and year of the last day of the feeder school association.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "feederRelationshipDescription",
            "in": "query",
            "description": "Describes the relationship from the feeder school to the receiving school, for example by program emphasis, such as special education, language immersion, science, or performing art.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/feederSchoolAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "feederSchoolAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postFeederSchoolAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/feederSchoolAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/feederSchoolAssociations/{id}": {
      "get": {
        "tags": [ "feederSchoolAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getFeederSchoolAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/feederSchoolAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "feederSchoolAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putFeederSchoolAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/feederSchoolAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "feederSchoolAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteFeederSchoolAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/grades": {
      "get": {
        "tags": [ "grades" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getGrades",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "gradeTypeDescriptor",
            "in": "query",
            "description": "The type of grade reported (e.g., Exam, Final, Grading Period).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodDescriptor",
            "in": "query",
            "description": "The name of the period for which grades are reported.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodSequence",
            "in": "query",
            "description": "The sequential order of this period relative to other periods.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodSchoolYear",
            "in": "query",
            "description": "The identifier for the grading period school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "Month, day, and year of the Student's entry or assignment to the Section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "localCourseCode",
            "in": "query",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sectionIdentifier",
            "in": "query",
            "description": "The local identifier assigned to a section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sessionName",
            "in": "query",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "performanceBaseConversionDescriptor",
            "in": "query",
            "description": "A conversion of the level to a standard set of performance levels.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "diagnosticStatement",
            "in": "query",
            "description": "A statement provided by the teacher that provides information in addition to the grade or assessment score.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "letterGradeEarned",
            "in": "query",
            "description": "A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          },
          {
            "name": "numericGradeEarned",
            "in": "query",
            "description": "A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/grade"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "grades" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postGrade",
        "requestBody": {
          "$ref": "#/components/requestBodies/grade"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/grades/{id}": {
      "get": {
        "tags": [ "grades" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getGradesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/grade"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "grades" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putGrade",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/grade"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "grades" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteGradeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/gradebookEntries": {
      "get": {
        "tags": [ "gradebookEntries" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getGradebookEntries",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "dateAssigned",
            "in": "query",
            "description": "The date the assignment, homework, or assessment was assigned or executed.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradebookEntryTitle",
            "in": "query",
            "description": "The name or title of the activity to be recorded in the GradebookEntry.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "localCourseCode",
            "in": "query",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sectionIdentifier",
            "in": "query",
            "description": "The local identifier assigned to a section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sessionName",
            "in": "query",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodDescriptor",
            "in": "query",
            "description": "The name of the period for which grades are reported.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "periodSequence",
            "in": "query",
            "description": "The sequential order of this period relative to other periods.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "gradebookEntryTypeDescriptor",
            "in": "query",
            "description": "The type of the GradebookEntry; for example, homework, assignment, quiz, unit test, oral presentation, etc.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "A description of the assignment, homework, or classroom assessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/gradebookEntry"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "gradebookEntries" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postGradebookEntry",
        "requestBody": {
          "$ref": "#/components/requestBodies/gradebookEntry"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/gradebookEntries/{id}": {
      "get": {
        "tags": [ "gradebookEntries" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getGradebookEntriesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gradebookEntry"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "gradebookEntries" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putGradebookEntry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/gradebookEntry"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "gradebookEntries" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteGradebookEntryById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/gradingPeriods": {
      "get": {
        "tags": [ "gradingPeriods" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getGradingPeriods",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "gradingPeriodDescriptor",
            "in": "query",
            "description": "The name of the period for which grades are reported.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "periodSequence",
            "in": "query",
            "description": "The sequential order of this period relative to other periods.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the grading period school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "Month, day, and year of the first day of the GradingPeriod.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Month, day, and year of the last day of the GradingPeriod.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "totalInstructionalDays",
            "in": "query",
            "description": "Total days available for educational instruction during the GradingPeriod.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/gradingPeriod"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "gradingPeriods" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postGradingPeriod",
        "requestBody": {
          "$ref": "#/components/requestBodies/gradingPeriod"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/gradingPeriods/{id}": {
      "get": {
        "tags": [ "gradingPeriods" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getGradingPeriodsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gradingPeriod"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "gradingPeriods" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putGradingPeriod",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/gradingPeriod"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "gradingPeriods" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteGradingPeriodById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/graduationPlans": {
      "get": {
        "tags": [ "graduationPlans" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getGraduationPlans",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "graduationPlanTypeDescriptor",
            "in": "query",
            "description": "The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "graduationSchoolYear",
            "in": "query",
            "description": "The school year the student is expected to graduate.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "totalRequiredCreditTypeDescriptor",
            "in": "query",
            "description": "The type of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "individualPlan",
            "in": "query",
            "description": "An indicator of whether the GraduationPlan is tailored for an individual.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "totalRequiredCreditConversion",
            "in": "query",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "totalRequiredCredits",
            "in": "query",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/graduationPlan"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "graduationPlans" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postGraduationPlan",
        "requestBody": {
          "$ref": "#/components/requestBodies/graduationPlan"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/graduationPlans/{id}": {
      "get": {
        "tags": [ "graduationPlans" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getGraduationPlansById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/graduationPlan"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "graduationPlans" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putGraduationPlan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/graduationPlan"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "graduationPlans" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteGraduationPlanById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/interventions": {
      "get": {
        "tags": [ "interventions" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getInterventions",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "interventionIdentificationCode",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to an intervention.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "deliveryMethodDescriptor",
            "in": "query",
            "description": "The way in which an intervention was implemented: individual, small group, whole class, or whole school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "interventionClassDescriptor",
            "in": "query",
            "description": "The way in which an intervention is used: curriculum, supplement, or practice.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The start date for the intervention implementation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date for the intervention implementation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxDosage",
            "in": "query",
            "description": "The maximum duration of time in minutes that may be assigned for the intervention.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "minDosage",
            "in": "query",
            "description": "The minimum duration of time in minutes that may be assigned for the intervention.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/intervention"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "interventions" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postIntervention",
        "requestBody": {
          "$ref": "#/components/requestBodies/intervention"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/interventions/{id}": {
      "get": {
        "tags": [ "interventions" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getInterventionsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/intervention"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "interventions" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putIntervention",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/intervention"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "interventions" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteInterventionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/interventionPrescriptions": {
      "get": {
        "tags": [ "interventionPrescriptions" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getInterventionPrescriptions",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "interventionPrescriptionIdentificationCode",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to an intervention prescription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "deliveryMethodDescriptor",
            "in": "query",
            "description": "The way in which an intervention was implemented: individual, small group, whole class, or whole school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "interventionClassDescriptor",
            "in": "query",
            "description": "The way in which an intervention is used: curriculum, supplement, or practice.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxDosage",
            "in": "query",
            "description": "The maximum duration of time in minutes that is recommended for the intervention.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "minDosage",
            "in": "query",
            "description": "The minimum duration of time in minutes that is recommended for the intervention.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/interventionPrescription"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "interventionPrescriptions" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postInterventionPrescription",
        "requestBody": {
          "$ref": "#/components/requestBodies/interventionPrescription"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/interventionPrescriptions/{id}": {
      "get": {
        "tags": [ "interventionPrescriptions" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getInterventionPrescriptionsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/interventionPrescription"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "interventionPrescriptions" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putInterventionPrescription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/interventionPrescription"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "interventionPrescriptions" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteInterventionPrescriptionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/interventionStudies": {
      "get": {
        "tags": [ "interventionStudies" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getInterventionStudies",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "interventionStudyIdentificationCode",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to an intervention study.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "interventionPrescriptionEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "interventionPrescriptionIdentificationCode",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to an intervention prescription.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "deliveryMethodDescriptor",
            "in": "query",
            "description": "The way in which an intervention was implemented: individual, small group, whole class, or whole school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "interventionClassDescriptor",
            "in": "query",
            "description": "The way in which an intervention is used: curriculum, supplement, or practice.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participants",
            "in": "query",
            "description": "The number of participants observed in the study.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/interventionStudy"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "interventionStudies" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postInterventionStudy",
        "requestBody": {
          "$ref": "#/components/requestBodies/interventionStudy"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/interventionStudies/{id}": {
      "get": {
        "tags": [ "interventionStudies" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getInterventionStudiesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/interventionStudy"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "interventionStudies" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putInterventionStudy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/interventionStudy"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "interventionStudies" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteInterventionStudyById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/learningObjectives": {
      "get": {
        "tags": [ "learningObjectives" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getLearningObjectives",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "learningObjectiveId",
            "in": "query",
            "description": "The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Namespace for the LearningObjective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "parentLearningObjectiveId",
            "in": "query",
            "description": "The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "parentNamespace",
            "in": "query",
            "description": "Namespace for the LearningObjective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of the LearningObjective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nomenclature",
            "in": "query",
            "description": "Reflects the specific nomenclature used for the LearningObjective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 35,
              "type": "string"
            }
          },
          {
            "name": "objective",
            "in": "query",
            "description": "The designated title of the LearningObjective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "successCriteria",
            "in": "query",
            "description": "One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 150,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/learningObjective"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "learningObjectives" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postLearningObjective",
        "requestBody": {
          "$ref": "#/components/requestBodies/learningObjective"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/learningObjectives/{id}": {
      "get": {
        "tags": [ "learningObjectives" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getLearningObjectivesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/learningObjective"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "learningObjectives" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putLearningObjective",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/learningObjective"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "learningObjectives" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteLearningObjectiveById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/learningStandards": {
      "get": {
        "tags": [ "learningStandards" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getLearningStandards",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "learningStandardId",
            "in": "query",
            "description": "The identifier for the specific learning standard (e.g., 111.15.3.1.A).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "parentLearningStandardId",
            "in": "query",
            "description": "The identifier for the specific learning standard (e.g., 111.15.3.1.A).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "learningStandardCategoryDescriptor",
            "in": "query",
            "description": "An additional classification of the type of a specific learning standard.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "courseTitle",
            "in": "query",
            "description": "The official Course Title with which this learning standard is associated.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The text of the statement. The textual content that either describes a specific competency such as \"Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions.\" or describes a less granular group of competencies within the taxonomy of the standards document, e.g. \"Understand and apply the Pythagorean Theorem,\" or \"Geometry\".",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "learningStandardItemCode",
            "in": "query",
            "description": "A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Namespace for the LearningStandard.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "successCriteria",
            "in": "query",
            "description": "One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningStandard.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 150,
              "type": "string"
            }
          },
          {
            "name": "uri",
            "in": "query",
            "description": "An unambiguous reference to the statement using a network-resolvable URI.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/learningStandard"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "learningStandards" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postLearningStandard",
        "requestBody": {
          "$ref": "#/components/requestBodies/learningStandard"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/learningStandards/{id}": {
      "get": {
        "tags": [ "learningStandards" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getLearningStandardsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/learningStandard"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "learningStandards" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putLearningStandard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/learningStandard"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "learningStandards" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteLearningStandardById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/localEducationAgencies": {
      "get": {
        "tags": [ "localEducationAgencies" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getLocalEducationAgencies",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "localEducationAgencyId",
            "in": "query",
            "description": "The identifier assigned to a local education agency.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationServiceCenterId",
            "in": "query",
            "description": "The identifier assigned to an education service center.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parentLocalEducationAgencyId",
            "in": "query",
            "description": "The identifier assigned to a local education agency.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateEducationAgencyId",
            "in": "query",
            "description": "The identifier assigned to a state education agency.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "charterStatusDescriptor",
            "in": "query",
            "description": "A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "localEducationAgencyCategoryDescriptor",
            "in": "query",
            "description": "The category of local education agency/district. For example: Independent or Charter.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/localEducationAgency"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "localEducationAgencies" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postLocalEducationAgency",
        "requestBody": {
          "$ref": "#/components/requestBodies/localEducationAgency"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/localEducationAgencies/{id}": {
      "get": {
        "tags": [ "localEducationAgencies" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getLocalEducationAgenciesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/localEducationAgency"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "localEducationAgencies" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putLocalEducationAgency",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/localEducationAgency"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "localEducationAgencies" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteLocalEducationAgencyById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/locations": {
      "get": {
        "tags": [ "locations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getLocations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "classroomIdentificationCode",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maximumNumberOfSeats",
            "in": "query",
            "description": "The most number of seats the class can maintain.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "optimalNumberOfSeats",
            "in": "query",
            "description": "The number of seats that is most favorable to the class.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/location"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "locations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postLocation",
        "requestBody": {
          "$ref": "#/components/requestBodies/location"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/locations/{id}": {
      "get": {
        "tags": [ "locations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getLocationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/location"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "locations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putLocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/location"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "locations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteLocationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/objectiveAssessments": {
      "get": {
        "tags": [ "objectiveAssessments" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getObjectiveAssessments",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "identificationCode",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "assessmentIdentifier",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to an assessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Namespace for the Assessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "parentIdentificationCode",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of the ObjectiveAssessment (e.g., vocabulary, measurement, or geometry).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxRawScore",
            "in": "query",
            "description": "The maximum raw score achievable across all assessment items that are correct and scored at the maximum.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nomenclature",
            "in": "query",
            "description": "Reflects the specific nomenclature used for this level of ObjectiveAssessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 35,
              "type": "string"
            }
          },
          {
            "name": "percentOfAssessment",
            "in": "query",
            "description": "The percentage of the Assessment that tests this objective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/objectiveAssessment"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "objectiveAssessments" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postObjectiveAssessment",
        "requestBody": {
          "$ref": "#/components/requestBodies/objectiveAssessment"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/objectiveAssessments/{id}": {
      "get": {
        "tags": [ "objectiveAssessments" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getObjectiveAssessmentsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/objectiveAssessment"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "objectiveAssessments" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putObjectiveAssessment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/objectiveAssessment"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "objectiveAssessments" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteObjectiveAssessmentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/openStaffPositions": {
      "get": {
        "tags": [ "openStaffPositions" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getOpenStaffPositions",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "requisitionNumber",
            "in": "query",
            "description": "The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "employmentStatusDescriptor",
            "in": "query",
            "description": "Reflects the type of employment or contract desired for the position; for example:          Probationary          Contractual          Substitute/temporary          Tenured or permanent          Volunteer/no contract          ...",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "postingResultDescriptor",
            "in": "query",
            "description": "Indication of whether the OpenStaffPosition was filled or retired without filling.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "programAssignmentDescriptor",
            "in": "query",
            "description": "The name of the program for which the OpenStaffPosition will be assigned; for example:          Regular education          Title I-Academic          Title I-Non-Academic          Special Education'          Bilingual/English as a Second Language.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "staffClassificationDescriptor",
            "in": "query",
            "description": "The titles of employment, official status, or rank of education staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "datePosted",
            "in": "query",
            "description": "Date the OpenStaffPosition was posted.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "datePostingRemoved",
            "in": "query",
            "description": "The date the posting was removed or filled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "positionTitle",
            "in": "query",
            "description": "The descriptive name of an individual's position.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 100,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/openStaffPosition"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "openStaffPositions" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postOpenStaffPosition",
        "requestBody": {
          "$ref": "#/components/requestBodies/openStaffPosition"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/openStaffPositions/{id}": {
      "get": {
        "tags": [ "openStaffPositions" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getOpenStaffPositionsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/openStaffPosition"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "openStaffPositions" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putOpenStaffPosition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/openStaffPosition"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "openStaffPositions" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteOpenStaffPositionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/parents": {
      "get": {
        "tags": [ "parents" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getParents",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "parentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a parent.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sexDescriptor",
            "in": "query",
            "description": "A person's gender.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "generationCodeSuffix",
            "in": "query",
            "description": "An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastSurname",
            "in": "query",
            "description": "The name borne in common by members of a family.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "loginId",
            "in": "query",
            "description": "The login ID for the user; used for security access control interface.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "maidenName",
            "in": "query",
            "description": "The person's maiden name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "middleName",
            "in": "query",
            "description": "A secondary name given to an individual at birth, baptism, or during another naming ceremony.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "personalTitlePrefix",
            "in": "query",
            "description": "A prefix used to denote the title, degree, position, or seniority of the person.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/parent"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "parents" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postParent",
        "requestBody": {
          "$ref": "#/components/requestBodies/parent"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/parents/{id}": {
      "get": {
        "tags": [ "parents" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getParentsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/parent"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "parents" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putParent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/parent"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "parents" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteParentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/payrolls": {
      "get": {
        "tags": [ "payrolls" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getPayrolls",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "asOfDate",
            "in": "query",
            "description": "The date of the reported payroll element.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "The alphanumeric string that identifies the account.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "fiscalYear",
            "in": "query",
            "description": "The financial accounting year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "staffUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "amountToDate",
            "in": "query",
            "description": "Current balance (amount paid to employee) for account for the fiscal year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/payroll"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "payrolls" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postPayroll",
        "requestBody": {
          "$ref": "#/components/requestBodies/payroll"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/payrolls/{id}": {
      "get": {
        "tags": [ "payrolls" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getPayrollsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payroll"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "payrolls" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putPayroll",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/payroll"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "payrolls" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deletePayrollById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/postSecondaryEvents": {
      "get": {
        "tags": [ "postSecondaryEvents" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getPostSecondaryEvents",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "postSecondaryEventCategoryDescriptor",
            "in": "query",
            "description": "The PostSecondaryEvent that is logged (e.g., FAFSA application, college application, college acceptance).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "eventDate",
            "in": "query",
            "description": "The date the event occurred or was recorded.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "postSecondaryInstitutionId",
            "in": "query",
            "description": "The ID of the post secondary institution.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/postSecondaryEvent"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "postSecondaryEvents" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postPostSecondaryEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/postSecondaryEvent"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/postSecondaryEvents/{id}": {
      "get": {
        "tags": [ "postSecondaryEvents" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getPostSecondaryEventsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/postSecondaryEvent"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "postSecondaryEvents" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putPostSecondaryEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postSecondaryEvent"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "postSecondaryEvents" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deletePostSecondaryEventById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/postSecondaryInstitutions": {
      "get": {
        "tags": [ "postSecondaryInstitutions" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getPostSecondaryInstitutions",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "postSecondaryInstitutionId",
            "in": "query",
            "description": "The ID of the post secondary institution.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "administrativeFundingControlDescriptor",
            "in": "query",
            "description": "A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "postSecondaryInstitutionLevelDescriptor",
            "in": "query",
            "description": "A classification of whether a post secondary institution's highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/postSecondaryInstitution"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "postSecondaryInstitutions" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postPostSecondaryInstitution",
        "requestBody": {
          "$ref": "#/components/requestBodies/postSecondaryInstitution"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/postSecondaryInstitutions/{id}": {
      "get": {
        "tags": [ "postSecondaryInstitutions" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getPostSecondaryInstitutionsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/postSecondaryInstitution"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "postSecondaryInstitutions" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putPostSecondaryInstitution",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postSecondaryInstitution"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "postSecondaryInstitutions" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deletePostSecondaryInstitutionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/programs": {
      "get": {
        "tags": [ "programs" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getPrograms",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "programTypeDescriptor",
            "in": "query",
            "description": "The type of program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programName",
            "in": "query",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programId",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/program"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "programs" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postProgram",
        "requestBody": {
          "$ref": "#/components/requestBodies/program"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/programs/{id}": {
      "get": {
        "tags": [ "programs" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getProgramsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/program"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "programs" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putProgram",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/program"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "programs" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteProgramById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/reportCards": {
      "get": {
        "tags": [ "reportCards" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getReportCards",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodDescriptor",
            "in": "query",
            "description": "The name of the period for which grades are reported.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodSequence",
            "in": "query",
            "description": "The sequential order of this period relative to other periods.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodSchoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodSchoolYear",
            "in": "query",
            "description": "The identifier for the grading period school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gpaCumulative",
            "in": "query",
            "description": "A measure of cumulative average performance in all courses taken by an individual from the beginning of the school year through the current grading period.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "gpaGivenGradingPeriod",
            "in": "query",
            "description": "A measure of average performance in all courses taken by an individual for the current grading period.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "numberOfDaysAbsent",
            "in": "query",
            "description": "The number of days an individual is absent when school is in session during a given reporting period.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "numberOfDaysInAttendance",
            "in": "query",
            "description": "The number of days an individual is present when school is in session during a given reporting period.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "numberOfDaysTardy",
            "in": "query",
            "description": "The number of days an individual is tardy during a given reporting period.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reportCard"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "reportCards" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postReportCard",
        "requestBody": {
          "$ref": "#/components/requestBodies/reportCard"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/reportCards/{id}": {
      "get": {
        "tags": [ "reportCards" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getReportCardsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reportCard"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "reportCards" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putReportCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/reportCard"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "reportCards" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteReportCardById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/restraintEvents": {
      "get": {
        "tags": [ "restraintEvents" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getRestraintEvents",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "restraintEventIdentifier",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationalEnvironmentDescriptor",
            "in": "query",
            "description": "The setting where the RestraintEvent was exercised.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "eventDate",
            "in": "query",
            "description": "Month, day, and year of the RestraintEvent.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/restraintEvent"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "restraintEvents" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postRestraintEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/restraintEvent"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/restraintEvents/{id}": {
      "get": {
        "tags": [ "restraintEvents" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getRestraintEventsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/restraintEvent"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "restraintEvents" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putRestraintEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/restraintEvent"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "restraintEvents" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteRestraintEventById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/schools": {
      "get": {
        "tags": [ "schools" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getSchools",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "localEducationAgencyId",
            "in": "query",
            "description": "The identifier assigned to a local education agency.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "charterApprovalSchoolYear",
            "in": "query",
            "description": "The school year in which a charter school was initially approved.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "administrativeFundingControlDescriptor",
            "in": "query",
            "description": "The type of education institution as classified by its funding source, for example public or private.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "charterApprovalAgencyTypeDescriptor",
            "in": "query",
            "description": "The type of agency that approved the establishment or continuation of a charter school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "charterStatusDescriptor",
            "in": "query",
            "description": "A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "internetAccessDescriptor",
            "in": "query",
            "description": "The type of Internet access available.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "magnetSpecialProgramEmphasisSchoolDescriptor",
            "in": "query",
            "description": "A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2) to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "schoolTypeDescriptor",
            "in": "query",
            "description": "The type of education institution as classified by its primary focus.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "titleIPartASchoolDesignationDescriptor",
            "in": "query",
            "description": "Denotes the Title I Part A designation for the school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/school"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "schools" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postSchool",
        "requestBody": {
          "$ref": "#/components/requestBodies/school"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/schools/{id}": {
      "get": {
        "tags": [ "schools" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getSchoolsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/school"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "schools" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putSchool",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/school"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "schools" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteSchoolById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/schoolYearTypes": {
      "get": {
        "tags": [ "schoolYearTypes" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getSchoolYearTypes",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "Key for School Year",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "currentSchoolYear",
            "in": "query",
            "description": "The code for the current school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schoolYearDescription",
            "in": "query",
            "description": "The description for the SchoolYear type.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/schoolYearType"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "schoolYearTypes" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postSchoolYearType",
        "requestBody": {
          "$ref": "#/components/requestBodies/schoolYearType"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/schoolYearTypes/{id}": {
      "get": {
        "tags": [ "schoolYearTypes" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getSchoolYearTypesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schoolYearType"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "schoolYearTypes" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putSchoolYearType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/schoolYearType"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "schoolYearTypes" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteSchoolYearTypeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/sections": {
      "get": {
        "tags": [ "sections" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getSections",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sectionIdentifier",
            "in": "query",
            "description": "The local identifier assigned to a section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "localCourseCode",
            "in": "query",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sessionName",
            "in": "query",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "locationClassroomIdentificationCode",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "locationSchoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "availableCreditTypeDescriptor",
            "in": "query",
            "description": "The type of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "educationalEnvironmentDescriptor",
            "in": "query",
            "description": "The setting in which a child receives education and related services; for example:          Center-based instruction          Home-based instruction          Hospital class          Mainstream          Residential care and treatment facility          ...",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "instructionLanguageDescriptor",
            "in": "query",
            "description": "The primary language of instruction, if omitted English is assumed.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "mediumOfInstructionDescriptor",
            "in": "query",
            "description": "The media through which teachers provide instruction to students and students and teachers communicate about instructional matters; for example:          Technology-based instruction in classroom          Correspondence instruction          Face-to-face instruction          Virtual/On-line Distance learning          Center-based instruction          ...",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "populationServedDescriptor",
            "in": "query",
            "description": "The type of students the Section is offered and tailored to; for example:          Bilingual students          Remedial education students          Gifted and talented students          Career and Technical Education students          Special education students          ...",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "availableCreditConversion",
            "in": "query",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "availableCredits",
            "in": "query",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sequenceOfCourse",
            "in": "query",
            "description": "When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/section"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "sections" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postSection",
        "requestBody": {
          "$ref": "#/components/requestBodies/section"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/sections/{id}": {
      "get": {
        "tags": [ "sections" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getSectionsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/section"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "sections" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putSection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/section"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "sections" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteSectionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/sectionAttendanceTakenEvents": {
      "get": {
        "tags": [ "sectionAttendanceTakenEvents" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getSectionAttendanceTakenEvents",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "calendarCode",
            "in": "query",
            "description": "The identifier for the Calendar.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "date",
            "in": "query",
            "description": "The month, day, and year of the CalendarEvent.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "localCourseCode",
            "in": "query",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sectionIdentifier",
            "in": "query",
            "description": "The local identifier assigned to a section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sessionName",
            "in": "query",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "staffUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          },
          {
            "name": "eventDate",
            "in": "query",
            "description": "The date the SectionAttendanceTakenEvent was submitted, which could be a different date than the instructional day.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sectionAttendanceTakenEvent"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "sectionAttendanceTakenEvents" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postSectionAttendanceTakenEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/sectionAttendanceTakenEvent"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/sectionAttendanceTakenEvents/{id}": {
      "get": {
        "tags": [ "sectionAttendanceTakenEvents" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getSectionAttendanceTakenEventsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sectionAttendanceTakenEvent"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "sectionAttendanceTakenEvents" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putSectionAttendanceTakenEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/sectionAttendanceTakenEvent"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "sectionAttendanceTakenEvents" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteSectionAttendanceTakenEventById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/sessions": {
      "get": {
        "tags": [ "sessions" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getSessions",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "sessionName",
            "in": "query",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "termDescriptor",
            "in": "query",
            "description": "An descriptor value indicating the term (e.g. 'Fall Semester', 'Second Quarter', 'Summer Semester', etc.).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "Month, day, and year of the first day of the Session.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Month, day and year of the last day of the Session.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "totalInstructionalDays",
            "in": "query",
            "description": "The total number of instructional days in the school calendar.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/session"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "sessions" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postSession",
        "requestBody": {
          "$ref": "#/components/requestBodies/session"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/sessions/{id}": {
      "get": {
        "tags": [ "sessions" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getSessionsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/session"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "sessions" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/session"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "sessions" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteSessionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffs": {
      "get": {
        "tags": [ "staffs" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStaffs",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "staffUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "citizenshipStatusDescriptor",
            "in": "query",
            "description": "An indicator of whether or not the person is a U.S. citizen.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "highestCompletedLevelOfEducationDescriptor",
            "in": "query",
            "description": "The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "oldEthnicityDescriptor",
            "in": "query",
            "description": "Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "sexDescriptor",
            "in": "query",
            "description": "A person's gender.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "birthDate",
            "in": "query",
            "description": "The month, day, and year on which an individual was born.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "generationCodeSuffix",
            "in": "query",
            "description": "An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          },
          {
            "name": "highlyQualifiedTeacher",
            "in": "query",
            "description": "An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hispanicLatinoEthnicity",
            "in": "query",
            "description": "An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastSurname",
            "in": "query",
            "description": "The name borne in common by members of a family.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "loginId",
            "in": "query",
            "description": "The login ID for the user; used for security access control interface.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "maidenName",
            "in": "query",
            "description": "The person's maiden name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "middleName",
            "in": "query",
            "description": "A secondary name given to an individual at birth, baptism, or during another naming ceremony.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "personalTitlePrefix",
            "in": "query",
            "description": "A prefix used to denote the title, degree, position, or seniority of the person.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "yearsOfPriorProfessionalExperience",
            "in": "query",
            "description": "The total number of years that an individual has previously held a similar professional position in one or more education institutions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "yearsOfPriorTeachingExperience",
            "in": "query",
            "description": "The total number of years that an individual has previously held a teaching position in one or more education institutions.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/staff"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "staffs" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStaff",
        "requestBody": {
          "$ref": "#/components/requestBodies/staff"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffs/{id}": {
      "get": {
        "tags": [ "staffs" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStaffsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/staff"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "staffs" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStaff",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/staff"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "staffs" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStaffById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffAbsenceEvents": {
      "get": {
        "tags": [ "staffAbsenceEvents" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStaffAbsenceEvents",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "absenceEventCategoryDescriptor",
            "in": "query",
            "description": "The code describing the type of absence.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "eventDate",
            "in": "query",
            "description": "Date for this leave event.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "staffUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "absenceEventReason",
            "in": "query",
            "description": "Expanded reason for the staff absence.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 40,
              "type": "string"
            }
          },
          {
            "name": "hoursAbsent",
            "in": "query",
            "description": "The hours the staff was absent, if not the entire working day.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/staffAbsenceEvent"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "staffAbsenceEvents" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStaffAbsenceEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/staffAbsenceEvent"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffAbsenceEvents/{id}": {
      "get": {
        "tags": [ "staffAbsenceEvents" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStaffAbsenceEventsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/staffAbsenceEvent"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "staffAbsenceEvents" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStaffAbsenceEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/staffAbsenceEvent"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "staffAbsenceEvents" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStaffAbsenceEventById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffCohortAssociations": {
      "get": {
        "tags": [ "staffCohortAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStaffCohortAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "Start date for the association of staff to this cohort.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "cohortIdentifier",
            "in": "query",
            "description": "The name or ID for the Cohort.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "staffUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date for the association of staff to this cohort.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studentRecordAccess",
            "in": "query",
            "description": "Indicator of whether the staff has access to the student records of the cohort per district interpretation of FERPA and other privacy laws, regulations, and policies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/staffCohortAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "staffCohortAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStaffCohortAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/staffCohortAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffCohortAssociations/{id}": {
      "get": {
        "tags": [ "staffCohortAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStaffCohortAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/staffCohortAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "staffCohortAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStaffCohortAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/staffCohortAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "staffCohortAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStaffCohortAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffEducationOrganizationAssignmentAssociations": {
      "get": {
        "tags": [ "staffEducationOrganizationAssignmentAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStaffEducationOrganizationAssignmentAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "staffClassificationDescriptor",
            "in": "query",
            "description": "The titles of employment, official status, or rank of education staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "Month, day, and year of the start or effective date of a staff member's employment, contract, or relationship with the LEA.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "staffUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "credentialIdentifier",
            "in": "query",
            "description": "Identifier or serial number assigned to the credential.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "stateOfIssueStateAbbreviationDescriptor",
            "in": "query",
            "description": "The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "employmentEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employmentStatusDescriptor",
            "in": "query",
            "description": "Reflects the type of employment or contract; for example:          Probationary          Contractual          Substitute/temporary          Tenured or permanent          Volunteer/no contract          ...",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "employmentHireDate",
            "in": "query",
            "description": "The month, day, and year on which an individual was hired for a position.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Month, day, and year of the end or termination date of a staff member's employment, contract, or relationship with the LEA.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderOfAssignment",
            "in": "query",
            "description": "Describes whether the assignment is this the staff member's primary assignment, secondary assignment, etc.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "positionTitle",
            "in": "query",
            "description": "The descriptive name of an individual's position.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 100,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/staffEducationOrganizationAssignmentAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "staffEducationOrganizationAssignmentAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStaffEducationOrganizationAssignmentAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/staffEducationOrganizationAssignmentAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffEducationOrganizationAssignmentAssociations/{id}": {
      "get": {
        "tags": [ "staffEducationOrganizationAssignmentAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStaffEducationOrganizationAssignmentAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/staffEducationOrganizationAssignmentAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "staffEducationOrganizationAssignmentAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStaffEducationOrganizationAssignmentAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/staffEducationOrganizationAssignmentAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "staffEducationOrganizationAssignmentAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStaffEducationOrganizationAssignmentAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffEducationOrganizationContactAssociations": {
      "get": {
        "tags": [ "staffEducationOrganizationContactAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStaffEducationOrganizationContactAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "contactTitle",
            "in": "query",
            "description": "The title of the contact in the context of the EducationOrganization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "staffUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "contactTypeDescriptor",
            "in": "query",
            "description": "Indicates the type for the contact information.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "electronicMailAddress",
            "in": "query",
            "description": "The email for the contact associated with the EducationOrganization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/staffEducationOrganizationContactAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "staffEducationOrganizationContactAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStaffEducationOrganizationContactAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/staffEducationOrganizationContactAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffEducationOrganizationContactAssociations/{id}": {
      "get": {
        "tags": [ "staffEducationOrganizationContactAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStaffEducationOrganizationContactAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/staffEducationOrganizationContactAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "staffEducationOrganizationContactAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStaffEducationOrganizationContactAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/staffEducationOrganizationContactAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "staffEducationOrganizationContactAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStaffEducationOrganizationContactAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffEducationOrganizationEmploymentAssociations": {
      "get": {
        "tags": [ "staffEducationOrganizationEmploymentAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStaffEducationOrganizationEmploymentAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "employmentStatusDescriptor",
            "in": "query",
            "description": "Reflects the type of employment or contract; for example:          Probationary          Contractual          Substitute/temporary          Tenured or permanent          Volunteer/no contract          ...",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "hireDate",
            "in": "query",
            "description": "The month, day, and year on which an individual was hired for a position.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "staffUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "credentialIdentifier",
            "in": "query",
            "description": "Identifier or serial number assigned to the credential.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "stateOfIssueStateAbbreviationDescriptor",
            "in": "query",
            "description": "The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "separationDescriptor",
            "in": "query",
            "description": "Type of employment separation; for example: Voluntary separation, Involuntary separation,          Mutual agreement          Other, etc.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "separationReasonDescriptor",
            "in": "query",
            "description": "Reason for terminating the employment; for example:          Employment in education          Employment outside of education          Retirement          Family/personal relocation          Change of assignment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "department",
            "in": "query",
            "description": "The department or suborganization the employee/contractor is associated with in the EducationOrganization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 3,
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "fullTimeEquivalency",
            "in": "query",
            "description": "The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "hourlyWage",
            "in": "query",
            "description": "Hourly wage associated with the employment position being reported.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offerDate",
            "in": "query",
            "description": "Date at which the staff member was made an official offer for this employment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/staffEducationOrganizationEmploymentAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "staffEducationOrganizationEmploymentAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStaffEducationOrganizationEmploymentAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/staffEducationOrganizationEmploymentAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffEducationOrganizationEmploymentAssociations/{id}": {
      "get": {
        "tags": [ "staffEducationOrganizationEmploymentAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStaffEducationOrganizationEmploymentAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/staffEducationOrganizationEmploymentAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "staffEducationOrganizationEmploymentAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStaffEducationOrganizationEmploymentAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/staffEducationOrganizationEmploymentAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "staffEducationOrganizationEmploymentAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStaffEducationOrganizationEmploymentAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffLeaves": {
      "get": {
        "tags": [ "staffLeaves" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStaffLeaves",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "staffLeaveEventCategoryDescriptor",
            "in": "query",
            "description": "The code describing the type of leave taken, for example:          Sick          Personal          Vacation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The begin date of the staff leave.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "staffUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date of the staff leave.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "Expanded reason for the staff leave.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 40,
              "type": "string"
            }
          },
          {
            "name": "substituteAssigned",
            "in": "query",
            "description": "Indicator of whether a substitute was assigned during the period of staff leave.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/staffLeave"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "staffLeaves" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStaffLeave",
        "requestBody": {
          "$ref": "#/components/requestBodies/staffLeave"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffLeaves/{id}": {
      "get": {
        "tags": [ "staffLeaves" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStaffLeavesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/staffLeave"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "staffLeaves" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStaffLeave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/staffLeave"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "staffLeaves" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStaffLeaveById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffProgramAssociations": {
      "get": {
        "tags": [ "staffProgramAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStaffProgramAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "Start date for the association of staff to this program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programName",
            "in": "query",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programTypeDescriptor",
            "in": "query",
            "description": "The type of program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "staffUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date for the association of staff to this program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studentRecordAccess",
            "in": "query",
            "description": "Indicator of whether the staff has access to the student records of the program per district interpretation of FERPA and other privacy laws, regulations, and policies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/staffProgramAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "staffProgramAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStaffProgramAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/staffProgramAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffProgramAssociations/{id}": {
      "get": {
        "tags": [ "staffProgramAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStaffProgramAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/staffProgramAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "staffProgramAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStaffProgramAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/staffProgramAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "staffProgramAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStaffProgramAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffSchoolAssociations": {
      "get": {
        "tags": [ "staffSchoolAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStaffSchoolAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "programAssignmentDescriptor",
            "in": "query",
            "description": "The name of the program for which the individual is assigned; for example:          Regular education          Title I-Academic          Title I-Non-Academic          Special Education          Bilingual/English as a Second Language.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "staffUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "calendarCode",
            "in": "query",
            "description": "The identifier for the Calendar.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "Identifier for a school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/staffSchoolAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "staffSchoolAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStaffSchoolAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/staffSchoolAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffSchoolAssociations/{id}": {
      "get": {
        "tags": [ "staffSchoolAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStaffSchoolAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/staffSchoolAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "staffSchoolAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStaffSchoolAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/staffSchoolAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "staffSchoolAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStaffSchoolAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffSectionAssociations": {
      "get": {
        "tags": [ "staffSectionAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStaffSectionAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "localCourseCode",
            "in": "query",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sectionIdentifier",
            "in": "query",
            "description": "The local identifier assigned to a section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sessionName",
            "in": "query",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "staffUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a staff.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "classroomPositionDescriptor",
            "in": "query",
            "description": "The type of position the Staff member holds in the specific class/section; for example:          Teacher of Record, Assistant Teacher, Support Teacher, Substitute Teacher...",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "Month, day, and year of a teacher's assignment to the Section. If blank, defaults to the first day of the first grading period for the Section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Month, day, and year of the last day of a staff member's assignment to the Section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "highlyQualifiedTeacher",
            "in": "query",
            "description": "An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "percentageContribution",
            "in": "query",
            "description": "Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "teacherStudentDataLinkExclusion",
            "in": "query",
            "description": "Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/staffSectionAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "staffSectionAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStaffSectionAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/staffSectionAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/staffSectionAssociations/{id}": {
      "get": {
        "tags": [ "staffSectionAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStaffSectionAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/staffSectionAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "staffSectionAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStaffSectionAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/staffSectionAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "staffSectionAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStaffSectionAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/stateEducationAgencies": {
      "get": {
        "tags": [ "stateEducationAgencies" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStateEducationAgencies",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "stateEducationAgencyId",
            "in": "query",
            "description": "The identifier assigned to a state education agency.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/stateEducationAgency"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "stateEducationAgencies" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStateEducationAgency",
        "requestBody": {
          "$ref": "#/components/requestBodies/stateEducationAgency"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/stateEducationAgencies/{id}": {
      "get": {
        "tags": [ "stateEducationAgencies" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStateEducationAgenciesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stateEducationAgency"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "stateEducationAgencies" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStateEducationAgency",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/stateEducationAgency"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "stateEducationAgencies" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStateEducationAgencyById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/students": {
      "get": {
        "tags": [ "students" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudents",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "citizenshipStatusDescriptor",
            "in": "query",
            "description": "An indicator of whether or not the person is a U.S. citizen.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "birthCountryDescriptor",
            "in": "query",
            "description": "The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "birthSexDescriptor",
            "in": "query",
            "description": "A person's gender at birth.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "birthStateAbbreviationDescriptor",
            "in": "query",
            "description": "The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "birthCity",
            "in": "query",
            "description": "The city the student was born in.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          },
          {
            "name": "birthDate",
            "in": "query",
            "description": "The month, day, and year on which an individual was born.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "birthInternationalProvince",
            "in": "query",
            "description": "For students born outside of the U.S., the Province or jurisdiction in which an individual is born.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 150,
              "type": "string"
            }
          },
          {
            "name": "dateEnteredUS",
            "in": "query",
            "description": "For students born outside of the U.S., the date the student entered the U.S.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "generationCodeSuffix",
            "in": "query",
            "description": "An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastSurname",
            "in": "query",
            "description": "The name borne in common by members of a family.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "maidenName",
            "in": "query",
            "description": "The person's maiden name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "middleName",
            "in": "query",
            "description": "A secondary name given to an individual at birth, baptism, or during another naming ceremony.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 75,
              "type": "string"
            }
          },
          {
            "name": "multipleBirthStatus",
            "in": "query",
            "description": "Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "personalTitlePrefix",
            "in": "query",
            "description": "A prefix used to denote the title, degree, position, or seniority of the person.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 30,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/student"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "students" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudent",
        "requestBody": {
          "$ref": "#/components/requestBodies/student"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/students/{id}": {
      "get": {
        "tags": [ "students" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/student"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "students" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/student"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "students" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentAcademicRecords": {
      "get": {
        "tags": [ "studentAcademicRecords" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentAcademicRecords",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "termDescriptor",
            "in": "query",
            "description": "The term for the session during the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "cumulativeEarnedCreditTypeDescriptor",
            "in": "query",
            "description": "The type of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "cumulativeAttemptedCreditTypeDescriptor",
            "in": "query",
            "description": "The type of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "sessionEarnedCreditTypeDescriptor",
            "in": "query",
            "description": "The type of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "sessionAttemptedCreditTypeDescriptor",
            "in": "query",
            "description": "The type of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "cumulativeAttemptedCreditConversion",
            "in": "query",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "cumulativeAttemptedCredits",
            "in": "query",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "cumulativeEarnedCreditConversion",
            "in": "query",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "cumulativeEarnedCredits",
            "in": "query",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "cumulativeGradePointAverage",
            "in": "query",
            "description": "A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "cumulativeGradePointsEarned",
            "in": "query",
            "description": "The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "gradeValueQualifier",
            "in": "query",
            "description": "The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student's Grade Point Average (A=4, B=3, C=2, D=1 in a four-point system) or letter equivalents for percentage grades (90-100%=A, 80-90%=B, etc.)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 80,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectedGraduationDate",
            "in": "query",
            "description": "The month and year the student is projected to graduate.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "sessionAttemptedCreditConversion",
            "in": "query",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "sessionAttemptedCredits",
            "in": "query",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "sessionEarnedCreditConversion",
            "in": "query",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "sessionEarnedCredits",
            "in": "query",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "sessionGradePointAverage",
            "in": "query",
            "description": "The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "sessionGradePointsEarned",
            "in": "query",
            "description": "The number of grade points an individual earned for this session.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentAcademicRecord"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentAcademicRecords" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentAcademicRecord",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentAcademicRecord"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentAcademicRecords/{id}": {
      "get": {
        "tags": [ "studentAcademicRecords" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentAcademicRecordsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentAcademicRecord"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentAcademicRecords" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentAcademicRecord",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentAcademicRecord"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentAcademicRecords" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentAcademicRecordById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentAssessments": {
      "get": {
        "tags": [ "studentAssessments" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentAssessments",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "studentAssessmentIdentifier",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to an assessment administered to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "assessmentIdentifier",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to an assessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Namespace for the Assessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The school year for which the assessment was administered to a student. Among other uses, handles cases in which a student takes a prior-year exam in a subsequent school year during an exam re-test.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "administrationEnvironmentDescriptor",
            "in": "query",
            "description": "The environment in which the test was administered. For example:          Electronic          Classroom          Testing Center          ...",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "eventCircumstanceDescriptor",
            "in": "query",
            "description": "An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "whenAssessedGradeLevelDescriptor",
            "in": "query",
            "description": "The grade level of a student when assessed.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "administrationLanguageDescriptor",
            "in": "query",
            "description": "The language in which an assessment is written and/or administered.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "reasonNotTestedDescriptor",
            "in": "query",
            "description": "The primary reason student is not tested. For example:          Absent          Refusal by parent          Refusal by student          Medical waiver          Illness          Disruptive behavior          LEP Exempt          ...",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "retestIndicatorDescriptor",
            "in": "query",
            "description": "Indicator if the test was retaken. For example:          Primary administration          First retest          Second retest          ...",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "administrationDate",
            "in": "query",
            "description": "The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "administrationEndDate",
            "in": "query",
            "description": "The date and time an assessment administration ended.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "eventDescription",
            "in": "query",
            "description": "Describes special events that occur before during or after the assessment session that may impact use of results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serialNumber",
            "in": "query",
            "description": "The unique number for the assessment form or answer document.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentAssessment"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentAssessments" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentAssessment",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentAssessment"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentAssessments/{id}": {
      "get": {
        "tags": [ "studentAssessments" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentAssessmentsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentAssessment"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentAssessments" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentAssessment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentAssessment"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentAssessments" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentAssessmentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentCohortAssociations": {
      "get": {
        "tags": [ "studentCohortAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentCohortAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The month, day, and year on which the Student was first identified as part of the Cohort.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "cohortIdentifier",
            "in": "query",
            "description": "The name or ID for the Cohort.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The month, day, and year on which the Student was removed as part of the Cohort.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentCohortAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentCohortAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentCohortAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentCohortAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentCohortAssociations/{id}": {
      "get": {
        "tags": [ "studentCohortAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentCohortAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentCohortAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentCohortAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentCohortAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentCohortAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentCohortAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentCohortAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentCompetencyObjectives": {
      "get": {
        "tags": [ "studentCompetencyObjectives" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentCompetencyObjectives",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "objectiveEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "objective",
            "in": "query",
            "description": "The designated title of the CompetencyObjective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "objectiveGradeLevelDescriptor",
            "in": "query",
            "description": "The grade level for which the CompetencyObjective is targeted.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodDescriptor",
            "in": "query",
            "description": "The name of the period for which grades are reported.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodSequence",
            "in": "query",
            "description": "The sequential order of this period relative to other periods.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodSchoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodSchoolYear",
            "in": "query",
            "description": "The identifier for the grading period school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "competencyLevelDescriptor",
            "in": "query",
            "description": "The CompetencyLevel assessed for the student for the referenced LearningObjective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "diagnosticStatement",
            "in": "query",
            "description": "A statement provided by the teacher that provides information in addition to the grade or assessment score.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentCompetencyObjective"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentCompetencyObjectives" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentCompetencyObjective",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentCompetencyObjective"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentCompetencyObjectives/{id}": {
      "get": {
        "tags": [ "studentCompetencyObjectives" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentCompetencyObjectivesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentCompetencyObjective"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentCompetencyObjectives" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentCompetencyObjective",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentCompetencyObjective"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentCompetencyObjectives" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentCompetencyObjectiveById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentCTEProgramAssociations": {
      "get": {
        "tags": [ "studentCTEProgramAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentCTEProgramAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The month, day, and year on which the Student first received services.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programName",
            "in": "query",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programTypeDescriptor",
            "in": "query",
            "description": "The type of program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "technicalSkillsAssessmentDescriptor",
            "in": "query",
            "description": "Results of technical skills assessment aligned with industry recognized standards.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "nonTraditionalGenderStatus",
            "in": "query",
            "description": "Indicator that student is from a gender group that comprises less than 25% of the individuals employed in an occupation or field of work.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "privateCTEProgram",
            "in": "query",
            "description": "Indicator that student participated in career and technical education at private agencies or institutions that are reported by the state for purposes of the Elementary and Secondary Education Act (ESEA).  Students in private institutions which do not receive Perkins funding are reported only in the state file.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentCTEProgramAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentCTEProgramAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentCTEProgramAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentCTEProgramAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentCTEProgramAssociations/{id}": {
      "get": {
        "tags": [ "studentCTEProgramAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentCTEProgramAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentCTEProgramAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentCTEProgramAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentCTEProgramAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentCTEProgramAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentCTEProgramAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentCTEProgramAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentDisciplineIncidentAssociations": {
      "get": {
        "tags": [ "studentDisciplineIncidentAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentDisciplineIncidentAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "incidentIdentifier",
            "in": "query",
            "description": "A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentParticipationCodeDescriptor",
            "in": "query",
            "description": "The role or type of participation of a student in a discipline incident;           for example:          Victim          Perpetrator          Witness          Reporter.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentDisciplineIncidentAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentDisciplineIncidentAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentDisciplineIncidentAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentDisciplineIncidentAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentDisciplineIncidentAssociations/{id}": {
      "get": {
        "tags": [ "studentDisciplineIncidentAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentDisciplineIncidentAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentDisciplineIncidentAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentDisciplineIncidentAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentDisciplineIncidentAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentDisciplineIncidentAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentDisciplineIncidentAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentDisciplineIncidentAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentEducationOrganizationAssociations": {
      "get": {
        "tags": [ "studentEducationOrganizationAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentEducationOrganizationAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "limitedEnglishProficiencyDescriptor",
            "in": "query",
            "description": "An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "oldEthnicityDescriptor",
            "in": "query",
            "description": "Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "sexDescriptor",
            "in": "query",
            "description": "A person's gender.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "hispanicLatinoEthnicity",
            "in": "query",
            "description": "An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loginId",
            "in": "query",
            "description": "The login ID for the user; used for security access control interface.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "profileThumbnail",
            "in": "query",
            "description": "Locator reference for the student photo. The specification for that reference is left to local definition.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentEducationOrganizationAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentEducationOrganizationAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentEducationOrganizationAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentEducationOrganizationAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentEducationOrganizationAssociations/{id}": {
      "get": {
        "tags": [ "studentEducationOrganizationAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentEducationOrganizationAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentEducationOrganizationAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentEducationOrganizationAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentEducationOrganizationAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentEducationOrganizationAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentEducationOrganizationAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentEducationOrganizationAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentEducationOrganizationResponsibilityAssociations": {
      "get": {
        "tags": [ "studentEducationOrganizationResponsibilityAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentEducationOrganizationResponsibilityAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responsibilityDescriptor",
            "in": "query",
            "description": "Indications of an education organization's responsibility for a student, such as accountability, attendance, funding, etc.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "Month, day, and year of the start date of an education organization's responsibility for a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Month, day, and year of the end date of an education organization's responsibility for a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentEducationOrganizationResponsibilityAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentEducationOrganizationResponsibilityAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentEducationOrganizationResponsibilityAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentEducationOrganizationResponsibilityAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentEducationOrganizationResponsibilityAssociations/{id}": {
      "get": {
        "tags": [ "studentEducationOrganizationResponsibilityAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentEducationOrganizationResponsibilityAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentEducationOrganizationResponsibilityAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentEducationOrganizationResponsibilityAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentEducationOrganizationResponsibilityAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentEducationOrganizationResponsibilityAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentEducationOrganizationResponsibilityAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentEducationOrganizationResponsibilityAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentGradebookEntries": {
      "get": {
        "tags": [ "studentGradebookEntries" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentGradebookEntries",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "dateAssigned",
            "in": "query",
            "description": "The date the assignment, homework, or assessment was assigned or executed.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradebookEntryTitle",
            "in": "query",
            "description": "The name or title of the activity to be recorded in the GradebookEntry.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "localCourseCode",
            "in": "query",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sectionIdentifier",
            "in": "query",
            "description": "The local identifier assigned to a section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sessionName",
            "in": "query",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "Month, day, and year of the Student's entry or assignment to the Section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "competencyLevelDescriptor",
            "in": "query",
            "description": "The CompetencyLevel assessed for the student for the referenced LearningObjective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "dateFulfilled",
            "in": "query",
            "description": "The date an assignment was turned in or the date of an assessment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "diagnosticStatement",
            "in": "query",
            "description": "A statement provided by the teacher that provides information in addition to the grade or assessment score.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "letterGradeEarned",
            "in": "query",
            "description": "A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          },
          {
            "name": "numericGradeEarned",
            "in": "query",
            "description": "A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentGradebookEntry"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentGradebookEntries" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentGradebookEntry",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentGradebookEntry"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentGradebookEntries/{id}": {
      "get": {
        "tags": [ "studentGradebookEntries" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentGradebookEntriesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentGradebookEntry"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentGradebookEntries" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentGradebookEntry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentGradebookEntry"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentGradebookEntries" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentGradebookEntryById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentHomelessProgramAssociations": {
      "get": {
        "tags": [ "studentHomelessProgramAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentHomelessProgramAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The month, day, and year on which the Student first received services.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programName",
            "in": "query",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programTypeDescriptor",
            "in": "query",
            "description": "The type of program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "homelessPrimaryNighttimeResidenceDescriptor",
            "in": "query",
            "description": "The primary nighttime residence of the student at the time the student is identified as homeless.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "awaitingFosterCare",
            "in": "query",
            "description": "State defined definition for awaiting foster care.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "homelessUnaccompaniedYouth",
            "in": "query",
            "description": "A homeless unaccompanied youth is a youth who is not in the physical custody of a parent or guardian and who fits the McKinney-Vento definition of homeless. Students must be both unaccompanied and homeless to be included as an unaccompanied homeless youth.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentHomelessProgramAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentHomelessProgramAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentHomelessProgramAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentHomelessProgramAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentHomelessProgramAssociations/{id}": {
      "get": {
        "tags": [ "studentHomelessProgramAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentHomelessProgramAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentHomelessProgramAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentHomelessProgramAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentHomelessProgramAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentHomelessProgramAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentHomelessProgramAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentHomelessProgramAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentInterventionAssociations": {
      "get": {
        "tags": [ "studentInterventionAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentInterventionAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "interventionIdentificationCode",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to an intervention.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "cohortIdentifier",
            "in": "query",
            "description": "The name or ID for the Cohort.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          },
          {
            "name": "cohortEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "diagnosticStatement",
            "in": "query",
            "description": "A statement provided by the assigner that provides information regarding why the student was assigned to this intervention.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "dosage",
            "in": "query",
            "description": "The duration of time in minutes for which the student was assigned to participate in the intervention.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentInterventionAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentInterventionAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentInterventionAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentInterventionAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentInterventionAssociations/{id}": {
      "get": {
        "tags": [ "studentInterventionAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentInterventionAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentInterventionAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentInterventionAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentInterventionAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentInterventionAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentInterventionAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentInterventionAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentInterventionAttendanceEvents": {
      "get": {
        "tags": [ "studentInterventionAttendanceEvents" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentInterventionAttendanceEvents",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "attendanceEventCategoryDescriptor",
            "in": "query",
            "description": "A code describing the attendance event, for example:          Present          Unexcused absence          Excused absence          Tardy.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "eventDate",
            "in": "query",
            "description": "Date for this attendance event.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "interventionIdentificationCode",
            "in": "query",
            "description": "A unique number or alphanumeric code assigned to an intervention.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationalEnvironmentDescriptor",
            "in": "query",
            "description": "The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "attendanceEventReason",
            "in": "query",
            "description": "The reported reason for a student's absence.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 40,
              "type": "string"
            }
          },
          {
            "name": "eventDuration",
            "in": "query",
            "description": "The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interventionDuration",
            "in": "query",
            "description": "The duration in minutes in which the student participated in the intervention during this instance.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentInterventionAttendanceEvent"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentInterventionAttendanceEvents" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentInterventionAttendanceEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentInterventionAttendanceEvent"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentInterventionAttendanceEvents/{id}": {
      "get": {
        "tags": [ "studentInterventionAttendanceEvents" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentInterventionAttendanceEventsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentInterventionAttendanceEvent"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentInterventionAttendanceEvents" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentInterventionAttendanceEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentInterventionAttendanceEvent"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentInterventionAttendanceEvents" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentInterventionAttendanceEventById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentLanguageInstructionProgramAssociations": {
      "get": {
        "tags": [ "studentLanguageInstructionProgramAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentLanguageInstructionProgramAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The month, day, and year on which the Student first received services.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programName",
            "in": "query",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programTypeDescriptor",
            "in": "query",
            "description": "The type of program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "englishLearnerParticipation",
            "in": "query",
            "description": "An indication that an English Learner student is served by an English language instruction educational program supported with Title III of ESEA funds.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentLanguageInstructionProgramAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentLanguageInstructionProgramAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentLanguageInstructionProgramAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentLanguageInstructionProgramAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentLanguageInstructionProgramAssociations/{id}": {
      "get": {
        "tags": [ "studentLanguageInstructionProgramAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentLanguageInstructionProgramAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentLanguageInstructionProgramAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentLanguageInstructionProgramAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentLanguageInstructionProgramAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentLanguageInstructionProgramAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentLanguageInstructionProgramAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentLanguageInstructionProgramAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentLearningObjectives": {
      "get": {
        "tags": [ "studentLearningObjectives" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentLearningObjectives",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "gradingPeriodDescriptor",
            "in": "query",
            "description": "The name of the period for which grades are reported.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodSequence",
            "in": "query",
            "description": "The sequential order of this period relative to other periods.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodSchoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "gradingPeriodSchoolYear",
            "in": "query",
            "description": "The identifier for the grading period school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "learningObjectiveId",
            "in": "query",
            "description": "The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Namespace for the LearningObjective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "competencyLevelDescriptor",
            "in": "query",
            "description": "The CompetencyLevel assessed for the student for the referenced LearningObjective.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "diagnosticStatement",
            "in": "query",
            "description": "A statement provided by the teacher that provides information in addition to the grade or assessment score.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentLearningObjective"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentLearningObjectives" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentLearningObjective",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentLearningObjective"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentLearningObjectives/{id}": {
      "get": {
        "tags": [ "studentLearningObjectives" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentLearningObjectivesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentLearningObjective"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentLearningObjectives" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentLearningObjective",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentLearningObjective"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentLearningObjectives" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentLearningObjectiveById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentMigrantEducationProgramAssociations": {
      "get": {
        "tags": [ "studentMigrantEducationProgramAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentMigrantEducationProgramAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The month, day, and year on which the Student first received services.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programName",
            "in": "query",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programTypeDescriptor",
            "in": "query",
            "description": "The type of program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "continuationOfServicesReasonDescriptor",
            "in": "query",
            "description": "The \"continuation of services\" provision found in Section 1304(e) of the statute provides that (1) a child who ceases to be a migratory child during a school term shall be eligible for services until the end of such term; (2) a child who is no longer a migratory child may continue to receive services for one additional school year, but only if comparable services are not available through other programs; and (3) secondary school students who were eligible for services in secondary school may continue to be served through credit accrual programs until graduation. Only students who received services at any time during their 36 month eligibility period may continue to receive services (not necessarily the same service).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "eligibilityExpirationDate",
            "in": "query",
            "description": "The Eligibility Expiration Date is used to determine end of eligibility and to account for a child's eligibility expiring earlier than 36 months from the child's QAD. A child's eligibility would end earlier than 36 months from the child's QAD, if the child is no longer entitled to a free public education (e.g., graduated with a high school diploma, obtained a high school equivalency diploma (HSED), or for other reasons as determined by States' requirements), or if the child passes away.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "lastQualifyingMove",
            "in": "query",
            "description": "Date the last qualifying move occurred; used to compute MEP status.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "priorityForServices",
            "in": "query",
            "description": "Report migratory children who are classified as having \"priority for services\" because they are failing, or most at risk of failing to meet the State's challenging State academic content standards and challenging State student academic achievement standards, and their education has been interrupted during the regular school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "qualifyingArrivalDate",
            "in": "query",
            "description": "The Qualifying Arrival Date (QAD) is the date the child joins the worker who has already moved, or the date when the worker joins the child who has already moved. The QAD is the date that the child's eligibility for the MEP begins. The QAD is not affected by subsequent non-qualifying moves.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "stateResidencyDate",
            "in": "query",
            "description": "The verified State residency for the student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "usInitialEntry",
            "in": "query",
            "description": "The month, day, and year on which the Student first entered the U.S.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "usInitialSchoolEntry",
            "in": "query",
            "description": "The month, day, and year on which the Student first entered a U.S. school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "usMostRecentEntry",
            "in": "query",
            "description": "The month, day, and year of the Student's most recent entry into the U.S.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentMigrantEducationProgramAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentMigrantEducationProgramAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentMigrantEducationProgramAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentMigrantEducationProgramAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentMigrantEducationProgramAssociations/{id}": {
      "get": {
        "tags": [ "studentMigrantEducationProgramAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentMigrantEducationProgramAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentMigrantEducationProgramAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentMigrantEducationProgramAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentMigrantEducationProgramAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentMigrantEducationProgramAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentMigrantEducationProgramAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentMigrantEducationProgramAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentNeglectedOrDelinquentProgramAssociations": {
      "get": {
        "tags": [ "studentNeglectedOrDelinquentProgramAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentNeglectedOrDelinquentProgramAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The month, day, and year on which the Student first received services.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programName",
            "in": "query",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programTypeDescriptor",
            "in": "query",
            "description": "The type of program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "neglectedOrDelinquentProgramDescriptor",
            "in": "query",
            "description": "The type of program under ESEA Title I, Part D, Subpart 1 (state programs) or Subpart 2 (LEA).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "elaProgressLevelDescriptor",
            "in": "query",
            "description": "The progress measured from pre- to post- test for ELA.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "mathematicsProgressLevelDescriptor",
            "in": "query",
            "description": "The progress measured from pre- to post-test for Mathematics.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentNeglectedOrDelinquentProgramAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentNeglectedOrDelinquentProgramAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentNeglectedOrDelinquentProgramAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentNeglectedOrDelinquentProgramAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentNeglectedOrDelinquentProgramAssociations/{id}": {
      "get": {
        "tags": [ "studentNeglectedOrDelinquentProgramAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentNeglectedOrDelinquentProgramAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentNeglectedOrDelinquentProgramAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentNeglectedOrDelinquentProgramAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentNeglectedOrDelinquentProgramAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentNeglectedOrDelinquentProgramAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentNeglectedOrDelinquentProgramAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentNeglectedOrDelinquentProgramAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentParentAssociations": {
      "get": {
        "tags": [ "studentParentAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentParentAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "parentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a parent.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "relationDescriptor",
            "in": "query",
            "description": "The nature of an individual's relationship to a student; for example:          Father, Mother, Step Father, Step Mother, Foster Father, Foster Mother, Guardian, etc.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "contactPriority",
            "in": "query",
            "description": "The numeric order of the preferred sequence or priority of contact.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactRestrictions",
            "in": "query",
            "description": "Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 250,
              "type": "string"
            }
          },
          {
            "name": "emergencyContactStatus",
            "in": "query",
            "description": "Indicator of whether the person is a designated emergency contact for the Student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "livesWith",
            "in": "query",
            "description": "Indicator of whether the Student lives with the associated parent.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "primaryContactStatus",
            "in": "query",
            "description": "Indicator of whether the person is a primary parental contact for the Student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentParentAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentParentAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentParentAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentParentAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentParentAssociations/{id}": {
      "get": {
        "tags": [ "studentParentAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentParentAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentParentAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentParentAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentParentAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentParentAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentParentAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentParentAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentProgramAssociations": {
      "get": {
        "tags": [ "studentProgramAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentProgramAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The month, day, and year on which the Student first received services.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programName",
            "in": "query",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programTypeDescriptor",
            "in": "query",
            "description": "The type of program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentProgramAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentProgramAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentProgramAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentProgramAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentProgramAssociations/{id}": {
      "get": {
        "tags": [ "studentProgramAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentProgramAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentProgramAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentProgramAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentProgramAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentProgramAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentProgramAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentProgramAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentProgramAttendanceEvents": {
      "get": {
        "tags": [ "studentProgramAttendanceEvents" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentProgramAttendanceEvents",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "attendanceEventCategoryDescriptor",
            "in": "query",
            "description": "A code describing the attendance event, for example:          Present          Unexcused absence          Excused absence          Tardy.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "eventDate",
            "in": "query",
            "description": "Date for this attendance event.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programName",
            "in": "query",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programTypeDescriptor",
            "in": "query",
            "description": "The type of program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationalEnvironmentDescriptor",
            "in": "query",
            "description": "The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "attendanceEventReason",
            "in": "query",
            "description": "The reported reason for a student's absence.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 40,
              "type": "string"
            }
          },
          {
            "name": "eventDuration",
            "in": "query",
            "description": "The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentProgramAttendanceEvent"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentProgramAttendanceEvents" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentProgramAttendanceEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentProgramAttendanceEvent"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentProgramAttendanceEvents/{id}": {
      "get": {
        "tags": [ "studentProgramAttendanceEvents" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentProgramAttendanceEventsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentProgramAttendanceEvent"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentProgramAttendanceEvents" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentProgramAttendanceEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentProgramAttendanceEvent"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentProgramAttendanceEvents" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentProgramAttendanceEventById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentSchoolAssociations": {
      "get": {
        "tags": [ "studentSchoolAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentSchoolAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "entryDate",
            "in": "query",
            "description": "The month, day, and year on which an individual enters and begins to receive instructional services in a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "calendarCode",
            "in": "query",
            "description": "The identifier for the Calendar.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            }
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The school year associated with the student's enrollment.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "graduationPlanTypeDescriptor",
            "in": "query",
            "description": "The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "graduationSchoolYear",
            "in": "query",
            "description": "The school year the student is expected to graduate.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "classOfSchoolYear",
            "in": "query",
            "description": "Projected High School graduation year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entryGradeLevelReasonDescriptor",
            "in": "query",
            "description": "The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "entryTypeDescriptor",
            "in": "query",
            "description": "The process by which a student enters a school during a given academic session.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "exitWithdrawTypeDescriptor",
            "in": "query",
            "description": "The circumstances under which the student exited from membership in an educational institution.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "entryGradeLevelDescriptor",
            "in": "query",
            "description": "The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "residencyStatusDescriptor",
            "in": "query",
            "description": "An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "employedWhileEnrolled",
            "in": "query",
            "description": "An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exitWithdrawDate",
            "in": "query",
            "description": "The month, day, and year of the first day after the date of an individual's last attendance at a school (if known), the day on which an individual graduated, or the date on which it becomes known officially that an individual left school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "primarySchool",
            "in": "query",
            "description": "Indicates if a given enrollment record should be considered the primary record for a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "repeatGradeIndicator",
            "in": "query",
            "description": "An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "schoolChoiceTransfer",
            "in": "query",
            "description": "An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentSchoolAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentSchoolAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentSchoolAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentSchoolAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentSchoolAssociations/{id}": {
      "get": {
        "tags": [ "studentSchoolAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentSchoolAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentSchoolAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentSchoolAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentSchoolAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentSchoolAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentSchoolAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentSchoolAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentSchoolAttendanceEvents": {
      "get": {
        "tags": [ "studentSchoolAttendanceEvents" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentSchoolAttendanceEvents",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "attendanceEventCategoryDescriptor",
            "in": "query",
            "description": "A code describing the attendance event, for example:          Present          Unexcused absence          Excused absence          Tardy.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "eventDate",
            "in": "query",
            "description": "Date for this attendance event.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sessionName",
            "in": "query",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationalEnvironmentDescriptor",
            "in": "query",
            "description": "The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "attendanceEventReason",
            "in": "query",
            "description": "The reported reason for a student's absence.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 40,
              "type": "string"
            }
          },
          {
            "name": "eventDuration",
            "in": "query",
            "description": "The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentSchoolAttendanceEvent"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentSchoolAttendanceEvents" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentSchoolAttendanceEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentSchoolAttendanceEvent"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentSchoolAttendanceEvents/{id}": {
      "get": {
        "tags": [ "studentSchoolAttendanceEvents" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentSchoolAttendanceEventsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentSchoolAttendanceEvent"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentSchoolAttendanceEvents" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentSchoolAttendanceEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentSchoolAttendanceEvent"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentSchoolAttendanceEvents" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentSchoolAttendanceEventById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentSchoolFoodServiceProgramAssociations": {
      "get": {
        "tags": [ "studentSchoolFoodServiceProgramAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentSchoolFoodServiceProgramAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The month, day, and year on which the Student first received services.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programName",
            "in": "query",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programTypeDescriptor",
            "in": "query",
            "description": "The type of program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "directCertification",
            "in": "query",
            "description": "Indicates that the student's National School Lunch Program (NSLP) eligibility has been determined through direct certification.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentSchoolFoodServiceProgramAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentSchoolFoodServiceProgramAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentSchoolFoodServiceProgramAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentSchoolFoodServiceProgramAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentSchoolFoodServiceProgramAssociations/{id}": {
      "get": {
        "tags": [ "studentSchoolFoodServiceProgramAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentSchoolFoodServiceProgramAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentSchoolFoodServiceProgramAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentSchoolFoodServiceProgramAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentSchoolFoodServiceProgramAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentSchoolFoodServiceProgramAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentSchoolFoodServiceProgramAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentSchoolFoodServiceProgramAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentSectionAssociations": {
      "get": {
        "tags": [ "studentSectionAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentSectionAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "Month, day, and year of the Student's entry or assignment to the Section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "localCourseCode",
            "in": "query",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sectionIdentifier",
            "in": "query",
            "description": "The local identifier assigned to a section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sessionName",
            "in": "query",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "attemptStatusDescriptor",
            "in": "query",
            "description": "An indication of the student's attempt status for the section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "repeatIdentifierDescriptor",
            "in": "query",
            "description": "An indication as to whether a student has previously taken a given course.          Repeated, counted in grade point average          Repeated, not counted in grade point average          Not repeated          Other.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Month, day, and year of the withdrawal or exit of the Student from the Section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "homeroomIndicator",
            "in": "query",
            "description": "Indicates the Section is the student's homeroom. Homeroom period may the convention for taking daily attendance.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teacherStudentDataLinkExclusion",
            "in": "query",
            "description": "Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentSectionAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentSectionAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentSectionAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentSectionAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentSectionAssociations/{id}": {
      "get": {
        "tags": [ "studentSectionAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentSectionAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentSectionAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentSectionAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentSectionAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentSectionAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentSectionAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentSectionAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentSectionAttendanceEvents": {
      "get": {
        "tags": [ "studentSectionAttendanceEvents" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentSectionAttendanceEvents",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "attendanceEventCategoryDescriptor",
            "in": "query",
            "description": "A code describing the attendance event, for example:          Present          Unexcused absence          Excused absence          Tardy.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "eventDate",
            "in": "query",
            "description": "Date for this attendance event.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "localCourseCode",
            "in": "query",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolId",
            "in": "query",
            "description": "The identifier assigned to a school.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "schoolYear",
            "in": "query",
            "description": "The identifier for the school year.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sectionIdentifier",
            "in": "query",
            "description": "The local identifier assigned to a section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "sessionName",
            "in": "query",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationalEnvironmentDescriptor",
            "in": "query",
            "description": "The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "attendanceEventReason",
            "in": "query",
            "description": "The reported reason for a student's absence.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 40,
              "type": "string"
            }
          },
          {
            "name": "eventDuration",
            "in": "query",
            "description": "The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentSectionAttendanceEvent"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentSectionAttendanceEvents" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentSectionAttendanceEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentSectionAttendanceEvent"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentSectionAttendanceEvents/{id}": {
      "get": {
        "tags": [ "studentSectionAttendanceEvents" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentSectionAttendanceEventsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentSectionAttendanceEvent"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentSectionAttendanceEvents" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentSectionAttendanceEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentSectionAttendanceEvent"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentSectionAttendanceEvents" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentSectionAttendanceEventById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentSpecialEducationProgramAssociations": {
      "get": {
        "tags": [ "studentSpecialEducationProgramAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentSpecialEducationProgramAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The month, day, and year on which the Student first received services.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programName",
            "in": "query",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programTypeDescriptor",
            "in": "query",
            "description": "The type of program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "specialEducationSettingDescriptor",
            "in": "query",
            "description": "The major instructional setting (more than 50 percent of a student's special education program).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          },
          {
            "name": "ideaEligibility",
            "in": "query",
            "description": "Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "iepBeginDate",
            "in": "query",
            "description": "The effective date of the most recent IEP.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "iepEndDate",
            "in": "query",
            "description": "The end date of the most recent IEP.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "iepReviewDate",
            "in": "query",
            "description": "The date of the last IEP review.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "lastEvaluationDate",
            "in": "query",
            "description": "The date of the last special education evaluation.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "medicallyFragile",
            "in": "query",
            "description": "Indicates whether the Student receiving special education and related services is:          1) in the age range of birth to 22 years, and          2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and          3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and          4) lives with ongoing threat to his or her continued well-being.          Aligns with federal requirements.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "multiplyDisabled",
            "in": "query",
            "description": "Indicates whether the Student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "schoolHoursPerWeek",
            "in": "query",
            "description": "Indicate the total number of hours of instructional time per week for the school that the student attends.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "specialEducationHoursPerWeek",
            "in": "query",
            "description": "The number of hours per week for special education instruction and therapy.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentSpecialEducationProgramAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentSpecialEducationProgramAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentSpecialEducationProgramAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentSpecialEducationProgramAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentSpecialEducationProgramAssociations/{id}": {
      "get": {
        "tags": [ "studentSpecialEducationProgramAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentSpecialEducationProgramAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentSpecialEducationProgramAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentSpecialEducationProgramAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentSpecialEducationProgramAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentSpecialEducationProgramAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentSpecialEducationProgramAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentSpecialEducationProgramAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentTitleIPartAProgramAssociations": {
      "get": {
        "tags": [ "studentTitleIPartAProgramAssociations" ],
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getStudentTitleIPartAProgramAssociations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates how many items should be skipped before returning results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicates the maximum number of items that should be returned in the results.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxItems": 100,
              "minItems": 1,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "totalCount",
            "in": "query",
            "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "The month, day, and year on which the Student first received services.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "educationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programEducationOrganizationId",
            "in": "query",
            "description": "The identifier assigned to an education organization.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programName",
            "in": "query",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 60,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "programTypeDescriptor",
            "in": "query",
            "description": "The type of program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "studentUniqueId",
            "in": "query",
            "description": "A unique alphanumeric code assigned to a student.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            },
            "x-Ed-Fi-isIdentity": true
          },
          {
            "name": "titleIPartAParticipantDescriptor",
            "in": "query",
            "description": "An indication of the type of Title I program, if any, in which the student is participating and by which the student is served:          Public Targeted Assistance Program          Public Schoolwide Program          Private School Students Participating          Local Neglected Program.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 306,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/studentTitleIPartAProgramAssociation"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "post": {
        "tags": [ "studentTitleIPartAProgramAssociations" ],
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
        "operationId": "postStudentTitleIPartAProgramAssociation",
        "requestBody": {
          "$ref": "#/components/requestBodies/studentTitleIPartAProgramAssociation"
        },
        "responses": {
          "201": {
            "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
          },
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    },
    "/ed-fi/studentTitleIPartAProgramAssociations/{id}": {
      "get": {
        "tags": [ "studentTitleIPartAProgramAssociations" ],
        "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
        "description": "This GET operation retrieves a resource by the specified resource identifier.",
        "operationId": "getStudentTitleIPartAProgramAssociationsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/studentTitleIPartAProgramAssociation"
                }
              }
            }
          },
          "304": {
            "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "put": {
        "tags": [ "studentTitleIPartAProgramAssociations" ],
        "summary": "Updates or creates a resource based on the resource identifier.",
        "description": "The PUT operation is used to update or create a resource by identifier. If the resource doesn't exist, the resource will be created using that identifier. Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
        "operationId": "putStudentTitleIPartAProgramAssociation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/studentTitleIPartAProgramAssociation"
        },
        "responses": {
          "204": {
            "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      },
      "delete": {
        "tags": [ "studentTitleIPartAProgramAssociations" ],
        "summary": "Deletes an existing resource using the resource identifier.",
        "description": "The DELETE operation is used to delete an existing resource by identifier. If the resource doesn't exist, an error will result (the resource will not be found).",
        "operationId": "deleteStudentTitleIPartAProgramAssociationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A resource identifier that uniquely identifies the resource.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
          },
          "401": {
            "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
          },
          "403": {
            "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
          },
          "404": {
            "description": "The resource could not be found."
          },
          "409": {
            "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
          },
          "412": {
            "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
          },
          "500": {
            "description": "An unhandled error occurred on the server. See the response body for details."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "academicWeek": {
        "required": [ "beginDate", "endDate", "id", "schoolReference", "totalInstructionalDays", "weekIdentifier" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "weekIdentifier": {
            "maxLength": 80,
            "type": "string",
            "description": "The school label for the week.",
            "x-Ed-Fi-isIdentity": true
          },
          "schoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "beginDate": {
            "type": "string",
            "description": "The start date for the academic week.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The end date for the academic week.",
            "format": "date"
          },
          "totalInstructionalDays": {
            "type": "integer",
            "description": "The total instructional days during the academic week.",
            "format": "int32"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "academicWeekReference": {
        "required": [ "schoolId", "weekIdentifier" ],
        "type": "object",
        "properties": {
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "weekIdentifier": {
            "maxLength": 80,
            "type": "string",
            "description": "The school label for the week."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "account": {
        "required": [ "accountCodes", "accountIdentifier", "educationOrganizationReference", "fiscalYear", "id" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "accountCodes": {
            "type": "array",
            "description": "An unordered collection of accountAccountCodes. The set of account codes defined for the education accounting system organized by account code type (e.g., fund, function, object) that map to the account.",
            "items": {
              "$ref": "#/components/schemas/accountAccountCode"
            }
          },
          "accountIdentifier": {
            "maxLength": 50,
            "type": "string",
            "description": "The alphanumeric string that identifies the account.",
            "x-Ed-Fi-isIdentity": true
          },
          "fiscalYear": {
            "type": "integer",
            "description": "The financial accounting year.",
            "format": "int32",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "accountName": {
            "maxLength": 100,
            "type": "string",
            "description": "A descriptive name for the account."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "accountabilityRating": {
        "required": [ "educationOrganizationReference", "id", "rating", "ratingTitle", "schoolYearTypeReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "ratingTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The title of the rating (e.g., School Rating, Safety Score).",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "schoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          },
          "rating": {
            "maxLength": 35,
            "type": "string",
            "description": "An accountability rating level, designation, or assessment."
          },
          "ratingDate": {
            "type": "string",
            "description": "The date the rating was awarded.",
            "format": "date"
          },
          "ratingOrganization": {
            "maxLength": 35,
            "type": "string",
            "description": "The organization that assessed the rating."
          },
          "ratingProgram": {
            "maxLength": 30,
            "type": "string",
            "description": "The program associated with the AccountabilityRating (e.g., NCLB, AEIS)."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "accountAccountCode": {
        "required": [ "accountCodeReference" ],
        "type": "object",
        "properties": {
          "accountCodeReference": {
            "$ref": "#/components/schemas/accountCodeReference"
          }
        }
      },
      "accountCode": {
        "required": [ "accountClassificationDescriptor", "accountCodeNumber", "educationOrganizationReference", "fiscalYear", "id" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "accountClassificationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of account code associated with the account.",
            "x-Ed-Fi-isIdentity": true
          },
          "accountCodeNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "An account code defined for the education accounting system by the education organization.",
            "x-Ed-Fi-isIdentity": true
          },
          "fiscalYear": {
            "type": "integer",
            "description": "The financial accounting year.",
            "format": "int32",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "accountCodeDescription": {
            "maxLength": 1024,
            "type": "string",
            "description": "A description of the account code."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "accountCodeReference": {
        "required": [ "accountClassificationDescriptor", "accountCodeNumber", "educationOrganizationId", "fiscalYear" ],
        "type": "object",
        "properties": {
          "accountClassificationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of account code associated with the account."
          },
          "accountCodeNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "An account code defined for the education accounting system by the education organization."
          },
          "educationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "fiscalYear": {
            "type": "integer",
            "description": "The financial accounting year.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "accountReference": {
        "required": [ "accountIdentifier", "educationOrganizationId", "fiscalYear" ],
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "maxLength": 50,
            "type": "string",
            "description": "The alphanumeric string that identifies the account."
          },
          "educationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "fiscalYear": {
            "type": "integer",
            "description": "The financial accounting year.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "actual": {
        "required": [ "accountReference", "amountToDate", "asOfDate", "id" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "asOfDate": {
            "type": "string",
            "description": "The date of the reported actual element.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "accountReference": {
            "$ref": "#/components/schemas/accountReference"
          },
          "amountToDate": {
            "type": "number",
            "description": "Current balance for the account.",
            "format": "double"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "assessment": {
        "required": [ "academicSubjects", "assessmentIdentifier", "assessmentTitle", "id", "namespace" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "academicSubjects": {
            "type": "array",
            "description": "An unordered collection of assessmentAcademicSubjects. The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.",
            "items": {
              "$ref": "#/components/schemas/assessmentAcademicSubject"
            }
          },
          "assessmentIdentifier": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to an assessment.",
            "x-Ed-Fi-isIdentity": true
          },
          "namespace": {
            "maxLength": 255,
            "type": "string",
            "description": "Namespace for the Assessment.",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "adaptiveAssessment": {
            "type": "boolean",
            "description": "Indicates that the assessment is adaptive."
          },
          "assessedGradeLevels": {
            "type": "array",
            "description": "An unordered collection of assessmentAssessedGradeLevels. The grade level(s) for which an assessment is designed. The semantics of null is assumed to mean that the assessment is not associated with any grade level.",
            "items": {
              "$ref": "#/components/schemas/assessmentAssessedGradeLevel"
            }
          },
          "assessmentCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The category of an assessment based on format and content. For example:          Achievement test          Advanced placement test          Alternate assessment/grade-level standards          Attitudinal test          Cognitive and perceptual skills test          ..."
          },
          "assessmentFamily": {
            "maxLength": 60,
            "type": "string",
            "description": "The AssessmentFamily this Assessment is a member of."
          },
          "assessmentForm": {
            "maxLength": 60,
            "type": "string",
            "description": "Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc."
          },
          "assessmentTitle": {
            "maxLength": 100,
            "type": "string",
            "description": "The title or name of the Assessment."
          },
          "assessmentVersion": {
            "type": "integer",
            "description": "The version identifier for the assessment.",
            "format": "int32"
          },
          "contentStandard": {
            "$ref": "#/components/schemas/assessmentContentStandard"
          },
          "identificationCodes": {
            "type": "array",
            "description": "An unordered collection of assessmentIdentificationCodes. A unique number or alphanumeric code assigned to an assessment by a school, school system, a state, or other agency or entity.",
            "items": {
              "$ref": "#/components/schemas/assessmentIdentificationCode"
            }
          },
          "languages": {
            "type": "array",
            "description": "An unordered collection of assessmentLanguages. An indication of the languages in which the assessment is designed.",
            "items": {
              "$ref": "#/components/schemas/assessmentLanguage"
            }
          },
          "maxRawScore": {
            "type": "integer",
            "description": "The maximum raw score achievable across all assessment items that are correct and scored at the maximum.",
            "format": "int32"
          },
          "nomenclature": {
            "maxLength": 35,
            "type": "string",
            "description": "Reflects the specific nomenclature used for Assessment."
          },
          "performanceLevels": {
            "type": "array",
            "description": "An unordered collection of assessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported:          1. Specification of performance level by minimum and maximum score          2. Specification of performance level by cut score, using only minimum score          3. Specification of performance level without any mapping to scores.",
            "items": {
              "$ref": "#/components/schemas/assessmentPerformanceLevel"
            }
          },
          "period": {
            "$ref": "#/components/schemas/assessmentPeriod"
          },
          "programs": {
            "type": "array",
            "description": "An unordered collection of assessmentPrograms. The programs associated with the Assessment.",
            "items": {
              "$ref": "#/components/schemas/assessmentProgram"
            }
          },
          "revisionDate": {
            "type": "string",
            "description": "The month, day, and year that the conceptual design for the assessment was most recently revised substantially.",
            "format": "date"
          },
          "scores": {
            "type": "array",
            "description": "An unordered collection of assessmentScores. Definition of the scores to be expected from this assessment.",
            "items": {
              "$ref": "#/components/schemas/assessmentScore"
            }
          },
          "sections": {
            "type": "array",
            "description": "An unordered collection of assessmentSections. The Section(s) to which the Assessment is associated.",
            "items": {
              "$ref": "#/components/schemas/assessmentSection"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "assessmentAcademicSubject": {
        "required": [ "academicSubjectDescriptor" ],
        "type": "object",
        "properties": {
          "academicSubjectDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "assessmentAssessedGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade level(s) for which an assessment is designed. The semantics of null is assumed to mean that the assessment is not associated with any grade level.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "assessmentContentStandard": {
        "required": [ "title" ],
        "type": "object",
        "properties": {
          "publicationStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown)."
          },
          "beginDate": {
            "type": "string",
            "description": "The beginning of the period during which this learning standard document is intended for use.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The end of the period during which this learning standard document is intended for use.",
            "format": "date"
          },
          "publicationDate": {
            "type": "string",
            "description": "The date on which this content was first published.",
            "format": "date"
          },
          "publicationYear": {
            "type": "integer",
            "description": "The year at which this content was first published.",
            "format": "int32"
          },
          "title": {
            "maxLength": 75,
            "type": "string",
            "description": "The name of the content standard, for example Common Core."
          },
          "uri": {
            "maxLength": 255,
            "type": "string",
            "description": "An unambiguous reference to the standards using a network-resolvable URI."
          },
          "version": {
            "maxLength": 50,
            "type": "string",
            "description": "The version identifier for the content."
          },
          "mandatingEducationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "authors": {
            "type": "array",
            "description": "An unordered collection of assessmentContentStandardAuthors. The person or organization chiefly responsible for the intellectual content of the standard.",
            "items": {
              "$ref": "#/components/schemas/assessmentContentStandardAuthor"
            }
          }
        }
      },
      "assessmentContentStandardAuthor": {
        "required": [ "author" ],
        "type": "object",
        "properties": {
          "author": {
            "maxLength": 100,
            "type": "string",
            "description": "The person or organization chiefly responsible for the intellectual content of the standard.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "assessmentIdentificationCode": {
        "required": [ "assessmentIdentificationSystemDescriptor", "identificationCode" ],
        "type": "object",
        "properties": {
          "assessmentIdentificationSystemDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment.",
            "x-Ed-Fi-isIdentity": true
          },
          "assigningOrganizationIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The organization code or name assigning the assessment identification code."
          },
          "identificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity."
          }
        }
      },
      "assessmentItem": {
        "required": [ "assessmentReference", "id", "identificationCode" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "identificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.",
            "x-Ed-Fi-isIdentity": true
          },
          "assessmentReference": {
            "$ref": "#/components/schemas/assessmentReference"
          },
          "assessmentItemCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Category or type of the AssessmentItem. For example:          Multiple choice          Analytic          Prose          ..."
          },
          "assessmentItemURI": {
            "maxLength": 255,
            "type": "string",
            "description": "The URI (typical a URL) pointing to the entry in an assessment item bank, which describes this content item."
          },
          "correctResponse": {
            "maxLength": 20,
            "type": "string",
            "description": "The correct response for the AssessmentItem."
          },
          "expectedTimeAssessed": {
            "maxLength": 30,
            "type": "string",
            "description": "The duration of time allotted for the AssessmentItem."
          },
          "learningStandards": {
            "type": "array",
            "description": "An unordered collection of assessmentItemLearningStandards. LearningStandard tested by this item.",
            "items": {
              "$ref": "#/components/schemas/assessmentItemLearningStandard"
            }
          },
          "maxRawScore": {
            "type": "integer",
            "description": "The maximum raw score achievable across all assessment items that are correct and scored at the maximum.",
            "format": "int32"
          },
          "nomenclature": {
            "maxLength": 35,
            "type": "string",
            "description": "Reflects the specific nomenclature used for AssessmentItem."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "assessmentItemLearningStandard": {
        "required": [ "learningStandardReference" ],
        "type": "object",
        "properties": {
          "learningStandardReference": {
            "$ref": "#/components/schemas/learningStandardReference"
          }
        }
      },
      "assessmentItemReference": {
        "required": [ "assessmentIdentifier", "identificationCode", "namespace" ],
        "type": "object",
        "properties": {
          "assessmentIdentifier": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to an assessment."
          },
          "identificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity."
          },
          "namespace": {
            "maxLength": 255,
            "type": "string",
            "description": "Namespace for the Assessment."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "assessmentLanguage": {
        "required": [ "languageDescriptor" ],
        "type": "object",
        "properties": {
          "languageDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indication of the languages in which the assessment is designed.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "assessmentPerformanceLevel": {
        "required": [ "assessmentReportingMethodDescriptor", "performanceLevelDescriptor" ],
        "type": "object",
        "properties": {
          "assessmentReportingMethodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.",
            "x-Ed-Fi-isIdentity": true
          },
          "performanceLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The performance level(s) defined for the assessment.",
            "x-Ed-Fi-isIdentity": true
          },
          "resultDatatypeTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The datatype of the result. The results can be expressed as a number, percentile, range, level, etc."
          },
          "maximumScore": {
            "maxLength": 35,
            "type": "string",
            "description": "The maximum score to make the indicated level of performance."
          },
          "minimumScore": {
            "maxLength": 35,
            "type": "string",
            "description": "The minimum score required to make the indicated level of performance."
          }
        }
      },
      "assessmentPeriod": {
        "required": [ "assessmentPeriodDescriptor" ],
        "type": "object",
        "properties": {
          "assessmentPeriodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The period of time in which an assessment is supposed to be administered (e.g., Beginning of Year, Middle of Year, End of Year)."
          },
          "beginDate": {
            "type": "string",
            "description": "The first date the assessment is to be administered.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The last date the assessment is to be administered.",
            "format": "date"
          }
        }
      },
      "assessmentProgram": {
        "required": [ "programReference" ],
        "type": "object",
        "properties": {
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          }
        }
      },
      "assessmentReference": {
        "required": [ "assessmentIdentifier", "namespace" ],
        "type": "object",
        "properties": {
          "assessmentIdentifier": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to an assessment."
          },
          "namespace": {
            "maxLength": 255,
            "type": "string",
            "description": "Namespace for the Assessment."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "assessmentScore": {
        "required": [ "assessmentReportingMethodDescriptor" ],
        "type": "object",
        "properties": {
          "assessmentReportingMethodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.",
            "x-Ed-Fi-isIdentity": true
          },
          "resultDatatypeTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The datatype of the result. The results can be expressed as a number, percentile, range, level, etc."
          },
          "maximumScore": {
            "maxLength": 35,
            "type": "string",
            "description": "The maximum score possible on the assessment."
          },
          "minimumScore": {
            "maxLength": 35,
            "type": "string",
            "description": "The minimum score possible on the assessment."
          }
        }
      },
      "assessmentSection": {
        "required": [ "sectionReference" ],
        "type": "object",
        "properties": {
          "sectionReference": {
            "$ref": "#/components/schemas/sectionReference"
          }
        }
      },
      "bellSchedule": {
        "required": [ "bellScheduleName", "classPeriods", "id", "schoolReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "bellScheduleName": {
            "maxLength": 60,
            "type": "string",
            "description": "Name or title of the BellSchedule.",
            "x-Ed-Fi-isIdentity": true
          },
          "classPeriods": {
            "type": "array",
            "description": "An unordered collection of bellScheduleClassPeriods. The class periods that compose this BellSchedule.",
            "items": {
              "$ref": "#/components/schemas/bellScheduleClassPeriod"
            }
          },
          "schoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "alternateDayName": {
            "maxLength": 20,
            "type": "string",
            "description": "An alternate name for the day (e.g., Red, Blue)."
          },
          "dates": {
            "type": "array",
            "description": "An unordered collection of bellScheduleDates. The dates for which the BellSchedule applies.",
            "items": {
              "$ref": "#/components/schemas/bellScheduleDate"
            }
          },
          "gradeLevels": {
            "type": "array",
            "description": "An unordered collection of bellScheduleGradeLevels. The grade levels the particular BellSchedule applies to.",
            "items": {
              "$ref": "#/components/schemas/bellScheduleGradeLevel"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "bellScheduleClassPeriod": {
        "required": [ "classPeriodReference" ],
        "type": "object",
        "properties": {
          "classPeriodReference": {
            "$ref": "#/components/schemas/classPeriodReference"
          }
        }
      },
      "bellScheduleDate": {
        "required": [ "date" ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The dates for which the BellSchedule applies.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "bellScheduleGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade levels the particular BellSchedule applies to.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "budget": {
        "required": [ "accountReference", "amount", "asOfDate", "id" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "asOfDate": {
            "type": "string",
            "description": "The date of the reported budget element.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "accountReference": {
            "$ref": "#/components/schemas/accountReference"
          },
          "amount": {
            "type": "number",
            "description": "Amount budgeted for the account for this fiscal year.",
            "format": "double"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "calendar": {
        "required": [ "calendarCode", "calendarTypeDescriptor", "id", "schoolReference", "schoolYearTypeReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "calendarCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the Calendar.",
            "x-Ed-Fi-isIdentity": true
          },
          "schoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "schoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          },
          "calendarTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the type of Calendar."
          },
          "gradeLevels": {
            "type": "array",
            "description": "An unordered collection of calendarGradeLevels. Indicates the GradeLevel associated with the Calendar.",
            "items": {
              "$ref": "#/components/schemas/calendarGradeLevel"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "calendarDate": {
        "required": [ "calendarEvents", "calendarReference", "date", "id" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "calendarEvents": {
            "type": "array",
            "description": "An unordered collection of calendarDateCalendarEvents. The type of scheduled or unscheduled event for the day.",
            "items": {
              "$ref": "#/components/schemas/calendarDateCalendarEvent"
            }
          },
          "date": {
            "type": "string",
            "description": "The month, day, and year of the CalendarEvent.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "calendarReference": {
            "$ref": "#/components/schemas/calendarReference"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "calendarDateCalendarEvent": {
        "required": [ "calendarEventDescriptor" ],
        "type": "object",
        "properties": {
          "calendarEventDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of scheduled or unscheduled event for the day.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "calendarDateReference": {
        "required": [ "calendarCode", "date", "schoolId", "schoolYear" ],
        "type": "object",
        "properties": {
          "calendarCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the Calendar."
          },
          "date": {
            "type": "string",
            "description": "The month, day, and year of the CalendarEvent.",
            "format": "date"
          },
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "schoolYear": {
            "type": "integer",
            "description": "The identifier for the school year associated with the Calendar.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "calendarGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the GradeLevel associated with the Calendar.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "calendarReference": {
        "required": [ "calendarCode", "schoolId", "schoolYear" ],
        "type": "object",
        "properties": {
          "calendarCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the Calendar."
          },
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "schoolYear": {
            "type": "integer",
            "description": "The identifier for the school year associated with the Calendar.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "classPeriod": {
        "required": [ "classPeriodName", "id", "schoolReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "classPeriodName": {
            "maxLength": 60,
            "type": "string",
            "description": "An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).",
            "x-Ed-Fi-isIdentity": true
          },
          "schoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "meetingTimes": {
            "type": "array",
            "description": "An unordered collection of classPeriodMeetingTimes. The meeting time(s) for a class period.",
            "items": {
              "$ref": "#/components/schemas/classPeriodMeetingTime"
            }
          },
          "officialAttendancePeriod": {
            "type": "boolean",
            "description": "Indicator of whether this class period is used for official daily attendance."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "classPeriodMeetingTime": {
        "required": [ "endTime", "startTime" ],
        "type": "object",
        "properties": {
          "endTime": {
            "type": "string",
            "description": "An indication of the time of day the meeting time ends.",
            "x-Ed-Fi-isIdentity": true
          },
          "startTime": {
            "type": "string",
            "description": "An indication of the time of day the meeting time begins.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "classPeriodReference": {
        "required": [ "classPeriodName", "schoolId" ],
        "type": "object",
        "properties": {
          "classPeriodName": {
            "maxLength": 60,
            "type": "string",
            "description": "An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules)."
          },
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "cohort": {
        "required": [ "cohortIdentifier", "cohortTypeDescriptor", "educationOrganizationReference", "id" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "cohortIdentifier": {
            "maxLength": 20,
            "type": "string",
            "description": "The name or ID for the Cohort.",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "academicSubjectDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The academic subject associated with an academic intervention."
          },
          "cohortDescription": {
            "maxLength": 1024,
            "type": "string",
            "description": "The description of the Cohort and its purpose."
          },
          "cohortScopeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The scope of cohort (e.g., school, district, classroom)."
          },
          "cohortTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of cohort (e.g., academic intervention, classroom breakout)."
          },
          "programs": {
            "type": "array",
            "description": "An unordered collection of cohortPrograms. The (optional) program associated with this Cohort (e.g., special education).",
            "items": {
              "$ref": "#/components/schemas/cohortProgram"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "cohortProgram": {
        "required": [ "programReference" ],
        "type": "object",
        "properties": {
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          }
        }
      },
      "cohortReference": {
        "required": [ "cohortIdentifier", "educationOrganizationId" ],
        "type": "object",
        "properties": {
          "cohortIdentifier": {
            "maxLength": 20,
            "type": "string",
            "description": "The name or ID for the Cohort."
          },
          "educationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "communityOrganization": {
        "required": [ "addresses", "categories", "communityOrganizationId", "id", "nameOfInstitution" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationAddresses. The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationAddress"
            }
          },
          "categories": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationCategory"
            }
          },
          "communityOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to a CommunityOrganization.",
            "format": "int32",
            "x-Ed-Fi-isIdentity": true
          },
          "identificationCodes": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationIdentificationCode"
            }
          },
          "institutionTelephones": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInstitutionTelephone"
            }
          },
          "internationalAddresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInternationalAddress"
            }
          },
          "nameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "The full, legally accepted name of the institution."
          },
          "operationalStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The current operational status of the EducationOrganization (e.g., active, inactive)."
          },
          "shortNameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "A short name for the institution."
          },
          "webSite": {
            "maxLength": 255,
            "type": "string",
            "description": "The public web site address (URL) for the EducationOrganization."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "communityOrganizationReference": {
        "required": [ "communityOrganizationId" ],
        "type": "object",
        "properties": {
          "communityOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to a CommunityOrganization.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "communityProvider": {
        "required": [ "addresses", "categories", "communityProviderId", "id", "nameOfInstitution", "providerCategoryDescriptor", "providerStatusDescriptor" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationAddresses. The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationAddress"
            }
          },
          "categories": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationCategory"
            }
          },
          "communityProviderId": {
            "type": "integer",
            "description": "The identifier assigned to a CommunityProvider.",
            "format": "int32",
            "x-Ed-Fi-isIdentity": true
          },
          "communityOrganizationReference": {
            "$ref": "#/components/schemas/communityOrganizationReference"
          },
          "identificationCodes": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationIdentificationCode"
            }
          },
          "institutionTelephones": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInstitutionTelephone"
            }
          },
          "internationalAddresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInternationalAddress"
            }
          },
          "licenseExemptIndicator": {
            "type": "boolean",
            "description": "An indication of whether the provider is exempt from having a license."
          },
          "nameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "The full, legally accepted name of the institution."
          },
          "operationalStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The current operational status of the EducationOrganization (e.g., active, inactive)."
          },
          "providerCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the category of the provider."
          },
          "providerProfitabilityDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the profitability status of the provider."
          },
          "providerStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the status of the provider."
          },
          "schoolIndicator": {
            "type": "boolean",
            "description": "An indication of whether the community provider is a school."
          },
          "shortNameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "A short name for the institution."
          },
          "webSite": {
            "maxLength": 255,
            "type": "string",
            "description": "The public web site address (URL) for the EducationOrganization."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "communityProviderLicense": {
        "required": [ "communityProviderReference", "id", "licenseEffectiveDate", "licenseIdentifier", "licenseTypeDescriptor", "licensingOrganization" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "licenseIdentifier": {
            "maxLength": 20,
            "type": "string",
            "description": "The unique identifier issued by the licensing organization.",
            "x-Ed-Fi-isIdentity": true
          },
          "licensingOrganization": {
            "maxLength": 75,
            "type": "string",
            "description": "The organization issuing the license.",
            "x-Ed-Fi-isIdentity": true
          },
          "communityProviderReference": {
            "$ref": "#/components/schemas/communityProviderReference"
          },
          "authorizedFacilityCapacity": {
            "type": "integer",
            "description": "The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve.",
            "format": "int32"
          },
          "licenseEffectiveDate": {
            "type": "string",
            "description": "The month, day, and year on which a license is active or becomes effective.",
            "format": "date"
          },
          "licenseExpirationDate": {
            "type": "string",
            "description": "The month, day, and year on which a license will expire.",
            "format": "date"
          },
          "licenseIssueDate": {
            "type": "string",
            "description": "The month, day, and year on which an active license was issued.",
            "format": "date"
          },
          "licenseStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indication of the status of the license."
          },
          "licenseTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indication of the category of the license."
          },
          "oldestAgeAuthorizedToServe": {
            "type": "integer",
            "description": "The oldest age of children a provider is authorized or licensed to serve.",
            "format": "int32"
          },
          "youngestAgeAuthorizedToServe": {
            "type": "integer",
            "description": "The youngest age of children a provider is authorized or licensed to serve.",
            "format": "int32"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "communityProviderReference": {
        "required": [ "communityProviderId" ],
        "type": "object",
        "properties": {
          "communityProviderId": {
            "type": "integer",
            "description": "The identifier assigned to a CommunityProvider.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "competencyObjective": {
        "required": [ "educationOrganizationReference", "id", "objective", "objectiveGradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "objective": {
            "maxLength": 60,
            "type": "string",
            "description": "The designated title of the CompetencyObjective.",
            "x-Ed-Fi-isIdentity": true
          },
          "objectiveGradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade level for which the CompetencyObjective is targeted.",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "competencyObjectiveId": {
            "maxLength": 60,
            "type": "string",
            "description": "The Identifier for the CompetencyObjective."
          },
          "description": {
            "maxLength": 1024,
            "type": "string",
            "description": "The description of the student competency objective."
          },
          "successCriteria": {
            "maxLength": 150,
            "type": "string",
            "description": "One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the CompetencyObjective."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "competencyObjectiveReference": {
        "required": [ "educationOrganizationId", "objective", "objectiveGradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "educationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "objective": {
            "maxLength": 60,
            "type": "string",
            "description": "The designated title of the CompetencyObjective."
          },
          "objectiveGradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade level for which the CompetencyObjective is targeted."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "contractedStaff": {
        "required": [ "accountReference", "amountToDate", "asOfDate", "id", "staffReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "asOfDate": {
            "type": "string",
            "description": "The date of the reported contracted staff element.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "accountReference": {
            "$ref": "#/components/schemas/accountReference"
          },
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          },
          "amountToDate": {
            "type": "number",
            "description": "Current balance (amount paid to contractor) for account for the fiscal year.",
            "format": "double"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "course": {
        "required": [ "courseCode", "courseTitle", "educationOrganizationReference", "id", "identificationCodes", "numberOfParts" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "courseCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique alphanumeric code assigned to a course.",
            "x-Ed-Fi-isIdentity": true
          },
          "identificationCodes": {
            "type": "array",
            "description": "An unordered collection of courseIdentificationCodes. The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.",
            "items": {
              "$ref": "#/components/schemas/courseIdentificationCode"
            }
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "academicSubjectDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The intended major subject area of the course."
          },
          "careerPathwayDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum."
          },
          "competencyLevels": {
            "type": "array",
            "description": "An unordered collection of courseCompetencyLevels. The competency levels defined to rate the student for the course.",
            "items": {
              "$ref": "#/components/schemas/courseCompetencyLevel"
            }
          },
          "courseDefinedByDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Specifies whether the course was defined by the SEA, LEA, School, or national organization."
          },
          "courseDescription": {
            "maxLength": 1024,
            "type": "string",
            "description": "A description of the content standards and goals covered in the course. Reference may be made to state or national content standards."
          },
          "courseGPAApplicabilityDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indicator of whether or not the course being described is included in the computation of the student's Grade Point Average, and if so, if it is weighted differently from regular courses."
          },
          "courseTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts)."
          },
          "dateCourseAdopted": {
            "type": "string",
            "description": "Date the course was adopted by the education agency.",
            "format": "date"
          },
          "highSchoolCourseRequirement": {
            "type": "boolean",
            "description": "An indication that this course may satisfy high school graduation requirements in the course's subject area."
          },
          "learningObjectives": {
            "type": "array",
            "description": "An unordered collection of courseLearningObjectives. Learning Objectives to be mastered in the course.",
            "items": {
              "$ref": "#/components/schemas/courseLearningObjective"
            }
          },
          "learningStandards": {
            "type": "array",
            "description": "An unordered collection of courseLearningStandards. Learning Standard(s) to be taught by the course.",
            "items": {
              "$ref": "#/components/schemas/courseLearningStandard"
            }
          },
          "levelCharacteristics": {
            "type": "array",
            "description": "An unordered collection of courseLevelCharacteristics. The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).",
            "items": {
              "$ref": "#/components/schemas/courseLevelCharacteristic"
            }
          },
          "maxCompletionsForCredit": {
            "type": "integer",
            "description": "Designates how many times the course may be taken with credit received by the student.",
            "format": "int32"
          },
          "maximumAvailableCreditConversion": {
            "type": "number",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "format": "double"
          },
          "maximumAvailableCredits": {
            "type": "number",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "format": "double"
          },
          "maximumAvailableCreditTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of credits or units of value awarded for the completion of a course."
          },
          "minimumAvailableCreditConversion": {
            "type": "number",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "format": "double"
          },
          "minimumAvailableCredits": {
            "type": "number",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "format": "double"
          },
          "minimumAvailableCreditTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of credits or units of value awarded for the completion of a course."
          },
          "numberOfParts": {
            "type": "integer",
            "description": "The number of parts identified for a course.",
            "format": "int32"
          },
          "offeredGradeLevels": {
            "type": "array",
            "description": "An unordered collection of courseOfferedGradeLevels. The grade levels in which the course is offered.",
            "items": {
              "$ref": "#/components/schemas/courseOfferedGradeLevel"
            }
          },
          "timeRequiredForCompletion": {
            "type": "integer",
            "description": "The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.",
            "format": "int32"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "courseCompetencyLevel": {
        "required": [ "competencyLevelDescriptor" ],
        "type": "object",
        "properties": {
          "competencyLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The competency levels defined to rate the student for the course.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "courseIdentificationCode": {
        "required": [ "courseIdentificationSystemDescriptor", "identificationCode" ],
        "type": "object",
        "properties": {
          "courseIdentificationSystemDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students.",
            "x-Ed-Fi-isIdentity": true
          },
          "assigningOrganizationIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The organization code or name assigning the Identification Code."
          },
          "identificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a \"/\". For example, consider the following SCED code-    subject = 20 Math    course = 272 Geometry    level = G General    credits = 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1."
          }
        }
      },
      "courseLearningObjective": {
        "required": [ "learningObjectiveReference" ],
        "type": "object",
        "properties": {
          "learningObjectiveReference": {
            "$ref": "#/components/schemas/learningObjectiveReference"
          }
        }
      },
      "courseLearningStandard": {
        "required": [ "learningStandardReference" ],
        "type": "object",
        "properties": {
          "learningStandardReference": {
            "$ref": "#/components/schemas/learningStandardReference"
          }
        }
      },
      "courseLevelCharacteristic": {
        "required": [ "courseLevelCharacteristicDescriptor" ],
        "type": "object",
        "properties": {
          "courseLevelCharacteristicDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "courseOfferedGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade levels in which the course is offered.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "courseOffering": {
        "required": [ "courseReference", "id", "localCourseCode", "schoolReference", "sessionReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "localCourseCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students.",
            "x-Ed-Fi-isIdentity": true
          },
          "courseReference": {
            "$ref": "#/components/schemas/courseReference"
          },
          "schoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "sessionReference": {
            "$ref": "#/components/schemas/sessionReference"
          },
          "courseLevelCharacteristics": {
            "type": "array",
            "description": "An unordered collection of courseOfferingCourseLevelCharacteristics. The type of specific program or designation with which the course offering is associated (e.g., AP, IB, Dual Credit, CTE). This collection should only be populated if it differs from the Course Level Characteristics identified at the Course level.",
            "items": {
              "$ref": "#/components/schemas/courseOfferingCourseLevelCharacteristic"
            }
          },
          "curriculumUseds": {
            "type": "array",
            "description": "An unordered collection of courseOfferingCurriculumUseds. The type of curriculum used in an early learning classroom or group.",
            "items": {
              "$ref": "#/components/schemas/courseOfferingCurriculumUsed"
            }
          },
          "instructionalTimePlanned": {
            "type": "integer",
            "description": "The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.",
            "format": "int32"
          },
          "localCourseTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The descriptive name given to a course of study offered in the school, if different from the CourseTitle."
          },
          "offeredGradeLevels": {
            "type": "array",
            "description": "An unordered collection of courseOfferingOfferedGradeLevels. The grade levels in which the course is offered. This collection should only be populated if it differs from the Offered Grade Levels identified at the Course level.",
            "items": {
              "$ref": "#/components/schemas/courseOfferingOfferedGradeLevel"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "courseOfferingCourseLevelCharacteristic": {
        "required": [ "courseLevelCharacteristicDescriptor" ],
        "type": "object",
        "properties": {
          "courseLevelCharacteristicDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of specific program or designation with which the course offering is associated (e.g., AP, IB, Dual Credit, CTE). This collection should only be populated if it differs from the Course Level Characteristics identified at the Course level.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "courseOfferingCurriculumUsed": {
        "required": [ "curriculumUsedDescriptor" ],
        "type": "object",
        "properties": {
          "curriculumUsedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of curriculum used in an early learning classroom or group.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "courseOfferingOfferedGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade levels in which the course is offered. This collection should only be populated if it differs from the Offered Grade Levels identified at the Course level.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "courseOfferingReference": {
        "required": [ "localCourseCode", "schoolId", "schoolYear", "sessionName" ],
        "type": "object",
        "properties": {
          "localCourseCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students."
          },
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "schoolYear": {
            "type": "integer",
            "description": "The identifier for the school year.",
            "format": "int32"
          },
          "sessionName": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer)."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "courseReference": {
        "required": [ "courseCode", "educationOrganizationId" ],
        "type": "object",
        "properties": {
          "courseCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique alphanumeric code assigned to a course."
          },
          "educationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "courseTranscript": {
        "required": [ "courseAttemptResultDescriptor", "courseReference", "earnedCredits", "id", "studentAcademicRecordReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "courseAttemptResultDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The result from the student's attempt to take the course, for example:          Pass          Fail          Incomplete          Withdrawn.",
            "x-Ed-Fi-isIdentity": true
          },
          "courseReference": {
            "$ref": "#/components/schemas/courseReference"
          },
          "externalEducationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "studentAcademicRecordReference": {
            "$ref": "#/components/schemas/studentAcademicRecordReference"
          },
          "alternativeCourseCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code."
          },
          "alternativeCourseTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The descriptive name given to a course of study offered in the school, if different from the CourseTitle."
          },
          "attemptedCreditConversion": {
            "type": "number",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "format": "double"
          },
          "attemptedCredits": {
            "type": "number",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "format": "double"
          },
          "attemptedCreditTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of credits or units of value awarded for the completion of a course."
          },
          "courseRepeatCodeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student's academic grade average."
          },
          "courseTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts)."
          },
          "earnedAdditionalCredits": {
            "type": "array",
            "description": "An unordered collection of courseTranscriptEarnedAdditionalCredits. The number of additional credits a student attempted and could earn for successfully completing a given course (e.g., dual credit, AP, IB).",
            "items": {
              "$ref": "#/components/schemas/courseTranscriptEarnedAdditionalCredits"
            }
          },
          "earnedCreditConversion": {
            "type": "number",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "format": "double"
          },
          "earnedCredits": {
            "type": "number",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "format": "double"
          },
          "earnedCreditTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of credits or units of value awarded for the completion of a course."
          },
          "finalLetterGradeEarned": {
            "maxLength": 20,
            "type": "string",
            "description": "The final indicator of student performance in a class as submitted by the instructor."
          },
          "finalNumericGradeEarned": {
            "type": "number",
            "description": "The final indicator of student performance in a class as submitted by the instructor.",
            "format": "double"
          },
          "methodCreditEarnedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The method the credits were earned (e.g., Classroom, Examination, Transfer)."
          },
          "whenTakenGradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Student's grade level at time of course."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "courseTranscriptEarnedAdditionalCredits": {
        "required": [ "additionalCreditTypeDescriptor", "credits" ],
        "type": "object",
        "properties": {
          "additionalCreditTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of credits or units of value awarded for the completion of a course.",
            "x-Ed-Fi-isIdentity": true
          },
          "credits": {
            "type": "number",
            "description": "The value of credits or units of value awarded for the completion of a course",
            "format": "double"
          }
        }
      },
      "credential": {
        "required": [ "credentialFieldDescriptor", "credentialIdentifier", "credentialTypeDescriptor", "gradeLevels", "id", "issuanceDate", "namespace", "stateOfIssueStateAbbreviationDescriptor", "teachingCredentialDescriptor" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "credentialIdentifier": {
            "maxLength": 60,
            "type": "string",
            "description": "Identifier or serial number assigned to the credential.",
            "x-Ed-Fi-isIdentity": true
          },
          "gradeLevels": {
            "type": "array",
            "description": "An unordered collection of credentialGradeLevels. The grade level(s) certified for teaching.",
            "items": {
              "$ref": "#/components/schemas/credentialGradeLevel"
            }
          },
          "stateOfIssueStateAbbreviationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.",
            "x-Ed-Fi-isIdentity": true
          },
          "academicSubjects": {
            "type": "array",
            "description": "An unordered collection of credentialAcademicSubjects. The academic subjects to which the credential pertains.",
            "items": {
              "$ref": "#/components/schemas/credentialAcademicSubject"
            }
          },
          "credentialFieldDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The field of certification for the certificate (e.g., Mathematics, Music)."
          },
          "credentialTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indication of the category of credential an individual holds."
          },
          "effectiveDate": {
            "type": "string",
            "description": "The year, month and day on which an active credential held by an individual was issued.",
            "format": "date"
          },
          "endorsements": {
            "type": "array",
            "description": "An unordered collection of credentialEndorsements. Endorsements are attachments to teaching certificates and indicate areas of specialization.",
            "items": {
              "$ref": "#/components/schemas/credentialEndorsement"
            }
          },
          "expirationDate": {
            "type": "string",
            "description": "The month, day, and year on which an active credential held by an individual will expire.",
            "format": "date"
          },
          "issuanceDate": {
            "type": "string",
            "description": "The month, day, and year on which an active credential was issued to an individual.",
            "format": "date"
          },
          "namespace": {
            "maxLength": 255,
            "type": "string",
            "description": "Namespace for the Credential."
          },
          "teachingCredentialBasisDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indication of the pre-determined criteria for granting the teaching credential that an individual holds."
          },
          "teachingCredentialDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indication of the category of a legal document giving authorization to perform teaching assignment services."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "credentialAcademicSubject": {
        "required": [ "academicSubjectDescriptor" ],
        "type": "object",
        "properties": {
          "academicSubjectDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The academic subjects to which the credential pertains.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "credentialEndorsement": {
        "required": [ "credentialEndorsement" ],
        "type": "object",
        "properties": {
          "credentialEndorsement": {
            "maxLength": 255,
            "type": "string",
            "description": "Endorsements are attachments to teaching certificates and indicate areas of specialization.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "credentialGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade level(s) certified for teaching.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "credentialReference": {
        "required": [ "credentialIdentifier", "stateOfIssueStateAbbreviationDescriptor" ],
        "type": "object",
        "properties": {
          "credentialIdentifier": {
            "maxLength": 60,
            "type": "string",
            "description": "Identifier or serial number assigned to the credential."
          },
          "stateOfIssueStateAbbreviationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "disciplineAction": {
        "required": [ "disciplineActionIdentifier", "disciplineDate", "disciplines", "id", "responsibilitySchoolReference", "studentDisciplineIncidentAssociations", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "disciplineActionIdentifier": {
            "maxLength": 20,
            "type": "string",
            "description": "Identifier assigned by the education organization to the DisciplineAction.",
            "x-Ed-Fi-isIdentity": true
          },
          "disciplineDate": {
            "type": "string",
            "description": "The date of the DisciplineAction.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "disciplines": {
            "type": "array",
            "description": "An unordered collection of disciplineActionDisciplines. Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.",
            "items": {
              "$ref": "#/components/schemas/disciplineActionDiscipline"
            }
          },
          "studentDisciplineIncidentAssociations": {
            "type": "array",
            "description": "An unordered collection of disciplineActionStudentDisciplineIncidentAssociations. Reference to the DisciplineIncident associated with the DisciplineAction.",
            "items": {
              "$ref": "#/components/schemas/disciplineActionStudentDisciplineIncidentAssociation"
            }
          },
          "assignmentSchoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "responsibilitySchoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "actualDisciplineActionLength": {
            "type": "number",
            "description": "Indicates the actual length in school days of a student's disciplinary assignment.",
            "format": "double"
          },
          "disciplineActionLength": {
            "type": "number",
            "description": "The length of time in school days for the DisciplineAction (e.g. removal, detention), if applicable.",
            "format": "double"
          },
          "disciplineActionLengthDifferenceReasonDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the reason for the difference, if any, between the official and actual lengths of a student's disciplinary assignment."
          },
          "iepPlacementMeetingIndicator": {
            "type": "boolean",
            "description": "An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student's Individualized Education Program (IEP) team to determine appropriate placement."
          },
          "receivedEducationServicesDuringExpulsion": {
            "type": "boolean",
            "description": "An indication of whether the student received educational services when removed from the regular school program for disciplinary reasons."
          },
          "relatedToZeroTolerancePolicy": {
            "type": "boolean",
            "description": "An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies."
          },
          "staffs": {
            "type": "array",
            "description": "An unordered collection of disciplineActionStaffs. The staff responsible for enforcing the DisciplineAction.",
            "items": {
              "$ref": "#/components/schemas/disciplineActionStaff"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "disciplineActionDiscipline": {
        "required": [ "disciplineDescriptor" ],
        "type": "object",
        "properties": {
          "disciplineDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "disciplineActionStaff": {
        "required": [ "staffReference" ],
        "type": "object",
        "properties": {
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          }
        }
      },
      "disciplineActionStudentDisciplineIncidentAssociation": {
        "required": [ "studentDisciplineIncidentAssociationReference" ],
        "type": "object",
        "properties": {
          "studentDisciplineIncidentAssociationReference": {
            "$ref": "#/components/schemas/studentDisciplineIncidentAssociationReference"
          }
        }
      },
      "disciplineIncident": {
        "required": [ "id", "incidentDate", "incidentIdentifier", "schoolReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "incidentIdentifier": {
            "maxLength": 20,
            "type": "string",
            "description": "A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.",
            "x-Ed-Fi-isIdentity": true
          },
          "schoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          },
          "behaviors": {
            "type": "array",
            "description": "An unordered collection of disciplineIncidentBehaviors. Describes behavior by category and provides a detailed description.",
            "items": {
              "$ref": "#/components/schemas/disciplineIncidentBehavior"
            }
          },
          "caseNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "The case number assigned to the DisciplineIncident by law enforcement or other organization."
          },
          "incidentCost": {
            "type": "number",
            "description": "The value of any quantifiable monetary loss directly resulting from the DisciplineIncident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.",
            "format": "double"
          },
          "incidentDate": {
            "type": "string",
            "description": "The month, day, and year on which the DisciplineIncident occurred.",
            "format": "date"
          },
          "incidentDescription": {
            "maxLength": 1024,
            "type": "string",
            "description": "The description for an incident."
          },
          "incidentLocationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Identifies where the DisciplineIncident occurred and whether or not it occurred on school, for example:          On school          Administrative offices area          Cafeteria area          Classroom          Hallway or stairs          ..."
          },
          "incidentTime": {
            "type": "string",
            "description": "An indication of the time of day the incident took place."
          },
          "reportedToLawEnforcement": {
            "type": "boolean",
            "description": "Indicator of whether the incident was reported to law enforcement."
          },
          "reporterDescriptionDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Information on the type of individual who reported the DisciplineIncident. When known and/or if useful, use a more specific option code (e.g., \"Counselor\" rather than \"Professional Staff\"); for example:          Student          Parent/guardian          Law enforcement officer          Nonschool personnel          Representative of visiting school          ..."
          },
          "reporterName": {
            "maxLength": 75,
            "type": "string",
            "description": "Identifies the reporter of the DisciplineIncident by name."
          },
          "weapons": {
            "type": "array",
            "description": "An unordered collection of disciplineIncidentWeapons. Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.",
            "items": {
              "$ref": "#/components/schemas/disciplineIncidentWeapon"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "disciplineIncidentBehavior": {
        "required": [ "behaviorDescriptor" ],
        "type": "object",
        "properties": {
          "behaviorDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Describes behavior by category and provides a detailed description.",
            "x-Ed-Fi-isIdentity": true
          },
          "behaviorDetailedDescription": {
            "maxLength": 1024,
            "type": "string",
            "description": "Specifies a more granular level of detail of a behavior involved in the incident."
          }
        }
      },
      "disciplineIncidentReference": {
        "required": [ "incidentIdentifier", "schoolId" ],
        "type": "object",
        "properties": {
          "incidentIdentifier": {
            "maxLength": 20,
            "type": "string",
            "description": "A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders."
          },
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "disciplineIncidentWeapon": {
        "required": [ "weaponDescriptor" ],
        "type": "object",
        "properties": {
          "weaponDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "educationContent": {
        "required": [ "contentIdentifier", "id", "namespace" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "contentIdentifier": {
            "maxLength": 225,
            "type": "string",
            "description": "A unique identifier for the EducationContent.",
            "x-Ed-Fi-isIdentity": true
          },
          "learningStandardReference": {
            "$ref": "#/components/schemas/learningStandardReference"
          },
          "additionalAuthorsIndicator": {
            "type": "boolean",
            "description": "Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation \"et al\"."
          },
          "appropriateGradeLevels": {
            "type": "array",
            "description": "An unordered collection of educationContentAppropriateGradeLevels. Grade levels for which this education content is applicable-if omitted, considered generally applicable.",
            "items": {
              "$ref": "#/components/schemas/educationContentAppropriateGradeLevel"
            }
          },
          "appropriateSexes": {
            "type": "array",
            "description": "An unordered collection of educationContentAppropriateSexes. Sexes for which this education content is applicable. If omitted, considered generally applicable.",
            "items": {
              "$ref": "#/components/schemas/educationContentAppropriateSex"
            }
          },
          "authors": {
            "type": "array",
            "description": "An unordered collection of educationContentAuthors. The individual credited with the creation of the resource.",
            "items": {
              "$ref": "#/components/schemas/educationContentAuthor"
            }
          },
          "contentClassDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The predominate type or kind characterizing the learning resource."
          },
          "cost": {
            "type": "number",
            "description": "An amount that has to be paid or spent to buy or obtain the EducationContent.",
            "format": "double"
          },
          "costRateDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The rate by which the cost applies."
          },
          "derivativeSourceEducationContents": {
            "type": "array",
            "description": "An unordered collection of educationContentDerivativeSourceEducationContents. Relates the education content source to the education content.",
            "items": {
              "$ref": "#/components/schemas/educationContentDerivativeSourceEducationContent"
            }
          },
          "derivativeSourceLearningResourceMetadataURIs": {
            "type": "array",
            "description": "An unordered collection of educationContentDerivativeSourceLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.",
            "items": {
              "$ref": "#/components/schemas/educationContentDerivativeSourceLearningResourceMetadataURI"
            }
          },
          "derivativeSourceURIs": {
            "type": "array",
            "description": "An unordered collection of educationContentDerivativeSourceURIs. The URI (typical a URL) pointing to an education content item.",
            "items": {
              "$ref": "#/components/schemas/educationContentDerivativeSourceURI"
            }
          },
          "description": {
            "maxLength": 1024,
            "type": "string",
            "description": "An extended written representation of the education content."
          },
          "interactivityStyleDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed."
          },
          "languages": {
            "type": "array",
            "description": "An unordered collection of educationContentLanguages. An indication of the languages in which the Education Content is designed.",
            "items": {
              "$ref": "#/components/schemas/educationContentLanguage"
            }
          },
          "learningResourceMetadataURI": {
            "maxLength": 255,
            "type": "string",
            "description": "The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item."
          },
          "namespace": {
            "maxLength": 255,
            "type": "string",
            "description": "Namespace for the EducationContent."
          },
          "publicationDate": {
            "type": "string",
            "description": "The date on which this content was first published.",
            "format": "date"
          },
          "publicationYear": {
            "type": "integer",
            "description": "The year at which this content was first published.",
            "format": "int32"
          },
          "publisher": {
            "maxLength": 50,
            "type": "string",
            "description": "The organization credited with publishing the resource."
          },
          "shortDescription": {
            "maxLength": 75,
            "type": "string",
            "description": "A short description or name of the entity."
          },
          "timeRequired": {
            "maxLength": 30,
            "type": "string",
            "description": "Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience."
          },
          "useRightsURL": {
            "maxLength": 255,
            "type": "string",
            "description": "The URL where the owner specifies permissions for using the resource."
          },
          "version": {
            "maxLength": 10,
            "type": "string",
            "description": "The version identifier for the content."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "educationContentAppropriateGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Grade levels for which this education content is applicable-if omitted, considered generally applicable.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "educationContentAppropriateSex": {
        "required": [ "sexDescriptor" ],
        "type": "object",
        "properties": {
          "sexDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Sexes for which this education content is applicable. If omitted, considered generally applicable.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "educationContentAuthor": {
        "required": [ "author" ],
        "type": "object",
        "properties": {
          "author": {
            "maxLength": 100,
            "type": "string",
            "description": "The individual credited with the creation of the resource.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "educationContentDerivativeSourceEducationContent": {
        "required": [ "derivativeSourceEducationContentReference" ],
        "type": "object",
        "properties": {
          "derivativeSourceEducationContentReference": {
            "$ref": "#/components/schemas/educationContentReference"
          }
        }
      },
      "educationContentDerivativeSourceLearningResourceMetadataURI": {
        "required": [ "derivativeSourceLearningResourceMetadataURI" ],
        "type": "object",
        "properties": {
          "derivativeSourceLearningResourceMetadataURI": {
            "maxLength": 255,
            "type": "string",
            "description": "The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "educationContentDerivativeSourceURI": {
        "required": [ "derivativeSourceURI" ],
        "type": "object",
        "properties": {
          "derivativeSourceURI": {
            "maxLength": 255,
            "type": "string",
            "description": "The URI (typical a URL) pointing to an education content item.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "educationContentLanguage": {
        "required": [ "languageDescriptor" ],
        "type": "object",
        "properties": {
          "languageDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indication of the languages in which the Education Content is designed.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "educationContentReference": {
        "required": [ "contentIdentifier" ],
        "type": "object",
        "properties": {
          "contentIdentifier": {
            "maxLength": 225,
            "type": "string",
            "description": "A unique identifier for the EducationContent."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "educationOrganizationAddress": {
        "required": [ "addressTypeDescriptor", "city", "postalCode", "stateAbbreviationDescriptor", "streetNumberName" ],
        "type": "object",
        "properties": {
          "addressTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)",
            "x-Ed-Fi-isIdentity": true
          },
          "localeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban)."
          },
          "stateAbbreviationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The abbreviation for the state (within the United States) or outlying area in which an address is located."
          },
          "apartmentRoomSuiteNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The apartment, room, or suite number of an address."
          },
          "buildingSiteNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "The number of the building on the site, if more than one building shares the same address."
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of the city in which an address is located."
          },
          "congressionalDistrict": {
            "maxLength": 30,
            "type": "string",
            "description": "The congressional district in which an address is located."
          },
          "countyFIPSCode": {
            "maxLength": 5,
            "type": "string",
            "description": "The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code."
          },
          "doNotPublishIndicator": {
            "type": "boolean",
            "description": "An indication that the address should not be published."
          },
          "latitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic latitude of the physical address."
          },
          "longitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic longitude of the physical address."
          },
          "nameOfCounty": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located."
          },
          "postalCode": {
            "maxLength": 17,
            "type": "string",
            "description": "The five or nine digit zip code or overseas postal code portion of an address."
          },
          "streetNumberName": {
            "maxLength": 150,
            "type": "string",
            "description": "The street number and street name or post office box number of an address."
          },
          "periods": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationAddressPeriods. The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationAddressPeriod"
            }
          }
        }
      },
      "educationOrganizationAddressPeriod": {
        "required": [ "beginDate" ],
        "type": "object",
        "properties": {
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year for the start of the period.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year for the end of the period.",
            "format": "date"
          }
        }
      },
      "educationOrganizationCategory": {
        "required": [ "educationOrganizationCategoryDescriptor" ],
        "type": "object",
        "properties": {
          "educationOrganizationCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "educationOrganizationIdentificationCode": {
        "required": [ "educationOrganizationIdentificationSystemDescriptor", "identificationCode" ],
        "type": "object",
        "properties": {
          "educationOrganizationIdentificationSystemDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The school system, state, or agency assigning the identification code.",
            "x-Ed-Fi-isIdentity": true
          },
          "identificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity."
          }
        }
      },
      "educationOrganizationInstitutionTelephone": {
        "required": [ "institutionTelephoneNumberTypeDescriptor", "telephoneNumber" ],
        "type": "object",
        "properties": {
          "institutionTelephoneNumberTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of communication number listed for an individual or organization.",
            "x-Ed-Fi-isIdentity": true
          },
          "telephoneNumber": {
            "maxLength": 24,
            "type": "string",
            "description": "The telephone number including the area code, and extension, if applicable."
          }
        }
      },
      "educationOrganizationInternationalAddress": {
        "required": [ "addressLine1", "addressTypeDescriptor", "countryDescriptor" ],
        "type": "object",
        "properties": {
          "addressTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)",
            "x-Ed-Fi-isIdentity": true
          },
          "countryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes."
          },
          "addressLine1": {
            "maxLength": 150,
            "type": "string",
            "description": "The first line of the address."
          },
          "addressLine2": {
            "maxLength": 150,
            "type": "string",
            "description": "The second line of the address."
          },
          "addressLine3": {
            "maxLength": 150,
            "type": "string",
            "description": "The third line of the address."
          },
          "addressLine4": {
            "maxLength": 150,
            "type": "string",
            "description": "The fourth line of the address."
          },
          "beginDate": {
            "type": "string",
            "description": "The first date the address is valid. For physical addresses, the date the person moved to that address.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The last date the address is valid. For physical addresses, this would be the date the person moved from that address.",
            "format": "date"
          },
          "latitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic latitude of the physical address."
          },
          "longitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic longitude of the physical address."
          }
        }
      },
      "educationOrganizationInterventionPrescriptionAssociation": {
        "required": [ "educationOrganizationReference", "id", "interventionPrescriptionReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "interventionPrescriptionReference": {
            "$ref": "#/components/schemas/interventionPrescriptionReference"
          },
          "beginDate": {
            "type": "string",
            "description": "The begin date of the period during which the InterventionPrescription is available.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the period during which the InterventionPrescription is available.",
            "format": "date"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "educationOrganizationNetwork": {
        "required": [ "addresses", "categories", "educationOrganizationNetworkId", "id", "nameOfInstitution", "networkPurposeDescriptor" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationAddresses. The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationAddress"
            }
          },
          "categories": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationCategory"
            }
          },
          "educationOrganizationNetworkId": {
            "type": "integer",
            "description": "The identifier assigned to a network of education organizations.",
            "format": "int32",
            "x-Ed-Fi-isIdentity": true
          },
          "identificationCodes": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationIdentificationCode"
            }
          },
          "institutionTelephones": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInstitutionTelephone"
            }
          },
          "internationalAddresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInternationalAddress"
            }
          },
          "nameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "The full, legally accepted name of the institution."
          },
          "networkPurposeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The purpose(s) of the network (e.g., shared services, collective procurement)."
          },
          "operationalStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The current operational status of the EducationOrganization (e.g., active, inactive)."
          },
          "shortNameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "A short name for the institution."
          },
          "webSite": {
            "maxLength": 255,
            "type": "string",
            "description": "The public web site address (URL) for the EducationOrganization."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "educationOrganizationNetworkAssociation": {
        "required": [ "educationOrganizationNetworkReference", "id", "memberEducationOrganizationReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "educationOrganizationNetworkReference": {
            "$ref": "#/components/schemas/educationOrganizationNetworkReference"
          },
          "memberEducationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "beginDate": {
            "type": "string",
            "description": "The date on which the EducationOrganization joined this network.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The date on which the EducationOrganization left this network.",
            "format": "date"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "educationOrganizationNetworkReference": {
        "required": [ "educationOrganizationNetworkId" ],
        "type": "object",
        "properties": {
          "educationOrganizationNetworkId": {
            "type": "integer",
            "description": "The identifier assigned to a network of education organizations.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "educationOrganizationPeerAssociation": {
        "required": [ "educationOrganizationReference", "id", "peerEducationOrganizationReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "peerEducationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "educationOrganizationReference": {
        "required": [ "educationOrganizationId" ],
        "type": "object",
        "properties": {
          "educationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "educationServiceCenter": {
        "required": [ "addresses", "categories", "educationServiceCenterId", "id", "nameOfInstitution" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationAddresses. The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationAddress"
            }
          },
          "categories": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationCategory"
            }
          },
          "educationServiceCenterId": {
            "type": "integer",
            "description": "The identifier assigned to an education service center.",
            "format": "int32",
            "x-Ed-Fi-isIdentity": true
          },
          "stateEducationAgencyReference": {
            "$ref": "#/components/schemas/stateEducationAgencyReference"
          },
          "identificationCodes": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationIdentificationCode"
            }
          },
          "institutionTelephones": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInstitutionTelephone"
            }
          },
          "internationalAddresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInternationalAddress"
            }
          },
          "nameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "The full, legally accepted name of the institution."
          },
          "operationalStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The current operational status of the EducationOrganization (e.g., active, inactive)."
          },
          "shortNameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "A short name for the institution."
          },
          "webSite": {
            "maxLength": 255,
            "type": "string",
            "description": "The public web site address (URL) for the EducationOrganization."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "educationServiceCenterReference": {
        "required": [ "educationServiceCenterId" ],
        "type": "object",
        "properties": {
          "educationServiceCenterId": {
            "type": "integer",
            "description": "The identifier assigned to an education service center.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "feederSchoolAssociation": {
        "required": [ "beginDate", "feederSchoolReference", "id", "schoolReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year of the first day of the feeder school association.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "feederSchoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "schoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year of the last day of the feeder school association.",
            "format": "date"
          },
          "feederRelationshipDescription": {
            "maxLength": 1024,
            "type": "string",
            "description": "Describes the relationship from the feeder school to the receiving school, for example by program emphasis, such as special education, language immersion, science, or performing art."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "generalStudentProgramAssociationReference": {
        "required": [ "beginDate", "educationOrganizationId", "programEducationOrganizationId", "programName", "programTypeDescriptor", "studentUniqueId" ],
        "type": "object",
        "properties": {
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student first received services.",
            "format": "date"
          },
          "educationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "programEducationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "programName": {
            "maxLength": 60,
            "type": "string",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies."
          },
          "programTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of program."
          },
          "studentUniqueId": {
            "maxLength": 32,
            "type": "string",
            "description": "A unique alphanumeric code assigned to a student."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "grade": {
        "required": [ "gradeTypeDescriptor", "gradingPeriodReference", "id", "studentSectionAssociationReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "gradeTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of grade reported (e.g., Exam, Final, Grading Period).",
            "x-Ed-Fi-isIdentity": true
          },
          "gradingPeriodReference": {
            "$ref": "#/components/schemas/gradingPeriodReference"
          },
          "studentSectionAssociationReference": {
            "$ref": "#/components/schemas/studentSectionAssociationReference"
          },
          "diagnosticStatement": {
            "maxLength": 1024,
            "type": "string",
            "description": "A statement provided by the teacher that provides information in addition to the grade or assessment score."
          },
          "letterGradeEarned": {
            "maxLength": 20,
            "type": "string",
            "description": "A final or interim (grading period) indicator of student performance in a class as submitted by the instructor."
          },
          "numericGradeEarned": {
            "type": "number",
            "description": "A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.",
            "format": "double"
          },
          "performanceBaseConversionDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A conversion of the level to a standard set of performance levels."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "gradebookEntry": {
        "required": [ "dateAssigned", "gradebookEntryTitle", "id", "sectionReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "dateAssigned": {
            "type": "string",
            "description": "The date the assignment, homework, or assessment was assigned or executed.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "gradebookEntryTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The name or title of the activity to be recorded in the GradebookEntry.",
            "x-Ed-Fi-isIdentity": true
          },
          "gradingPeriodReference": {
            "$ref": "#/components/schemas/gradingPeriodReference"
          },
          "sectionReference": {
            "$ref": "#/components/schemas/sectionReference"
          },
          "description": {
            "maxLength": 1024,
            "type": "string",
            "description": "A description of the assignment, homework, or classroom assessment."
          },
          "gradebookEntryTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of the GradebookEntry; for example, homework, assignment, quiz, unit test, oral presentation, etc."
          },
          "learningObjectives": {
            "type": "array",
            "description": "An unordered collection of gradebookEntryLearningObjectives. LearningObjectives associated with the GradebookEntry.",
            "items": {
              "$ref": "#/components/schemas/gradebookEntryLearningObjective"
            }
          },
          "learningStandards": {
            "type": "array",
            "description": "An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the GradebookEntry.",
            "items": {
              "$ref": "#/components/schemas/gradebookEntryLearningStandard"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "gradebookEntryLearningObjective": {
        "required": [ "learningObjectiveReference" ],
        "type": "object",
        "properties": {
          "learningObjectiveReference": {
            "$ref": "#/components/schemas/learningObjectiveReference"
          }
        }
      },
      "gradebookEntryLearningStandard": {
        "required": [ "learningStandardReference" ],
        "type": "object",
        "properties": {
          "learningStandardReference": {
            "$ref": "#/components/schemas/learningStandardReference"
          }
        }
      },
      "gradebookEntryReference": {
        "required": [ "dateAssigned", "gradebookEntryTitle", "localCourseCode", "schoolId", "schoolYear", "sectionIdentifier", "sessionName" ],
        "type": "object",
        "properties": {
          "dateAssigned": {
            "type": "string",
            "description": "The date the assignment, homework, or assessment was assigned or executed.",
            "format": "date"
          },
          "gradebookEntryTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The name or title of the activity to be recorded in the GradebookEntry."
          },
          "localCourseCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students."
          },
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "schoolYear": {
            "type": "integer",
            "description": "The identifier for the school year.",
            "format": "int32"
          },
          "sectionIdentifier": {
            "maxLength": 255,
            "type": "string",
            "description": "The local identifier assigned to a section."
          },
          "sessionName": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer)."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "gradeReference": {
        "required": [ "beginDate", "gradeTypeDescriptor", "gradingPeriodDescriptor", "gradingPeriodSchoolYear", "gradingPeriodSequence", "localCourseCode", "schoolId", "schoolYear", "sectionIdentifier", "sessionName", "studentUniqueId" ],
        "type": "object",
        "properties": {
          "beginDate": {
            "type": "string",
            "description": "Month, day, and year of the Student's entry or assignment to the Section.",
            "format": "date"
          },
          "gradeTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of grade reported (e.g., Exam, Final, Grading Period)."
          },
          "gradingPeriodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The name of the period for which grades are reported."
          },
          "gradingPeriodSchoolYear": {
            "type": "integer",
            "description": "The identifier for the grading period school year.",
            "format": "int32"
          },
          "gradingPeriodSequence": {
            "type": "integer",
            "description": "The sequential order of this period relative to other periods.",
            "format": "int32"
          },
          "localCourseCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students."
          },
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "schoolYear": {
            "type": "integer",
            "description": "The identifier for the school year.",
            "format": "int32"
          },
          "sectionIdentifier": {
            "maxLength": 255,
            "type": "string",
            "description": "The local identifier assigned to a section."
          },
          "sessionName": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer)."
          },
          "studentUniqueId": {
            "maxLength": 32,
            "type": "string",
            "description": "A unique alphanumeric code assigned to a student."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "gradingPeriod": {
        "required": [ "beginDate", "endDate", "gradingPeriodDescriptor", "id", "periodSequence", "schoolReference", "schoolYearTypeReference", "totalInstructionalDays" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "gradingPeriodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The name of the period for which grades are reported.",
            "x-Ed-Fi-isIdentity": true
          },
          "periodSequence": {
            "type": "integer",
            "description": "The sequential order of this period relative to other periods.",
            "format": "int32",
            "x-Ed-Fi-isIdentity": true
          },
          "schoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "schoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          },
          "beginDate": {
            "type": "string",
            "description": "Month, day, and year of the first day of the GradingPeriod.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "Month, day, and year of the last day of the GradingPeriod.",
            "format": "date"
          },
          "totalInstructionalDays": {
            "type": "integer",
            "description": "Total days available for educational instruction during the GradingPeriod.",
            "format": "int32"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "gradingPeriodReference": {
        "required": [ "gradingPeriodDescriptor", "periodSequence", "schoolId", "schoolYear" ],
        "type": "object",
        "properties": {
          "gradingPeriodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The name of the period for which grades are reported."
          },
          "periodSequence": {
            "type": "integer",
            "description": "The sequential order of this period relative to other periods.",
            "format": "int32"
          },
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "schoolYear": {
            "type": "integer",
            "description": "The identifier for the grading period school year.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "graduationPlan": {
        "required": [ "educationOrganizationReference", "graduationPlanTypeDescriptor", "graduationSchoolYearTypeReference", "id", "totalRequiredCredits" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "graduationPlanTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "graduationSchoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          },
          "creditsByCourses": {
            "type": "array",
            "description": "An unordered collection of graduationPlanCreditsByCourses. The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.",
            "items": {
              "$ref": "#/components/schemas/graduationPlanCreditsByCourse"
            }
          },
          "creditsBySubjects": {
            "type": "array",
            "description": "An unordered collection of graduationPlanCreditsBySubjects. The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.",
            "items": {
              "$ref": "#/components/schemas/graduationPlanCreditsBySubject"
            }
          },
          "individualPlan": {
            "type": "boolean",
            "description": "An indicator of whether the GraduationPlan is tailored for an individual."
          },
          "requiredAssessments": {
            "type": "array",
            "description": "An unordered collection of graduationPlanRequiredAssessments. The assessments and associated required score and performance level needed to satisfy graduation requirements.",
            "items": {
              "$ref": "#/components/schemas/graduationPlanRequiredAssessment"
            }
          },
          "totalRequiredCreditConversion": {
            "type": "number",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "format": "double"
          },
          "totalRequiredCredits": {
            "type": "number",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "format": "double"
          },
          "totalRequiredCreditTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of credits or units of value awarded for the completion of a course."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "graduationPlanCreditsByCourse": {
        "required": [ "courseSetName", "courses", "credits" ],
        "type": "object",
        "properties": {
          "courseSetName": {
            "maxLength": 120,
            "type": "string",
            "description": "Identifying name given to a collection of courses.",
            "x-Ed-Fi-isIdentity": true
          },
          "creditTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of credits or units of value awarded for the completion of a course."
          },
          "whenTakenGradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade level when the student is planned to take the course."
          },
          "creditConversion": {
            "type": "number",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "format": "double"
          },
          "credits": {
            "type": "number",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "format": "double"
          },
          "courses": {
            "type": "array",
            "description": "An unordered collection of graduationPlanCreditsByCourseCourses. The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students.",
            "items": {
              "$ref": "#/components/schemas/graduationPlanCreditsByCourseCourse"
            }
          }
        }
      },
      "graduationPlanCreditsByCourseCourse": {
        "required": [ "courseReference" ],
        "type": "object",
        "properties": {
          "courseReference": {
            "$ref": "#/components/schemas/courseReference"
          }
        }
      },
      "graduationPlanCreditsBySubject": {
        "required": [ "academicSubjectDescriptor", "credits" ],
        "type": "object",
        "properties": {
          "academicSubjectDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The intended major subject area of the graduation requirement.",
            "x-Ed-Fi-isIdentity": true
          },
          "creditTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of credits or units of value awarded for the completion of a course."
          },
          "creditConversion": {
            "type": "number",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "format": "double"
          },
          "credits": {
            "type": "number",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "format": "double"
          }
        }
      },
      "graduationPlanReference": {
        "required": [ "educationOrganizationId", "graduationPlanTypeDescriptor", "graduationSchoolYear" ],
        "type": "object",
        "properties": {
          "educationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "graduationPlanTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard."
          },
          "graduationSchoolYear": {
            "type": "integer",
            "description": "The school year the student is expected to graduate.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "graduationPlanRequiredAssessment": {
        "required": [ "assessmentReference" ],
        "type": "object",
        "properties": {
          "assessmentReference": {
            "$ref": "#/components/schemas/assessmentReference"
          },
          "scores": {
            "type": "array",
            "description": "An unordered collection of graduationPlanRequiredAssessmentScores. Score required to be met or exceeded.",
            "items": {
              "$ref": "#/components/schemas/graduationPlanRequiredAssessmentScore"
            }
          },
          "performanceLevel": {
            "$ref": "#/components/schemas/graduationPlanRequiredAssessmentPerformanceLevel"
          }
        }
      },
      "graduationPlanRequiredAssessmentPerformanceLevel": {
        "required": [ "assessmentReportingMethodDescriptor", "performanceLevelDescriptor" ],
        "type": "object",
        "properties": {
          "assessmentReportingMethodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used."
          },
          "performanceLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The performance level(s) defined for the assessment."
          },
          "resultDatatypeTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The datatype of the result. The results can be expressed as a number, percentile, range, level, etc."
          },
          "maximumScore": {
            "maxLength": 35,
            "type": "string",
            "description": "The maximum score to make the indicated level of performance."
          },
          "minimumScore": {
            "maxLength": 35,
            "type": "string",
            "description": "The minimum score required to make the indicated level of performance."
          }
        }
      },
      "graduationPlanRequiredAssessmentScore": {
        "required": [ "assessmentReportingMethodDescriptor" ],
        "type": "object",
        "properties": {
          "assessmentReportingMethodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.",
            "x-Ed-Fi-isIdentity": true
          },
          "resultDatatypeTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The datatype of the result. The results can be expressed as a number, percentile, range, level, etc."
          },
          "maximumScore": {
            "maxLength": 35,
            "type": "string",
            "description": "The maximum score possible on the assessment."
          },
          "minimumScore": {
            "maxLength": 35,
            "type": "string",
            "description": "The minimum score possible on the assessment."
          }
        }
      },
      "intervention": {
        "required": [ "beginDate", "deliveryMethodDescriptor", "educationOrganizationReference", "id", "interventionClassDescriptor", "interventionIdentificationCode" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "interventionIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to an intervention.",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "appropriateGradeLevels": {
            "type": "array",
            "description": "An unordered collection of interventionAppropriateGradeLevels. Grade levels for the Intervention-if omitted, considered generally applicable.",
            "items": {
              "$ref": "#/components/schemas/interventionAppropriateGradeLevel"
            }
          },
          "appropriateSexes": {
            "type": "array",
            "description": "An unordered collection of interventionAppropriateSexes. Sexes for the Intervention. If omitted, considered generally applicable.",
            "items": {
              "$ref": "#/components/schemas/interventionAppropriateSex"
            }
          },
          "beginDate": {
            "type": "string",
            "description": "The start date for the intervention implementation.",
            "format": "date"
          },
          "deliveryMethodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The way in which an intervention was implemented: individual, small group, whole class, or whole school."
          },
          "diagnoses": {
            "type": "array",
            "description": "An unordered collection of interventionDiagnoses. Targeted purpose of the Intervention (e.g., attendance issue, dropout risk).",
            "items": {
              "$ref": "#/components/schemas/interventionDiagnosis"
            }
          },
          "educationContents": {
            "type": "array",
            "description": "An unordered collection of interventionEducationContents. Relates the education content source to the education content.",
            "items": {
              "$ref": "#/components/schemas/interventionEducationContent"
            }
          },
          "endDate": {
            "type": "string",
            "description": "The end date for the intervention implementation.",
            "format": "date"
          },
          "interventionClassDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The way in which an intervention is used: curriculum, supplement, or practice."
          },
          "interventionPrescriptions": {
            "type": "array",
            "description": "An unordered collection of interventionInterventionPrescriptions. The reference to the intervention prescription being followed in this intervention implementation.",
            "items": {
              "$ref": "#/components/schemas/interventionInterventionPrescription"
            }
          },
          "learningResourceMetadataURIs": {
            "type": "array",
            "description": "An unordered collection of interventionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.",
            "items": {
              "$ref": "#/components/schemas/interventionLearningResourceMetadataURI"
            }
          },
          "maxDosage": {
            "type": "integer",
            "description": "The maximum duration of time in minutes that may be assigned for the intervention.",
            "format": "int32"
          },
          "meetingTimes": {
            "type": "array",
            "description": "An unordered collection of interventionMeetingTimes. The times at which this intervention is scheduled to meet.",
            "items": {
              "$ref": "#/components/schemas/interventionMeetingTime"
            }
          },
          "minDosage": {
            "type": "integer",
            "description": "The minimum duration of time in minutes that may be assigned for the intervention.",
            "format": "int32"
          },
          "populationServeds": {
            "type": "array",
            "description": "An unordered collection of interventionPopulationServeds. A subset of students that are the focus of the Intervention.",
            "items": {
              "$ref": "#/components/schemas/interventionPopulationServed"
            }
          },
          "staffs": {
            "type": "array",
            "description": "An unordered collection of interventionStaffs. Relates the staff member associated with the Intervention.",
            "items": {
              "$ref": "#/components/schemas/interventionStaff"
            }
          },
          "uris": {
            "type": "array",
            "description": "An unordered collection of interventionURIs. The URI (typical a URL) pointing to an education content item.",
            "items": {
              "$ref": "#/components/schemas/interventionURI"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "interventionAppropriateGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Grade levels for the Intervention-if omitted, considered generally applicable.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionAppropriateSex": {
        "required": [ "sexDescriptor" ],
        "type": "object",
        "properties": {
          "sexDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Sexes for the Intervention. If omitted, considered generally applicable.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionDiagnosis": {
        "required": [ "diagnosisDescriptor" ],
        "type": "object",
        "properties": {
          "diagnosisDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Targeted purpose of the Intervention (e.g., attendance issue, dropout risk).",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionEducationContent": {
        "required": [ "educationContentReference" ],
        "type": "object",
        "properties": {
          "educationContentReference": {
            "$ref": "#/components/schemas/educationContentReference"
          }
        }
      },
      "interventionInterventionPrescription": {
        "required": [ "interventionPrescriptionReference" ],
        "type": "object",
        "properties": {
          "interventionPrescriptionReference": {
            "$ref": "#/components/schemas/interventionPrescriptionReference"
          }
        }
      },
      "interventionLearningResourceMetadataURI": {
        "required": [ "learningResourceMetadataURI" ],
        "type": "object",
        "properties": {
          "learningResourceMetadataURI": {
            "maxLength": 255,
            "type": "string",
            "description": "The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionMeetingTime": {
        "required": [ "endTime", "startTime" ],
        "type": "object",
        "properties": {
          "endTime": {
            "type": "string",
            "description": "An indication of the time of day the meeting time ends.",
            "x-Ed-Fi-isIdentity": true
          },
          "startTime": {
            "type": "string",
            "description": "An indication of the time of day the meeting time begins.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionPopulationServed": {
        "required": [ "populationServedDescriptor" ],
        "type": "object",
        "properties": {
          "populationServedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A subset of students that are the focus of the Intervention.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionPrescription": {
        "required": [ "deliveryMethodDescriptor", "educationOrganizationReference", "id", "interventionClassDescriptor", "interventionPrescriptionIdentificationCode" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "interventionPrescriptionIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to an intervention prescription.",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "appropriateGradeLevels": {
            "type": "array",
            "description": "An unordered collection of interventionPrescriptionAppropriateGradeLevels. Grade levels for the prescribed intervention. If omitted, considered generally applicable.",
            "items": {
              "$ref": "#/components/schemas/interventionPrescriptionAppropriateGradeLevel"
            }
          },
          "appropriateSexes": {
            "type": "array",
            "description": "An unordered collection of interventionPrescriptionAppropriateSexes. Sexes for the InterventionPrescription. If omitted, considered generally applicable.",
            "items": {
              "$ref": "#/components/schemas/interventionPrescriptionAppropriateSex"
            }
          },
          "deliveryMethodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The way in which an intervention was implemented: individual, small group, whole class, or whole school."
          },
          "diagnoses": {
            "type": "array",
            "description": "An unordered collection of interventionPrescriptionDiagnoses. Targeted purpose of the InterventionPrescription (e.g., attendance issue, dropout risk).",
            "items": {
              "$ref": "#/components/schemas/interventionPrescriptionDiagnosis"
            }
          },
          "educationContents": {
            "type": "array",
            "description": "An unordered collection of interventionPrescriptionEducationContents. Relates the education content source to the education content.",
            "items": {
              "$ref": "#/components/schemas/interventionPrescriptionEducationContent"
            }
          },
          "interventionClassDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The way in which an intervention is used: curriculum, supplement, or practice."
          },
          "learningResourceMetadataURIs": {
            "type": "array",
            "description": "An unordered collection of interventionPrescriptionLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.",
            "items": {
              "$ref": "#/components/schemas/interventionPrescriptionLearningResourceMetadataURI"
            }
          },
          "maxDosage": {
            "type": "integer",
            "description": "The maximum duration of time in minutes that is recommended for the intervention.",
            "format": "int32"
          },
          "minDosage": {
            "type": "integer",
            "description": "The minimum duration of time in minutes that is recommended for the intervention.",
            "format": "int32"
          },
          "populationServeds": {
            "type": "array",
            "description": "An unordered collection of interventionPrescriptionPopulationServeds. A subset of students that are the focus of the InterventionPrescription.",
            "items": {
              "$ref": "#/components/schemas/interventionPrescriptionPopulationServed"
            }
          },
          "uris": {
            "type": "array",
            "description": "An unordered collection of interventionPrescriptionURIs. The URI (typical a URL) pointing to an education content item.",
            "items": {
              "$ref": "#/components/schemas/interventionPrescriptionURI"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "interventionPrescriptionAppropriateGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Grade levels for the prescribed intervention. If omitted, considered generally applicable.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionPrescriptionAppropriateSex": {
        "required": [ "sexDescriptor" ],
        "type": "object",
        "properties": {
          "sexDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Sexes for the InterventionPrescription. If omitted, considered generally applicable.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionPrescriptionDiagnosis": {
        "required": [ "diagnosisDescriptor" ],
        "type": "object",
        "properties": {
          "diagnosisDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Targeted purpose of the InterventionPrescription (e.g., attendance issue, dropout risk).",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionPrescriptionEducationContent": {
        "required": [ "educationContentReference" ],
        "type": "object",
        "properties": {
          "educationContentReference": {
            "$ref": "#/components/schemas/educationContentReference"
          }
        }
      },
      "interventionPrescriptionLearningResourceMetadataURI": {
        "required": [ "learningResourceMetadataURI" ],
        "type": "object",
        "properties": {
          "learningResourceMetadataURI": {
            "maxLength": 255,
            "type": "string",
            "description": "The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionPrescriptionPopulationServed": {
        "required": [ "populationServedDescriptor" ],
        "type": "object",
        "properties": {
          "populationServedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A subset of students that are the focus of the InterventionPrescription.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionPrescriptionReference": {
        "required": [ "educationOrganizationId", "interventionPrescriptionIdentificationCode" ],
        "type": "object",
        "properties": {
          "educationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "interventionPrescriptionIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to an intervention prescription."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "interventionPrescriptionURI": {
        "required": [ "uri" ],
        "type": "object",
        "properties": {
          "uri": {
            "maxLength": 255,
            "type": "string",
            "description": "The URI (typical a URL) pointing to an education content item.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionReference": {
        "required": [ "educationOrganizationId", "interventionIdentificationCode" ],
        "type": "object",
        "properties": {
          "educationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "interventionIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to an intervention."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "interventionStaff": {
        "required": [ "staffReference" ],
        "type": "object",
        "properties": {
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          }
        }
      },
      "interventionStudy": {
        "required": [ "deliveryMethodDescriptor", "educationOrganizationReference", "id", "interventionClassDescriptor", "interventionPrescriptionReference", "interventionStudyIdentificationCode", "participants" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "interventionStudyIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to an intervention study.",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "interventionPrescriptionReference": {
            "$ref": "#/components/schemas/interventionPrescriptionReference"
          },
          "appropriateGradeLevels": {
            "type": "array",
            "description": "An unordered collection of interventionStudyAppropriateGradeLevels. Grade levels participating in this study.",
            "items": {
              "$ref": "#/components/schemas/interventionStudyAppropriateGradeLevel"
            }
          },
          "appropriateSexes": {
            "type": "array",
            "description": "An unordered collection of interventionStudyAppropriateSexes. Sexes participating in this study. If omitted, considered generally applicable.",
            "items": {
              "$ref": "#/components/schemas/interventionStudyAppropriateSex"
            }
          },
          "deliveryMethodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The way in which an intervention was implemented: individual, small group, whole class, or whole school."
          },
          "educationContents": {
            "type": "array",
            "description": "An unordered collection of interventionStudyEducationContents. Relates the education content source to the education content.",
            "items": {
              "$ref": "#/components/schemas/interventionStudyEducationContent"
            }
          },
          "interventionClassDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The way in which an intervention is used: curriculum, supplement, or practice."
          },
          "interventionEffectivenesses": {
            "type": "array",
            "description": "An unordered collection of interventionStudyInterventionEffectivenesses. Measurement of the effectiveness of the InterventionStudy per diagnosis.",
            "items": {
              "$ref": "#/components/schemas/interventionStudyInterventionEffectiveness"
            }
          },
          "learningResourceMetadataURIs": {
            "type": "array",
            "description": "An unordered collection of interventionStudyLearningResourceMetadataURIs. The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.",
            "items": {
              "$ref": "#/components/schemas/interventionStudyLearningResourceMetadataURI"
            }
          },
          "participants": {
            "type": "integer",
            "description": "The number of participants observed in the study.",
            "format": "int32"
          },
          "populationServeds": {
            "type": "array",
            "description": "An unordered collection of interventionStudyPopulationServeds. A subset of students that are the focus of the InterventionStudy.",
            "items": {
              "$ref": "#/components/schemas/interventionStudyPopulationServed"
            }
          },
          "stateAbbreviations": {
            "type": "array",
            "description": "An unordered collection of interventionStudyStateAbbreviations. The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.",
            "items": {
              "$ref": "#/components/schemas/interventionStudyStateAbbreviation"
            }
          },
          "uris": {
            "type": "array",
            "description": "An unordered collection of interventionStudyURIs. The URI (typical a URL) pointing to an education content item.",
            "items": {
              "$ref": "#/components/schemas/interventionStudyURI"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "interventionStudyAppropriateGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Grade levels participating in this study.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionStudyAppropriateSex": {
        "required": [ "sexDescriptor" ],
        "type": "object",
        "properties": {
          "sexDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Sexes participating in this study. If omitted, considered generally applicable.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionStudyEducationContent": {
        "required": [ "educationContentReference" ],
        "type": "object",
        "properties": {
          "educationContentReference": {
            "$ref": "#/components/schemas/educationContentReference"
          }
        }
      },
      "interventionStudyInterventionEffectiveness": {
        "required": [ "diagnosisDescriptor", "gradeLevelDescriptor", "interventionEffectivenessRatingDescriptor", "populationServedDescriptor" ],
        "type": "object",
        "properties": {
          "diagnosisDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.",
            "x-Ed-Fi-isIdentity": true
          },
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Grade level for which effectiveness is measured.",
            "x-Ed-Fi-isIdentity": true
          },
          "populationServedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Population for which effectiveness is measured.",
            "x-Ed-Fi-isIdentity": true
          },
          "interventionEffectivenessRatingDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects."
          },
          "improvementIndex": {
            "type": "integer",
            "description": "Along a percentile distribution of students, the improvement index represents the change in an average student's percentile rank that is considered to be due to the intervention.",
            "format": "int32"
          }
        }
      },
      "interventionStudyLearningResourceMetadataURI": {
        "required": [ "learningResourceMetadataURI" ],
        "type": "object",
        "properties": {
          "learningResourceMetadataURI": {
            "maxLength": 255,
            "type": "string",
            "description": "The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionStudyPopulationServed": {
        "required": [ "populationServedDescriptor" ],
        "type": "object",
        "properties": {
          "populationServedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A subset of students that are the focus of the InterventionStudy.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionStudyStateAbbreviation": {
        "required": [ "stateAbbreviationDescriptor" ],
        "type": "object",
        "properties": {
          "stateAbbreviationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionStudyURI": {
        "required": [ "uri" ],
        "type": "object",
        "properties": {
          "uri": {
            "maxLength": 255,
            "type": "string",
            "description": "The URI (typical a URL) pointing to an education content item.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "interventionURI": {
        "required": [ "uri" ],
        "type": "object",
        "properties": {
          "uri": {
            "maxLength": 255,
            "type": "string",
            "description": "The URI (typical a URL) pointing to an education content item.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "learningObjective": {
        "required": [ "academicSubjects", "id", "learningObjectiveId", "namespace", "objective" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "academicSubjects": {
            "type": "array",
            "description": "An unordered collection of learningObjectiveAcademicSubjects. The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.",
            "items": {
              "$ref": "#/components/schemas/learningObjectiveAcademicSubject"
            }
          },
          "learningObjectiveId": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).",
            "x-Ed-Fi-isIdentity": true
          },
          "namespace": {
            "maxLength": 255,
            "type": "string",
            "description": "Namespace for the LearningObjective.",
            "x-Ed-Fi-isIdentity": true
          },
          "parentLearningObjectiveReference": {
            "$ref": "#/components/schemas/learningObjectiveReference"
          },
          "contentStandard": {
            "$ref": "#/components/schemas/learningObjectiveContentStandard"
          },
          "description": {
            "maxLength": 1024,
            "type": "string",
            "description": "The description of the LearningObjective."
          },
          "gradeLevels": {
            "type": "array",
            "description": "An unordered collection of learningObjectiveGradeLevels. The grade level for which the LearningObjective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.",
            "items": {
              "$ref": "#/components/schemas/learningObjectiveGradeLevel"
            }
          },
          "learningStandards": {
            "type": "array",
            "description": "An unordered collection of learningObjectiveLearningStandards. LearningStandard(s) included in this objective.",
            "items": {
              "$ref": "#/components/schemas/learningObjectiveLearningStandard"
            }
          },
          "nomenclature": {
            "maxLength": 35,
            "type": "string",
            "description": "Reflects the specific nomenclature used for the LearningObjective."
          },
          "objective": {
            "maxLength": 60,
            "type": "string",
            "description": "The designated title of the LearningObjective."
          },
          "successCriteria": {
            "maxLength": 150,
            "type": "string",
            "description": "One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "learningObjectiveAcademicSubject": {
        "required": [ "academicSubjectDescriptor" ],
        "type": "object",
        "properties": {
          "academicSubjectDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "learningObjectiveContentStandard": {
        "required": [ "title" ],
        "type": "object",
        "properties": {
          "publicationStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown)."
          },
          "beginDate": {
            "type": "string",
            "description": "The beginning of the period during which this learning standard document is intended for use.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The end of the period during which this learning standard document is intended for use.",
            "format": "date"
          },
          "publicationDate": {
            "type": "string",
            "description": "The date on which this content was first published.",
            "format": "date"
          },
          "publicationYear": {
            "type": "integer",
            "description": "The year at which this content was first published.",
            "format": "int32"
          },
          "title": {
            "maxLength": 75,
            "type": "string",
            "description": "The name of the content standard, for example Common Core."
          },
          "uri": {
            "maxLength": 255,
            "type": "string",
            "description": "An unambiguous reference to the standards using a network-resolvable URI."
          },
          "version": {
            "maxLength": 50,
            "type": "string",
            "description": "The version identifier for the content."
          },
          "mandatingEducationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "authors": {
            "type": "array",
            "description": "An unordered collection of learningObjectiveContentStandardAuthors. The person or organization chiefly responsible for the intellectual content of the standard.",
            "items": {
              "$ref": "#/components/schemas/learningObjectiveContentStandardAuthor"
            }
          }
        }
      },
      "learningObjectiveContentStandardAuthor": {
        "required": [ "author" ],
        "type": "object",
        "properties": {
          "author": {
            "maxLength": 100,
            "type": "string",
            "description": "The person or organization chiefly responsible for the intellectual content of the standard.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "learningObjectiveGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade level for which the LearningObjective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "learningObjectiveLearningStandard": {
        "required": [ "learningStandardReference" ],
        "type": "object",
        "properties": {
          "learningStandardReference": {
            "$ref": "#/components/schemas/learningStandardReference"
          }
        }
      },
      "learningObjectiveReference": {
        "required": [ "learningObjectiveId", "namespace" ],
        "type": "object",
        "properties": {
          "learningObjectiveId": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A)."
          },
          "namespace": {
            "maxLength": 255,
            "type": "string",
            "description": "Namespace for the LearningObjective."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "learningStandard": {
        "required": [ "academicSubjects", "description", "gradeLevels", "id", "learningStandardId", "namespace" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "academicSubjects": {
            "type": "array",
            "description": "An unordered collection of learningStandardAcademicSubjects. Subject area for the LearningStandard.",
            "items": {
              "$ref": "#/components/schemas/learningStandardAcademicSubject"
            }
          },
          "gradeLevels": {
            "type": "array",
            "description": "An unordered collection of learningStandardGradeLevels. The grade levels for the specific learning standard.",
            "items": {
              "$ref": "#/components/schemas/learningStandardGradeLevel"
            }
          },
          "learningStandardId": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the specific learning standard (e.g., 111.15.3.1.A).",
            "x-Ed-Fi-isIdentity": true
          },
          "parentLearningStandardReference": {
            "$ref": "#/components/schemas/learningStandardReference"
          },
          "contentStandard": {
            "$ref": "#/components/schemas/learningStandardContentStandard"
          },
          "courseTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The official Course Title with which this learning standard is associated."
          },
          "description": {
            "maxLength": 1024,
            "type": "string",
            "description": "The text of the statement. The textual content that either describes a specific competency such as \"Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions.\" or describes a less granular group of competencies within the taxonomy of the standards document, e.g. \"Understand and apply the Pythagorean Theorem,\" or \"Geometry\"."
          },
          "identificationCodes": {
            "type": "array",
            "description": "An unordered collection of learningStandardIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning standard.",
            "items": {
              "$ref": "#/components/schemas/learningStandardIdentificationCode"
            }
          },
          "learningStandardCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An additional classification of the type of a specific learning standard."
          },
          "learningStandardItemCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique)."
          },
          "namespace": {
            "maxLength": 255,
            "type": "string",
            "description": "Namespace for the LearningStandard."
          },
          "prerequisiteLearningStandards": {
            "type": "array",
            "description": "An unordered collection of learningStandardPrerequisiteLearningStandards. The unique identifier of a prerequisite learning standard item, a competency needed prior to learning this one. (Some items may have no prerequisites others may have one or more prerequisites. This should only be used to represent the immediate predecessors in a competency-based pathway, i.e. not prerequisites of prerequisites).",
            "items": {
              "$ref": "#/components/schemas/learningStandardPrerequisiteLearningStandard"
            }
          },
          "successCriteria": {
            "maxLength": 150,
            "type": "string",
            "description": "One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningStandard."
          },
          "uri": {
            "maxLength": 255,
            "type": "string",
            "description": "An unambiguous reference to the statement using a network-resolvable URI."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "learningStandardAcademicSubject": {
        "required": [ "academicSubjectDescriptor" ],
        "type": "object",
        "properties": {
          "academicSubjectDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Subject area for the LearningStandard.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "learningStandardContentStandard": {
        "required": [ "title" ],
        "type": "object",
        "properties": {
          "publicationStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown)."
          },
          "beginDate": {
            "type": "string",
            "description": "The beginning of the period during which this learning standard document is intended for use.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The end of the period during which this learning standard document is intended for use.",
            "format": "date"
          },
          "publicationDate": {
            "type": "string",
            "description": "The date on which this content was first published.",
            "format": "date"
          },
          "publicationYear": {
            "type": "integer",
            "description": "The year at which this content was first published.",
            "format": "int32"
          },
          "title": {
            "maxLength": 75,
            "type": "string",
            "description": "The name of the content standard, for example Common Core."
          },
          "uri": {
            "maxLength": 255,
            "type": "string",
            "description": "An unambiguous reference to the standards using a network-resolvable URI."
          },
          "version": {
            "maxLength": 50,
            "type": "string",
            "description": "The version identifier for the content."
          },
          "mandatingEducationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "authors": {
            "type": "array",
            "description": "An unordered collection of learningStandardContentStandardAuthors. The person or organization chiefly responsible for the intellectual content of the standard.",
            "items": {
              "$ref": "#/components/schemas/learningStandardContentStandardAuthor"
            }
          }
        }
      },
      "learningStandardContentStandardAuthor": {
        "required": [ "author" ],
        "type": "object",
        "properties": {
          "author": {
            "maxLength": 100,
            "type": "string",
            "description": "The person or organization chiefly responsible for the intellectual content of the standard.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "learningStandardGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade levels for the specific learning standard.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "learningStandardIdentificationCode": {
        "required": [ "contentStandardName", "identificationCode" ],
        "type": "object",
        "properties": {
          "contentStandardName": {
            "maxLength": 65,
            "type": "string",
            "description": "The name of the content standard, for example Common Core.",
            "x-Ed-Fi-isIdentity": true
          },
          "identificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to a Learning Standard.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "learningStandardPrerequisiteLearningStandard": {
        "required": [ "prerequisiteLearningStandardReference" ],
        "type": "object",
        "properties": {
          "prerequisiteLearningStandardReference": {
            "$ref": "#/components/schemas/learningStandardReference"
          }
        }
      },
      "learningStandardReference": {
        "required": [ "learningStandardId" ],
        "type": "object",
        "properties": {
          "learningStandardId": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the specific learning standard (e.g., 111.15.3.1.A)."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "localEducationAgency": {
        "required": [ "addresses", "categories", "id", "localEducationAgencyCategoryDescriptor", "localEducationAgencyId", "nameOfInstitution" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationAddresses. The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationAddress"
            }
          },
          "categories": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationCategory"
            }
          },
          "localEducationAgencyId": {
            "type": "integer",
            "description": "The identifier assigned to a local education agency.",
            "format": "int32",
            "x-Ed-Fi-isIdentity": true
          },
          "educationServiceCenterReference": {
            "$ref": "#/components/schemas/educationServiceCenterReference"
          },
          "parentLocalEducationAgencyReference": {
            "$ref": "#/components/schemas/localEducationAgencyReference"
          },
          "stateEducationAgencyReference": {
            "$ref": "#/components/schemas/stateEducationAgencyReference"
          },
          "accountabilities": {
            "type": "array",
            "description": "An unordered collection of localEducationAgencyAccountabilities. This entity maintains information about federal reporting and accountability for local education agencies.",
            "items": {
              "$ref": "#/components/schemas/localEducationAgencyAccountability"
            }
          },
          "charterStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school."
          },
          "federalFunds": {
            "type": "array",
            "description": "An unordered collection of localEducationAgencyFederalFunds. Contains the information about the reception and use of federal funds for reporting purposes.",
            "items": {
              "$ref": "#/components/schemas/localEducationAgencyFederalFunds"
            }
          },
          "identificationCodes": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationIdentificationCode"
            }
          },
          "institutionTelephones": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInstitutionTelephone"
            }
          },
          "internationalAddresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInternationalAddress"
            }
          },
          "localEducationAgencyCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The category of local education agency/district. For example: Independent or Charter."
          },
          "nameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "The full, legally accepted name of the institution."
          },
          "operationalStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The current operational status of the EducationOrganization (e.g., active, inactive)."
          },
          "shortNameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "A short name for the institution."
          },
          "webSite": {
            "maxLength": 255,
            "type": "string",
            "description": "The public web site address (URL) for the EducationOrganization."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "localEducationAgencyAccountability": {
        "required": [ "schoolYearTypeReference" ],
        "type": "object",
        "properties": {
          "gunFreeSchoolsActReportingStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indication of whether the school or Local Education Agency (LEA) submitted a Gun-Free Schools Act (GFSA) of 1994 report to the state, as defined by Title 18, Section 921."
          },
          "schoolChoiceImplementStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indication of whether the LEA was able to implement the provisions for public school choice under Title I, Part A, Section 1116 of ESEA as amended."
          },
          "schoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          }
        }
      },
      "localEducationAgencyFederalFunds": {
        "required": [ "fiscalYear" ],
        "type": "object",
        "properties": {
          "fiscalYear": {
            "type": "integer",
            "description": "The school year for which the accountability is reported.",
            "format": "int32",
            "x-Ed-Fi-isIdentity": true
          },
          "innovativeDollarsSpent": {
            "type": "number",
            "description": "The total Title V, Part A funds expended by LEAs.",
            "format": "double"
          },
          "innovativeDollarsSpentStrategicPriorities": {
            "type": "number",
            "description": "The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities.",
            "format": "double"
          },
          "innovativeProgramsFundsReceived": {
            "type": "number",
            "description": "The total Title V, Part A funds received by LEAs.",
            "format": "double"
          },
          "schoolImprovementAllocation": {
            "type": "number",
            "description": "The amount of Section 1003(a) and 1003(g) allocations to LEAs.",
            "format": "double"
          },
          "schoolImprovementReservedFundsPercentage": {
            "type": "number",
            "description": "An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and 200.100(a) of ED's regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA.",
            "format": "double"
          },
          "stateAssessmentAdministrationFunding": {
            "type": "number",
            "description": "The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state's schools and LEAs are held accountable for results.",
            "format": "double"
          },
          "supplementalEducationalServicesFundsSpent": {
            "type": "number",
            "description": "The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended.",
            "format": "double"
          },
          "supplementalEducationalServicesPerPupilExpenditure": {
            "type": "number",
            "description": "The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA.",
            "format": "double"
          }
        }
      },
      "localEducationAgencyReference": {
        "required": [ "localEducationAgencyId" ],
        "type": "object",
        "properties": {
          "localEducationAgencyId": {
            "type": "integer",
            "description": "The identifier assigned to a local education agency.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "location": {
        "required": [ "classroomIdentificationCode", "id", "schoolReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "classroomIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.",
            "x-Ed-Fi-isIdentity": true
          },
          "schoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "maximumNumberOfSeats": {
            "type": "integer",
            "description": "The most number of seats the class can maintain.",
            "format": "int32"
          },
          "optimalNumberOfSeats": {
            "type": "integer",
            "description": "The number of seats that is most favorable to the class.",
            "format": "int32"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "locationReference": {
        "required": [ "classroomIdentificationCode", "schoolId" ],
        "type": "object",
        "properties": {
          "classroomIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity."
          },
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "objectiveAssessment": {
        "required": [ "assessmentReference", "id", "identificationCode" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "identificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.",
            "x-Ed-Fi-isIdentity": true
          },
          "assessmentReference": {
            "$ref": "#/components/schemas/assessmentReference"
          },
          "parentObjectiveAssessmentReference": {
            "$ref": "#/components/schemas/objectiveAssessmentReference"
          },
          "assessmentItems": {
            "type": "array",
            "description": "An unordered collection of objectiveAssessmentAssessmentItems. References individual test items, if appropriate.",
            "items": {
              "$ref": "#/components/schemas/objectiveAssessmentAssessmentItem"
            }
          },
          "description": {
            "maxLength": 1024,
            "type": "string",
            "description": "The description of the ObjectiveAssessment (e.g., vocabulary, measurement, or geometry)."
          },
          "learningObjectives": {
            "type": "array",
            "description": "An unordered collection of objectiveAssessmentLearningObjectives. References the LearningObjective(s) the ObjectiveAssessment tests.",
            "items": {
              "$ref": "#/components/schemas/objectiveAssessmentLearningObjective"
            }
          },
          "learningStandards": {
            "type": "array",
            "description": "An unordered collection of objectiveAssessmentLearningStandards. LearningStandard tested by this ObjectiveAssessment.",
            "items": {
              "$ref": "#/components/schemas/objectiveAssessmentLearningStandard"
            }
          },
          "maxRawScore": {
            "type": "integer",
            "description": "The maximum raw score achievable across all assessment items that are correct and scored at the maximum.",
            "format": "int32"
          },
          "nomenclature": {
            "maxLength": 35,
            "type": "string",
            "description": "Reflects the specific nomenclature used for this level of ObjectiveAssessment."
          },
          "percentOfAssessment": {
            "type": "number",
            "description": "The percentage of the Assessment that tests this objective.",
            "format": "double"
          },
          "performanceLevels": {
            "type": "array",
            "description": "An unordered collection of objectiveAssessmentPerformanceLevels. Definition of the performance levels and the associated cut scores. Three styles are supported:          1. Specification of performance level by minimum and maximum score          2. Specification of performance level by cut score, using only minimum score          3. Specification of performance level without any mapping to scores",
            "items": {
              "$ref": "#/components/schemas/objectiveAssessmentPerformanceLevel"
            }
          },
          "scores": {
            "type": "array",
            "description": "An unordered collection of objectiveAssessmentScores. Definition of the scores to be expected from this objective assessment.",
            "items": {
              "$ref": "#/components/schemas/objectiveAssessmentScore"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "objectiveAssessmentAssessmentItem": {
        "required": [ "assessmentItemReference" ],
        "type": "object",
        "properties": {
          "assessmentItemReference": {
            "$ref": "#/components/schemas/assessmentItemReference"
          }
        }
      },
      "objectiveAssessmentLearningObjective": {
        "required": [ "learningObjectiveReference" ],
        "type": "object",
        "properties": {
          "learningObjectiveReference": {
            "$ref": "#/components/schemas/learningObjectiveReference"
          }
        }
      },
      "objectiveAssessmentLearningStandard": {
        "required": [ "learningStandardReference" ],
        "type": "object",
        "properties": {
          "learningStandardReference": {
            "$ref": "#/components/schemas/learningStandardReference"
          }
        }
      },
      "objectiveAssessmentPerformanceLevel": {
        "required": [ "assessmentReportingMethodDescriptor", "performanceLevelDescriptor" ],
        "type": "object",
        "properties": {
          "assessmentReportingMethodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.",
            "x-Ed-Fi-isIdentity": true
          },
          "performanceLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The performance level(s) defined for the assessment.",
            "x-Ed-Fi-isIdentity": true
          },
          "resultDatatypeTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The datatype of the result. The results can be expressed as a number, percentile, range, level, etc."
          },
          "maximumScore": {
            "maxLength": 35,
            "type": "string",
            "description": "The maximum score to make the indicated level of performance."
          },
          "minimumScore": {
            "maxLength": 35,
            "type": "string",
            "description": "The minimum score required to make the indicated level of performance."
          }
        }
      },
      "objectiveAssessmentReference": {
        "required": [ "assessmentIdentifier", "identificationCode", "namespace" ],
        "type": "object",
        "properties": {
          "assessmentIdentifier": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to an assessment."
          },
          "identificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity."
          },
          "namespace": {
            "maxLength": 255,
            "type": "string",
            "description": "Namespace for the Assessment."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "objectiveAssessmentScore": {
        "required": [ "assessmentReportingMethodDescriptor" ],
        "type": "object",
        "properties": {
          "assessmentReportingMethodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.",
            "x-Ed-Fi-isIdentity": true
          },
          "resultDatatypeTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The datatype of the result. The results can be expressed as a number, percentile, range, level, etc."
          },
          "maximumScore": {
            "maxLength": 35,
            "type": "string",
            "description": "The maximum score possible on the assessment."
          },
          "minimumScore": {
            "maxLength": 35,
            "type": "string",
            "description": "The minimum score possible on the assessment."
          }
        }
      },
      "openStaffPosition": {
        "required": [ "datePosted", "educationOrganizationReference", "employmentStatusDescriptor", "id", "requisitionNumber", "staffClassificationDescriptor" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "requisitionNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "academicSubjects": {
            "type": "array",
            "description": "An unordered collection of openStaffPositionAcademicSubjects. The teaching field required for the OpenStaffPosition, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.",
            "items": {
              "$ref": "#/components/schemas/openStaffPositionAcademicSubject"
            }
          },
          "datePosted": {
            "type": "string",
            "description": "Date the OpenStaffPosition was posted.",
            "format": "date"
          },
          "datePostingRemoved": {
            "type": "string",
            "description": "The date the posting was removed or filled.",
            "format": "date"
          },
          "employmentStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Reflects the type of employment or contract desired for the position; for example:          Probationary          Contractual          Substitute/temporary          Tenured or permanent          Volunteer/no contract          ..."
          },
          "instructionalGradeLevels": {
            "type": "array",
            "description": "An unordered collection of openStaffPositionInstructionalGradeLevels. The set of grade levels for which the position's assignment is responsible.",
            "items": {
              "$ref": "#/components/schemas/openStaffPositionInstructionalGradeLevel"
            }
          },
          "positionTitle": {
            "maxLength": 100,
            "type": "string",
            "description": "The descriptive name of an individual's position."
          },
          "postingResultDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indication of whether the OpenStaffPosition was filled or retired without filling."
          },
          "programAssignmentDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The name of the program for which the OpenStaffPosition will be assigned; for example:          Regular education          Title I-Academic          Title I-Non-Academic          Special Education'          Bilingual/English as a Second Language."
          },
          "staffClassificationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The titles of employment, official status, or rank of education staff."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "openStaffPositionAcademicSubject": {
        "required": [ "academicSubjectDescriptor" ],
        "type": "object",
        "properties": {
          "academicSubjectDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The teaching field required for the OpenStaffPosition, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "openStaffPositionInstructionalGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The set of grade levels for which the position's assignment is responsible.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "parent": {
        "required": [ "firstName", "id", "lastSurname", "parentUniqueId" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "parentUniqueId": {
            "maxLength": 32,
            "type": "string",
            "description": "A unique alphanumeric code assigned to a parent.",
            "x-Ed-Fi-isIdentity": true
          },
          "addresses": {
            "type": "array",
            "description": "An unordered collection of parentAddresses. Parent's address, if different from the student address.",
            "items": {
              "$ref": "#/components/schemas/parentAddress"
            }
          },
          "electronicMails": {
            "type": "array",
            "description": "An unordered collection of parentElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.",
            "items": {
              "$ref": "#/components/schemas/parentElectronicMail"
            }
          },
          "firstName": {
            "maxLength": 75,
            "type": "string",
            "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change."
          },
          "generationCodeSuffix": {
            "maxLength": 10,
            "type": "string",
            "description": "An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III)."
          },
          "internationalAddresses": {
            "type": "array",
            "description": "An unordered collection of parentInternationalAddresses. The set of elements that describes an international address.",
            "items": {
              "$ref": "#/components/schemas/parentInternationalAddress"
            }
          },
          "languages": {
            "type": "array",
            "description": "An unordered collection of parentLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.",
            "items": {
              "$ref": "#/components/schemas/parentLanguage"
            }
          },
          "lastSurname": {
            "maxLength": 75,
            "type": "string",
            "description": "The name borne in common by members of a family."
          },
          "loginId": {
            "maxLength": 60,
            "type": "string",
            "description": "The login ID for the user; used for security access control interface."
          },
          "maidenName": {
            "maxLength": 75,
            "type": "string",
            "description": "The person's maiden name."
          },
          "middleName": {
            "maxLength": 75,
            "type": "string",
            "description": "A secondary name given to an individual at birth, baptism, or during another naming ceremony."
          },
          "otherNames": {
            "type": "array",
            "description": "An unordered collection of parentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.",
            "items": {
              "$ref": "#/components/schemas/parentOtherName"
            }
          },
          "personalIdentificationDocuments": {
            "type": "array",
            "description": "An unordered collection of parentPersonalIdentificationDocuments. The documents presented as evident to verify one's personal identity; for example: drivers license, passport, birth certificate, etc.",
            "items": {
              "$ref": "#/components/schemas/parentPersonalIdentificationDocument"
            }
          },
          "personalTitlePrefix": {
            "maxLength": 30,
            "type": "string",
            "description": "A prefix used to denote the title, degree, position, or seniority of the person."
          },
          "sexDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A person's gender."
          },
          "telephones": {
            "type": "array",
            "description": "An unordered collection of parentTelephones. The 10-digit telephone number, including the area code, for the person.",
            "items": {
              "$ref": "#/components/schemas/parentTelephone"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "parentAddress": {
        "required": [ "addressTypeDescriptor", "city", "postalCode", "stateAbbreviationDescriptor", "streetNumberName" ],
        "type": "object",
        "properties": {
          "addressTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)",
            "x-Ed-Fi-isIdentity": true
          },
          "localeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban)."
          },
          "stateAbbreviationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The abbreviation for the state (within the United States) or outlying area in which an address is located."
          },
          "apartmentRoomSuiteNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The apartment, room, or suite number of an address."
          },
          "buildingSiteNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "The number of the building on the site, if more than one building shares the same address."
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of the city in which an address is located."
          },
          "congressionalDistrict": {
            "maxLength": 30,
            "type": "string",
            "description": "The congressional district in which an address is located."
          },
          "countyFIPSCode": {
            "maxLength": 5,
            "type": "string",
            "description": "The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code."
          },
          "doNotPublishIndicator": {
            "type": "boolean",
            "description": "An indication that the address should not be published."
          },
          "latitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic latitude of the physical address."
          },
          "longitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic longitude of the physical address."
          },
          "nameOfCounty": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located."
          },
          "postalCode": {
            "maxLength": 17,
            "type": "string",
            "description": "The five or nine digit zip code or overseas postal code portion of an address."
          },
          "streetNumberName": {
            "maxLength": 150,
            "type": "string",
            "description": "The street number and street name or post office box number of an address."
          },
          "periods": {
            "type": "array",
            "description": "An unordered collection of parentAddressPeriods. The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.",
            "items": {
              "$ref": "#/components/schemas/parentAddressPeriod"
            }
          }
        }
      },
      "parentAddressPeriod": {
        "required": [ "beginDate" ],
        "type": "object",
        "properties": {
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year for the start of the period.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year for the end of the period.",
            "format": "date"
          }
        }
      },
      "parentElectronicMail": {
        "required": [ "electronicMailAddress", "electronicMailTypeDescriptor" ],
        "type": "object",
        "properties": {
          "electronicMailTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)",
            "x-Ed-Fi-isIdentity": true
          },
          "doNotPublishIndicator": {
            "type": "boolean",
            "description": "An indication that the electronic email address should not be published."
          },
          "electronicMailAddress": {
            "maxLength": 128,
            "type": "string",
            "description": "The electronic mail (e-mail) address listed for an individual or organization."
          },
          "primaryEmailAddressIndicator": {
            "type": "boolean",
            "description": "An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization."
          }
        }
      },
      "parentInternationalAddress": {
        "required": [ "addressLine1", "addressTypeDescriptor", "countryDescriptor" ],
        "type": "object",
        "properties": {
          "addressTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)",
            "x-Ed-Fi-isIdentity": true
          },
          "countryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes."
          },
          "addressLine1": {
            "maxLength": 150,
            "type": "string",
            "description": "The first line of the address."
          },
          "addressLine2": {
            "maxLength": 150,
            "type": "string",
            "description": "The second line of the address."
          },
          "addressLine3": {
            "maxLength": 150,
            "type": "string",
            "description": "The third line of the address."
          },
          "addressLine4": {
            "maxLength": 150,
            "type": "string",
            "description": "The fourth line of the address."
          },
          "beginDate": {
            "type": "string",
            "description": "The first date the address is valid. For physical addresses, the date the person moved to that address.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The last date the address is valid. For physical addresses, this would be the date the person moved from that address.",
            "format": "date"
          },
          "latitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic latitude of the physical address."
          },
          "longitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic longitude of the physical address."
          }
        }
      },
      "parentLanguage": {
        "required": [ "languageDescriptor" ],
        "type": "object",
        "properties": {
          "languageDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A specification of which written or spoken communication is being used.",
            "x-Ed-Fi-isIdentity": true
          },
          "uses": {
            "type": "array",
            "description": "An unordered collection of parentLanguageUses. A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).",
            "items": {
              "$ref": "#/components/schemas/parentLanguageUse"
            }
          }
        }
      },
      "parentLanguageUse": {
        "required": [ "languageUseDescriptor" ],
        "type": "object",
        "properties": {
          "languageUseDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "parentOtherName": {
        "required": [ "firstName", "lastSurname", "otherNameTypeDescriptor" ],
        "type": "object",
        "properties": {
          "otherNameTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The types of alternate names for a person.",
            "x-Ed-Fi-isIdentity": true
          },
          "firstName": {
            "maxLength": 75,
            "type": "string",
            "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change."
          },
          "generationCodeSuffix": {
            "maxLength": 10,
            "type": "string",
            "description": "An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III)."
          },
          "lastSurname": {
            "maxLength": 75,
            "type": "string",
            "description": "The name borne in common by members of a family."
          },
          "middleName": {
            "maxLength": 75,
            "type": "string",
            "description": "A secondary name given to an individual at birth, baptism, or during another naming ceremony."
          },
          "personalTitlePrefix": {
            "maxLength": 30,
            "type": "string",
            "description": "A prefix used to denote the title, degree, position, or seniority of the person."
          }
        }
      },
      "parentPersonalIdentificationDocument": {
        "required": [ "identificationDocumentUseDescriptor", "personalInformationVerificationDescriptor" ],
        "type": "object",
        "properties": {
          "identificationDocumentUseDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The primary function of the document used for establishing identity.",
            "x-Ed-Fi-isIdentity": true
          },
          "personalInformationVerificationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The category of the document relative to its purpose.",
            "x-Ed-Fi-isIdentity": true
          },
          "issuerCountryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes."
          },
          "documentExpirationDate": {
            "type": "string",
            "description": "The day when the document  expires, if null then never expires.",
            "format": "date"
          },
          "documentTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The title of the document given by the issuer."
          },
          "issuerDocumentIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The unique identifier on the issuer's identification system."
          },
          "issuerName": {
            "maxLength": 150,
            "type": "string",
            "description": "Name of the entity or institution that issued the document."
          }
        }
      },
      "parentReference": {
        "required": [ "parentUniqueId" ],
        "type": "object",
        "properties": {
          "parentUniqueId": {
            "type": "string",
            "description": "A unique alphanumeric code assigned to a parent.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "parentTelephone": {
        "required": [ "telephoneNumber", "telephoneNumberTypeDescriptor" ],
        "type": "object",
        "properties": {
          "telephoneNumberTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of communication number listed for an individual or organization.",
            "x-Ed-Fi-isIdentity": true
          },
          "doNotPublishIndicator": {
            "type": "boolean",
            "description": "An indication that the telephone number should not be published."
          },
          "orderOfPriority": {
            "type": "integer",
            "description": "The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.",
            "format": "int32"
          },
          "telephoneNumber": {
            "maxLength": 24,
            "type": "string",
            "description": "The telephone number including the area code, and extension, if applicable."
          },
          "textMessageCapabilityIndicator": {
            "type": "boolean",
            "description": "An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages."
          }
        }
      },
      "payroll": {
        "required": [ "accountReference", "amountToDate", "asOfDate", "id", "staffReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "asOfDate": {
            "type": "string",
            "description": "The date of the reported payroll element.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "accountReference": {
            "$ref": "#/components/schemas/accountReference"
          },
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          },
          "amountToDate": {
            "type": "number",
            "description": "Current balance (amount paid to employee) for account for the fiscal year.",
            "format": "double"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "postSecondaryEvent": {
        "required": [ "eventDate", "id", "postSecondaryEventCategoryDescriptor", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "eventDate": {
            "type": "string",
            "description": "The date the event occurred or was recorded.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "postSecondaryEventCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The PostSecondaryEvent that is logged (e.g., FAFSA application, college application, college acceptance).",
            "x-Ed-Fi-isIdentity": true
          },
          "postSecondaryInstitutionReference": {
            "$ref": "#/components/schemas/postSecondaryInstitutionReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "postSecondaryInstitution": {
        "required": [ "addresses", "categories", "id", "nameOfInstitution", "postSecondaryInstitutionId" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationAddresses. The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationAddress"
            }
          },
          "categories": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationCategory"
            }
          },
          "postSecondaryInstitutionId": {
            "type": "integer",
            "description": "The ID of the post secondary institution.",
            "format": "int32",
            "x-Ed-Fi-isIdentity": true
          },
          "administrativeFundingControlDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control)."
          },
          "identificationCodes": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationIdentificationCode"
            }
          },
          "institutionTelephones": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInstitutionTelephone"
            }
          },
          "internationalAddresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInternationalAddress"
            }
          },
          "mediumOfInstructions": {
            "type": "array",
            "description": "An unordered collection of postSecondaryInstitutionMediumOfInstructions. The categories in which an institution serves the students.",
            "items": {
              "$ref": "#/components/schemas/postSecondaryInstitutionMediumOfInstruction"
            }
          },
          "nameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "The full, legally accepted name of the institution."
          },
          "operationalStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The current operational status of the EducationOrganization (e.g., active, inactive)."
          },
          "postSecondaryInstitutionLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A classification of whether a post secondary institution's highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years."
          },
          "shortNameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "A short name for the institution."
          },
          "webSite": {
            "maxLength": 255,
            "type": "string",
            "description": "The public web site address (URL) for the EducationOrganization."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "postSecondaryInstitutionMediumOfInstruction": {
        "required": [ "mediumOfInstructionDescriptor" ],
        "type": "object",
        "properties": {
          "mediumOfInstructionDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The categories in which an institution serves the students.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "postSecondaryInstitutionReference": {
        "required": [ "postSecondaryInstitutionId" ],
        "type": "object",
        "properties": {
          "postSecondaryInstitutionId": {
            "type": "integer",
            "description": "The ID of the post secondary institution.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "program": {
        "required": [ "educationOrganizationReference", "id", "programName", "programTypeDescriptor" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "programName": {
            "maxLength": 60,
            "type": "string",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
            "x-Ed-Fi-isIdentity": true
          },
          "programTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of program.",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "characteristics": {
            "type": "array",
            "description": "An unordered collection of programCharacteristics. Reflects important characteristics of the Program, such as categories or particular indications.",
            "items": {
              "$ref": "#/components/schemas/programCharacteristic"
            }
          },
          "learningObjectives": {
            "type": "array",
            "description": "An unordered collection of programLearningObjectives. References the LearningObjective(s) with which the Program is associated.",
            "items": {
              "$ref": "#/components/schemas/programLearningObjective"
            }
          },
          "learningStandards": {
            "type": "array",
            "description": "An unordered collection of programLearningStandards. LearningStandard followed by this program.",
            "items": {
              "$ref": "#/components/schemas/programLearningStandard"
            }
          },
          "programId": {
            "maxLength": 20,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity."
          },
          "services": {
            "type": "array",
            "description": "An unordered collection of programServices. Defines the services this program provides to students.",
            "items": {
              "$ref": "#/components/schemas/programService"
            }
          },
          "sponsors": {
            "type": "array",
            "description": "An unordered collection of programSponsors. Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual's participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization).",
            "items": {
              "$ref": "#/components/schemas/programSponsor"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "programCharacteristic": {
        "required": [ "programCharacteristicDescriptor" ],
        "type": "object",
        "properties": {
          "programCharacteristicDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Reflects important characteristics of the Program, such as categories or particular indications.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "programLearningObjective": {
        "required": [ "learningObjectiveReference" ],
        "type": "object",
        "properties": {
          "learningObjectiveReference": {
            "$ref": "#/components/schemas/learningObjectiveReference"
          }
        }
      },
      "programLearningStandard": {
        "required": [ "learningStandardReference" ],
        "type": "object",
        "properties": {
          "learningStandardReference": {
            "$ref": "#/components/schemas/learningStandardReference"
          }
        }
      },
      "programReference": {
        "required": [ "educationOrganizationId", "programName", "programTypeDescriptor" ],
        "type": "object",
        "properties": {
          "educationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "programName": {
            "maxLength": 60,
            "type": "string",
            "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies."
          },
          "programTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of program."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "programService": {
        "required": [ "serviceDescriptor" ],
        "type": "object",
        "properties": {
          "serviceDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Defines the services this program provides to students.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "programSponsor": {
        "required": [ "programSponsorDescriptor" ],
        "type": "object",
        "properties": {
          "programSponsorDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual's participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization).",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "reportCard": {
        "required": [ "educationOrganizationReference", "gradingPeriodReference", "id", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "gradingPeriodReference": {
            "$ref": "#/components/schemas/gradingPeriodReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "gpaCumulative": {
            "type": "number",
            "description": "A measure of cumulative average performance in all courses taken by an individual from the beginning of the school year through the current grading period.",
            "format": "double"
          },
          "gpaGivenGradingPeriod": {
            "type": "number",
            "description": "A measure of average performance in all courses taken by an individual for the current grading period.",
            "format": "double"
          },
          "grades": {
            "type": "array",
            "description": "An unordered collection of reportCardGrades. Grades for the classes attended by the Student for this grading period.",
            "items": {
              "$ref": "#/components/schemas/reportCardGrade"
            }
          },
          "numberOfDaysAbsent": {
            "type": "number",
            "description": "The number of days an individual is absent when school is in session during a given reporting period.",
            "format": "double"
          },
          "numberOfDaysInAttendance": {
            "type": "number",
            "description": "The number of days an individual is present when school is in session during a given reporting period.",
            "format": "double"
          },
          "numberOfDaysTardy": {
            "type": "integer",
            "description": "The number of days an individual is tardy during a given reporting period.",
            "format": "int32"
          },
          "studentCompetencyObjectives": {
            "type": "array",
            "description": "An unordered collection of reportCardStudentCompetencyObjectives. The Student competency evaluations associated for this grading period.",
            "items": {
              "$ref": "#/components/schemas/reportCardStudentCompetencyObjective"
            }
          },
          "studentLearningObjectives": {
            "type": "array",
            "description": "An unordered collection of reportCardStudentLearningObjectives. The StudentLearningObjective evaluations associated for this grading period.",
            "items": {
              "$ref": "#/components/schemas/reportCardStudentLearningObjective"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "reportCardGrade": {
        "required": [ "gradeReference" ],
        "type": "object",
        "properties": {
          "gradeReference": {
            "$ref": "#/components/schemas/gradeReference"
          }
        }
      },
      "reportCardReference": {
        "required": [ "educationOrganizationId", "gradingPeriodDescriptor", "gradingPeriodSchoolId", "gradingPeriodSchoolYear", "gradingPeriodSequence", "studentUniqueId" ],
        "type": "object",
        "properties": {
          "educationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "gradingPeriodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The name of the period for which grades are reported."
          },
          "gradingPeriodSchoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "gradingPeriodSchoolYear": {
            "type": "integer",
            "description": "The identifier for the grading period school year.",
            "format": "int32"
          },
          "gradingPeriodSequence": {
            "type": "integer",
            "description": "The sequential order of this period relative to other periods.",
            "format": "int32"
          },
          "studentUniqueId": {
            "maxLength": 32,
            "type": "string",
            "description": "A unique alphanumeric code assigned to a student."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "reportCardStudentCompetencyObjective": {
        "required": [ "studentCompetencyObjectiveReference" ],
        "type": "object",
        "properties": {
          "studentCompetencyObjectiveReference": {
            "$ref": "#/components/schemas/studentCompetencyObjectiveReference"
          }
        }
      },
      "reportCardStudentLearningObjective": {
        "required": [ "studentLearningObjectiveReference" ],
        "type": "object",
        "properties": {
          "studentLearningObjectiveReference": {
            "$ref": "#/components/schemas/studentLearningObjectiveReference"
          }
        }
      },
      "restraintEvent": {
        "required": [ "eventDate", "id", "restraintEventIdentifier", "schoolReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "restraintEventIdentifier": {
            "maxLength": 20,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.",
            "x-Ed-Fi-isIdentity": true
          },
          "schoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "educationalEnvironmentDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The setting where the RestraintEvent was exercised."
          },
          "eventDate": {
            "type": "string",
            "description": "Month, day, and year of the RestraintEvent.",
            "format": "date"
          },
          "programs": {
            "type": "array",
            "description": "An unordered collection of restraintEventPrograms. The special education program associated with the RestraintEvent.",
            "items": {
              "$ref": "#/components/schemas/restraintEventProgram"
            }
          },
          "reasons": {
            "type": "array",
            "description": "An unordered collection of restraintEventReasons. A categorization of the circumstances or reason for the RestraintEvent.",
            "items": {
              "$ref": "#/components/schemas/restraintEventReason"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "restraintEventProgram": {
        "required": [ "programReference" ],
        "type": "object",
        "properties": {
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          }
        }
      },
      "restraintEventReason": {
        "required": [ "restraintEventReasonDescriptor" ],
        "type": "object",
        "properties": {
          "restraintEventReasonDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A categorization of the circumstances or reason for the RestraintEvent.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "school": {
        "required": [ "addresses", "educationOrganizationCategories", "gradeLevels", "id", "nameOfInstitution", "schoolId" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationAddresses. The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationAddress"
            }
          },
          "educationOrganizationCategories": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationCategory"
            }
          },
          "gradeLevels": {
            "type": "array",
            "description": "An unordered collection of schoolGradeLevels. The grade levels served at the school.",
            "items": {
              "$ref": "#/components/schemas/schoolGradeLevel"
            }
          },
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32",
            "x-Ed-Fi-isIdentity": true
          },
          "charterApprovalSchoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          },
          "localEducationAgencyReference": {
            "$ref": "#/components/schemas/localEducationAgencyReference"
          },
          "administrativeFundingControlDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of education institution as classified by its funding source, for example public or private."
          },
          "charterApprovalAgencyTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of agency that approved the establishment or continuation of a charter school."
          },
          "charterStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school."
          },
          "identificationCodes": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationIdentificationCode"
            }
          },
          "institutionTelephones": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInstitutionTelephone"
            }
          },
          "internationalAddresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInternationalAddress"
            }
          },
          "internetAccessDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of Internet access available."
          },
          "magnetSpecialProgramEmphasisSchoolDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2) to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language)."
          },
          "nameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "The full, legally accepted name of the institution."
          },
          "operationalStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The current operational status of the EducationOrganization (e.g., active, inactive)."
          },
          "schoolCategories": {
            "type": "array",
            "description": "An unordered collection of schoolCategories. The one or more categories of school. For example: High School, Middle School, and/or Elementary School.",
            "items": {
              "$ref": "#/components/schemas/schoolCategory"
            }
          },
          "schoolTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of education institution as classified by its primary focus."
          },
          "shortNameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "A short name for the institution."
          },
          "titleIPartASchoolDesignationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Denotes the Title I Part A designation for the school."
          },
          "webSite": {
            "maxLength": 255,
            "type": "string",
            "description": "The public web site address (URL) for the EducationOrganization."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "schoolCategory": {
        "required": [ "schoolCategoryDescriptor" ],
        "type": "object",
        "properties": {
          "schoolCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The one or more categories of school. For example: High School, Middle School, and/or Elementary School.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "schoolGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade levels served at the school.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "schoolReference": {
        "required": [ "schoolId" ],
        "type": "object",
        "properties": {
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "schoolYearType": {
        "required": [ "currentSchoolYear", "id", "schoolYear", "schoolYearDescription" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "schoolYear": {
            "type": "integer",
            "description": "Key for School Year",
            "format": "int32",
            "x-Ed-Fi-isIdentity": true
          },
          "currentSchoolYear": {
            "type": "boolean",
            "description": "The code for the current school year."
          },
          "schoolYearDescription": {
            "maxLength": 50,
            "type": "string",
            "description": "The description for the SchoolYear type."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "schoolYearTypeReference": {
        "required": [ "schoolYear" ],
        "type": "object",
        "properties": {
          "schoolYear": {
            "type": "integer",
            "description": "Key for School Year",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "section": {
        "required": [ "courseOfferingReference", "id", "sectionIdentifier" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sectionIdentifier": {
            "maxLength": 255,
            "type": "string",
            "description": "The local identifier assigned to a section.",
            "x-Ed-Fi-isIdentity": true
          },
          "courseOfferingReference": {
            "$ref": "#/components/schemas/courseOfferingReference"
          },
          "locationReference": {
            "$ref": "#/components/schemas/locationReference"
          },
          "locationSchoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "availableCreditConversion": {
            "type": "number",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "format": "double"
          },
          "availableCredits": {
            "type": "number",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "format": "double"
          },
          "availableCreditTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of credits or units of value awarded for the completion of a course."
          },
          "characteristics": {
            "type": "array",
            "description": "An unordered collection of sectionCharacteristics. Reflects important characteristics of the Section, such as whether or not attendance is taken and the Section is graded.",
            "items": {
              "$ref": "#/components/schemas/sectionCharacteristic"
            }
          },
          "classPeriods": {
            "type": "array",
            "description": "An unordered collection of sectionClassPeriods. The class period during which the Section meets.",
            "items": {
              "$ref": "#/components/schemas/sectionClassPeriod"
            }
          },
          "courseLevelCharacteristics": {
            "type": "array",
            "description": "An unordered collection of sectionCourseLevelCharacteristics. The type of specific program or designation with which the section is associated (e.g., AP, IB, Dual Credit, CTE). This collection should only be populated if it differs from the Course Level Characteristics identified at the Course Offering level.",
            "items": {
              "$ref": "#/components/schemas/sectionCourseLevelCharacteristic"
            }
          },
          "educationalEnvironmentDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The setting in which a child receives education and related services; for example:          Center-based instruction          Home-based instruction          Hospital class          Mainstream          Residential care and treatment facility          ..."
          },
          "instructionLanguageDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The primary language of instruction, if omitted English is assumed."
          },
          "mediumOfInstructionDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The media through which teachers provide instruction to students and students and teachers communicate about instructional matters; for example:          Technology-based instruction in classroom          Correspondence instruction          Face-to-face instruction          Virtual/On-line Distance learning          Center-based instruction          ..."
          },
          "offeredGradeLevels": {
            "type": "array",
            "description": "An unordered collection of sectionOfferedGradeLevels. The grade levels in which the section is offered. This collection should only be populated if it differs from the Offered Grade Levels identified at the Course Offering level.",
            "items": {
              "$ref": "#/components/schemas/sectionOfferedGradeLevel"
            }
          },
          "populationServedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of students the Section is offered and tailored to; for example:          Bilingual students          Remedial education students          Gifted and talented students          Career and Technical Education students          Special education students          ..."
          },
          "programs": {
            "type": "array",
            "description": "An unordered collection of sectionPrograms. Optional reference to program (e.g., CTE) to which the Section is associated.",
            "items": {
              "$ref": "#/components/schemas/sectionProgram"
            }
          },
          "sequenceOfCourse": {
            "type": "integer",
            "description": "When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.",
            "format": "int32"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "sectionAttendanceTakenEvent": {
        "required": [ "calendarDateReference", "eventDate", "id", "sectionReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "calendarDateReference": {
            "$ref": "#/components/schemas/calendarDateReference"
          },
          "sectionReference": {
            "$ref": "#/components/schemas/sectionReference"
          },
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          },
          "eventDate": {
            "type": "string",
            "description": "The date the SectionAttendanceTakenEvent was submitted, which could be a different date than the instructional day.",
            "format": "date"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "sectionCharacteristic": {
        "required": [ "sectionCharacteristicDescriptor" ],
        "type": "object",
        "properties": {
          "sectionCharacteristicDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Reflects important characteristics of the Section, such as whether or not attendance is taken and the Section is graded.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "sectionClassPeriod": {
        "required": [ "classPeriodReference" ],
        "type": "object",
        "properties": {
          "classPeriodReference": {
            "$ref": "#/components/schemas/classPeriodReference"
          }
        }
      },
      "sectionCourseLevelCharacteristic": {
        "required": [ "courseLevelCharacteristicDescriptor" ],
        "type": "object",
        "properties": {
          "courseLevelCharacteristicDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of specific program or designation with which the section is associated (e.g., AP, IB, Dual Credit, CTE). This collection should only be populated if it differs from the Course Level Characteristics identified at the Course Offering level.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "sectionOfferedGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade levels in which the section is offered. This collection should only be populated if it differs from the Offered Grade Levels identified at the Course Offering level.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "sectionProgram": {
        "required": [ "programReference" ],
        "type": "object",
        "properties": {
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          }
        }
      },
      "sectionReference": {
        "required": [ "localCourseCode", "schoolId", "schoolYear", "sectionIdentifier", "sessionName" ],
        "type": "object",
        "properties": {
          "localCourseCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students."
          },
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "schoolYear": {
            "type": "integer",
            "description": "The identifier for the school year.",
            "format": "int32"
          },
          "sectionIdentifier": {
            "maxLength": 255,
            "type": "string",
            "description": "The local identifier assigned to a section."
          },
          "sessionName": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer)."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "session": {
        "required": [ "beginDate", "endDate", "id", "schoolReference", "schoolYearTypeReference", "sessionName", "termDescriptor", "totalInstructionalDays" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sessionName": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).",
            "x-Ed-Fi-isIdentity": true
          },
          "schoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "schoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          },
          "academicWeeks": {
            "type": "array",
            "description": "An unordered collection of sessionAcademicWeeks. The academic weeks associated with the school year.",
            "items": {
              "$ref": "#/components/schemas/sessionAcademicWeek"
            }
          },
          "beginDate": {
            "type": "string",
            "description": "Month, day, and year of the first day of the Session.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "Month, day and year of the last day of the Session.",
            "format": "date"
          },
          "gradingPeriods": {
            "type": "array",
            "description": "An unordered collection of sessionGradingPeriods. Grading periods associated with the session.",
            "items": {
              "$ref": "#/components/schemas/sessionGradingPeriod"
            }
          },
          "termDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An descriptor value indicating the term (e.g. 'Fall Semester', 'Second Quarter', 'Summer Semester', etc.)."
          },
          "totalInstructionalDays": {
            "type": "integer",
            "description": "The total number of instructional days in the school calendar.",
            "format": "int32"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "sessionAcademicWeek": {
        "required": [ "academicWeekReference" ],
        "type": "object",
        "properties": {
          "academicWeekReference": {
            "$ref": "#/components/schemas/academicWeekReference"
          }
        }
      },
      "sessionGradingPeriod": {
        "required": [ "gradingPeriodReference" ],
        "type": "object",
        "properties": {
          "gradingPeriodReference": {
            "$ref": "#/components/schemas/gradingPeriodReference"
          }
        }
      },
      "sessionReference": {
        "required": [ "schoolId", "schoolYear", "sessionName" ],
        "type": "object",
        "properties": {
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "schoolYear": {
            "type": "integer",
            "description": "The identifier for the school year.",
            "format": "int32"
          },
          "sessionName": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer)."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "staff": {
        "required": [ "firstName", "id", "lastSurname", "staffUniqueId" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "staffUniqueId": {
            "maxLength": 32,
            "type": "string",
            "description": "A unique alphanumeric code assigned to a staff.",
            "x-Ed-Fi-isIdentity": true
          },
          "addresses": {
            "type": "array",
            "description": "An unordered collection of staffAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.",
            "items": {
              "$ref": "#/components/schemas/staffAddress"
            }
          },
          "birthDate": {
            "type": "string",
            "description": "The month, day, and year on which an individual was born.",
            "format": "date"
          },
          "citizenshipStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indicator of whether or not the person is a U.S. citizen."
          },
          "credentials": {
            "type": "array",
            "description": "An unordered collection of staffCredentials. The legal document giving authorization to perform teaching assignment services.",
            "items": {
              "$ref": "#/components/schemas/staffCredential"
            }
          },
          "electronicMails": {
            "type": "array",
            "description": "An unordered collection of staffElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.",
            "items": {
              "$ref": "#/components/schemas/staffElectronicMail"
            }
          },
          "firstName": {
            "maxLength": 75,
            "type": "string",
            "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change."
          },
          "generationCodeSuffix": {
            "maxLength": 10,
            "type": "string",
            "description": "An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III)."
          },
          "highestCompletedLevelOfEducationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received)."
          },
          "highlyQualifiedTeacher": {
            "type": "boolean",
            "description": "An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught."
          },
          "hispanicLatinoEthnicity": {
            "type": "boolean",
            "description": "An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\""
          },
          "identificationCodes": {
            "type": "array",
            "description": "An unordered collection of staffIdentificationCodes. A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.",
            "items": {
              "$ref": "#/components/schemas/staffIdentificationCode"
            }
          },
          "identificationDocuments": {
            "type": "array",
            "description": "An unordered collection of staffIdentificationDocuments. Describe the documentation of citizenship.",
            "items": {
              "$ref": "#/components/schemas/staffIdentificationDocument"
            }
          },
          "internationalAddresses": {
            "type": "array",
            "description": "An unordered collection of staffInternationalAddresses. The set of elements that describes an international address.",
            "items": {
              "$ref": "#/components/schemas/staffInternationalAddress"
            }
          },
          "languages": {
            "type": "array",
            "description": "An unordered collection of staffLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-2 language codes.",
            "items": {
              "$ref": "#/components/schemas/staffLanguage"
            }
          },
          "lastSurname": {
            "maxLength": 75,
            "type": "string",
            "description": "The name borne in common by members of a family."
          },
          "loginId": {
            "maxLength": 60,
            "type": "string",
            "description": "The login ID for the user; used for security access control interface."
          },
          "maidenName": {
            "maxLength": 75,
            "type": "string",
            "description": "The person's maiden name."
          },
          "middleName": {
            "maxLength": 75,
            "type": "string",
            "description": "A secondary name given to an individual at birth, baptism, or during another naming ceremony."
          },
          "oldEthnicityDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin."
          },
          "otherNames": {
            "type": "array",
            "description": "An unordered collection of staffOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.",
            "items": {
              "$ref": "#/components/schemas/staffOtherName"
            }
          },
          "personalIdentificationDocuments": {
            "type": "array",
            "description": "An unordered collection of staffPersonalIdentificationDocuments. The documents presented as evident to verify one's personal identity; for example: drivers license, passport, birth certificate, etc.",
            "items": {
              "$ref": "#/components/schemas/staffPersonalIdentificationDocument"
            }
          },
          "personalTitlePrefix": {
            "maxLength": 30,
            "type": "string",
            "description": "A prefix used to denote the title, degree, position, or seniority of the person."
          },
          "races": {
            "type": "array",
            "description": "An unordered collection of staffRaces. The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.",
            "items": {
              "$ref": "#/components/schemas/staffRace"
            }
          },
          "recognitions": {
            "type": "array",
            "description": "An unordered collection of staffRecognitions. Recognitions given to the staff for accomplishments in a co-curricular or extracurricular activity.",
            "items": {
              "$ref": "#/components/schemas/staffRecognition"
            }
          },
          "sexDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A person's gender."
          },
          "telephones": {
            "type": "array",
            "description": "An unordered collection of staffTelephones. The 10-digit telephone number, including the area code, for the person.",
            "items": {
              "$ref": "#/components/schemas/staffTelephone"
            }
          },
          "tribalAffiliations": {
            "type": "array",
            "description": "An unordered collection of staffTribalAffiliations. An American Indian tribe with which the staff member is affiliated.",
            "items": {
              "$ref": "#/components/schemas/staffTribalAffiliation"
            }
          },
          "visas": {
            "type": "array",
            "description": "An unordered collection of staffVisas. An indicator of a non-US citizen's Visa type.",
            "items": {
              "$ref": "#/components/schemas/staffVisa"
            }
          },
          "yearsOfPriorProfessionalExperience": {
            "type": "number",
            "description": "The total number of years that an individual has previously held a similar professional position in one or more education institutions.",
            "format": "double"
          },
          "yearsOfPriorTeachingExperience": {
            "type": "number",
            "description": "The total number of years that an individual has previously held a teaching position in one or more education institutions.",
            "format": "double"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          },
          "_ext": {
            "$ref": "#/components/schemas/staffExtensions"
          }
        }
      },
      "staffAbsenceEvent": {
        "required": [ "absenceEventCategoryDescriptor", "eventDate", "id", "staffReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "absenceEventCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The code describing the type of absence.",
            "x-Ed-Fi-isIdentity": true
          },
          "eventDate": {
            "type": "string",
            "description": "Date for this leave event.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          },
          "absenceEventReason": {
            "maxLength": 40,
            "type": "string",
            "description": "Expanded reason for the staff absence."
          },
          "hoursAbsent": {
            "type": "number",
            "description": "The hours the staff was absent, if not the entire working day.",
            "format": "double"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "staffAddress": {
        "required": [ "addressTypeDescriptor", "city", "postalCode", "stateAbbreviationDescriptor", "streetNumberName" ],
        "type": "object",
        "properties": {
          "addressTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)",
            "x-Ed-Fi-isIdentity": true
          },
          "localeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban)."
          },
          "stateAbbreviationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The abbreviation for the state (within the United States) or outlying area in which an address is located."
          },
          "apartmentRoomSuiteNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The apartment, room, or suite number of an address."
          },
          "buildingSiteNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "The number of the building on the site, if more than one building shares the same address."
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of the city in which an address is located."
          },
          "congressionalDistrict": {
            "maxLength": 30,
            "type": "string",
            "description": "The congressional district in which an address is located."
          },
          "countyFIPSCode": {
            "maxLength": 5,
            "type": "string",
            "description": "The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code."
          },
          "doNotPublishIndicator": {
            "type": "boolean",
            "description": "An indication that the address should not be published."
          },
          "latitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic latitude of the physical address."
          },
          "longitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic longitude of the physical address."
          },
          "nameOfCounty": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located."
          },
          "postalCode": {
            "maxLength": 17,
            "type": "string",
            "description": "The five or nine digit zip code or overseas postal code portion of an address."
          },
          "streetNumberName": {
            "maxLength": 150,
            "type": "string",
            "description": "The street number and street name or post office box number of an address."
          },
          "periods": {
            "type": "array",
            "description": "An unordered collection of staffAddressPeriods. The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.",
            "items": {
              "$ref": "#/components/schemas/staffAddressPeriod"
            }
          }
        }
      },
      "staffAddressPeriod": {
        "required": [ "beginDate" ],
        "type": "object",
        "properties": {
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year for the start of the period.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year for the end of the period.",
            "format": "date"
          }
        }
      },
      "staffCohortAssociation": {
        "required": [ "beginDate", "cohortReference", "id", "staffReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "Start date for the association of staff to this cohort.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "cohortReference": {
            "$ref": "#/components/schemas/cohortReference"
          },
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          },
          "endDate": {
            "type": "string",
            "description": "End date for the association of staff to this cohort.",
            "format": "date"
          },
          "studentRecordAccess": {
            "type": "boolean",
            "description": "Indicator of whether the staff has access to the student records of the cohort per district interpretation of FERPA and other privacy laws, regulations, and policies."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "staffCredential": {
        "required": [ "credentialReference" ],
        "type": "object",
        "properties": {
          "credentialReference": {
            "$ref": "#/components/schemas/credentialReference"
          }
        }
      },
      "staffEducationOrganizationAssignmentAssociation": {
        "required": [ "beginDate", "educationOrganizationReference", "id", "staffClassificationDescriptor", "staffReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "Month, day, and year of the start or effective date of a staff member's employment, contract, or relationship with the LEA.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "staffClassificationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The titles of employment, official status, or rank of education staff.",
            "x-Ed-Fi-isIdentity": true
          },
          "credentialReference": {
            "$ref": "#/components/schemas/credentialReference"
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "employmentStaffEducationOrganizationEmploymentAssociationReference": {
            "$ref": "#/components/schemas/staffEducationOrganizationEmploymentAssociationReference"
          },
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          },
          "endDate": {
            "type": "string",
            "description": "Month, day, and year of the end or termination date of a staff member's employment, contract, or relationship with the LEA.",
            "format": "date"
          },
          "orderOfAssignment": {
            "type": "integer",
            "description": "Describes whether the assignment is this the staff member's primary assignment, secondary assignment, etc.",
            "format": "int32"
          },
          "positionTitle": {
            "maxLength": 100,
            "type": "string",
            "description": "The descriptive name of an individual's position."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "staffEducationOrganizationContactAssociation": {
        "required": [ "contactTitle", "educationOrganizationReference", "electronicMailAddress", "id", "staffReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "contactTitle": {
            "maxLength": 75,
            "type": "string",
            "description": "The title of the contact in the context of the EducationOrganization.",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          },
          "address": {
            "$ref": "#/components/schemas/staffEducationOrganizationContactAssociationAddress"
          },
          "contactTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the type for the contact information."
          },
          "electronicMailAddress": {
            "maxLength": 128,
            "type": "string",
            "description": "The email for the contact associated with the EducationOrganization."
          },
          "telephones": {
            "type": "array",
            "description": "An unordered collection of staffEducationOrganizationContactAssociationTelephones. The optional telephone for the contact associated with the EducationOrganization.",
            "items": {
              "$ref": "#/components/schemas/staffEducationOrganizationContactAssociationTelephone"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "staffEducationOrganizationContactAssociationAddress": {
        "required": [ "addressTypeDescriptor", "city", "postalCode", "stateAbbreviationDescriptor", "streetNumberName" ],
        "type": "object",
        "properties": {
          "addressTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)"
          },
          "localeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban)."
          },
          "stateAbbreviationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The abbreviation for the state (within the United States) or outlying area in which an address is located."
          },
          "apartmentRoomSuiteNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The apartment, room, or suite number of an address."
          },
          "buildingSiteNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "The number of the building on the site, if more than one building shares the same address."
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of the city in which an address is located."
          },
          "congressionalDistrict": {
            "maxLength": 30,
            "type": "string",
            "description": "The congressional district in which an address is located."
          },
          "countyFIPSCode": {
            "maxLength": 5,
            "type": "string",
            "description": "The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code."
          },
          "doNotPublishIndicator": {
            "type": "boolean",
            "description": "An indication that the address should not be published."
          },
          "latitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic latitude of the physical address."
          },
          "longitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic longitude of the physical address."
          },
          "nameOfCounty": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located."
          },
          "postalCode": {
            "maxLength": 17,
            "type": "string",
            "description": "The five or nine digit zip code or overseas postal code portion of an address."
          },
          "streetNumberName": {
            "maxLength": 150,
            "type": "string",
            "description": "The street number and street name or post office box number of an address."
          },
          "periods": {
            "type": "array",
            "description": "An unordered collection of staffEducationOrganizationContactAssociationAddressPeriods. The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.",
            "items": {
              "$ref": "#/components/schemas/staffEducationOrganizationContactAssociationAddressPeriod"
            }
          }
        }
      },
      "staffEducationOrganizationContactAssociationAddressPeriod": {
        "required": [ "beginDate" ],
        "type": "object",
        "properties": {
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year for the start of the period.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year for the end of the period.",
            "format": "date"
          }
        }
      },
      "staffEducationOrganizationContactAssociationTelephone": {
        "required": [ "telephoneNumber", "telephoneNumberTypeDescriptor" ],
        "type": "object",
        "properties": {
          "telephoneNumberTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of communication number listed for an individual or organization.",
            "x-Ed-Fi-isIdentity": true
          },
          "doNotPublishIndicator": {
            "type": "boolean",
            "description": "An indication that the telephone number should not be published."
          },
          "orderOfPriority": {
            "type": "integer",
            "description": "The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.",
            "format": "int32"
          },
          "telephoneNumber": {
            "maxLength": 24,
            "type": "string",
            "description": "The telephone number including the area code, and extension, if applicable."
          },
          "textMessageCapabilityIndicator": {
            "type": "boolean",
            "description": "An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages."
          }
        }
      },
      "staffEducationOrganizationEmploymentAssociation": {
        "required": [ "educationOrganizationReference", "employmentStatusDescriptor", "hireDate", "id", "staffReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "employmentStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Reflects the type of employment or contract; for example:          Probationary          Contractual          Substitute/temporary          Tenured or permanent          Volunteer/no contract          ...",
            "x-Ed-Fi-isIdentity": true
          },
          "hireDate": {
            "type": "string",
            "description": "The month, day, and year on which an individual was hired for a position.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "credentialReference": {
            "$ref": "#/components/schemas/credentialReference"
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          },
          "department": {
            "maxLength": 3,
            "type": "string",
            "description": "The department or suborganization the employee/contractor is associated with in the EducationOrganization."
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).",
            "format": "date"
          },
          "fullTimeEquivalency": {
            "type": "number",
            "description": "The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.",
            "format": "double"
          },
          "hourlyWage": {
            "type": "number",
            "description": "Hourly wage associated with the employment position being reported.",
            "format": "double"
          },
          "offerDate": {
            "type": "string",
            "description": "Date at which the staff member was made an official offer for this employment.",
            "format": "date"
          },
          "separationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Type of employment separation; for example: Voluntary separation, Involuntary separation,          Mutual agreement          Other, etc."
          },
          "separationReasonDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Reason for terminating the employment; for example:          Employment in education          Employment outside of education          Retirement          Family/personal relocation          Change of assignment."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "staffEducationOrganizationEmploymentAssociationReference": {
        "required": [ "educationOrganizationId", "employmentStatusDescriptor", "hireDate", "staffUniqueId" ],
        "type": "object",
        "properties": {
          "educationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "employmentStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Reflects the type of employment or contract; for example:          Probationary          Contractual          Substitute/temporary          Tenured or permanent          Volunteer/no contract          ..."
          },
          "hireDate": {
            "type": "string",
            "description": "The month, day, and year on which an individual was hired for a position.",
            "format": "date"
          },
          "staffUniqueId": {
            "maxLength": 32,
            "type": "string",
            "description": "A unique alphanumeric code assigned to a staff."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "staffElectronicMail": {
        "required": [ "electronicMailAddress", "electronicMailTypeDescriptor" ],
        "type": "object",
        "properties": {
          "electronicMailTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)",
            "x-Ed-Fi-isIdentity": true
          },
          "doNotPublishIndicator": {
            "type": "boolean",
            "description": "An indication that the electronic email address should not be published."
          },
          "electronicMailAddress": {
            "maxLength": 128,
            "type": "string",
            "description": "The electronic mail (e-mail) address listed for an individual or organization."
          },
          "primaryEmailAddressIndicator": {
            "type": "boolean",
            "description": "An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization."
          }
        }
      },
      "staffIdentificationCode": {
        "required": [ "identificationCode", "staffIdentificationSystemDescriptor" ],
        "type": "object",
        "properties": {
          "staffIdentificationSystemDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member.",
            "x-Ed-Fi-isIdentity": true
          },
          "assigningOrganizationIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The organization code or name assigning the staff Identification Code."
          },
          "identificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity."
          }
        }
      },
      "staffIdentificationDocument": {
        "required": [ "identificationDocumentUseDescriptor", "personalInformationVerificationDescriptor" ],
        "type": "object",
        "properties": {
          "identificationDocumentUseDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The primary function of the document used for establishing identity.",
            "x-Ed-Fi-isIdentity": true
          },
          "personalInformationVerificationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The category of the document relative to its purpose.",
            "x-Ed-Fi-isIdentity": true
          },
          "issuerCountryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes."
          },
          "documentExpirationDate": {
            "type": "string",
            "description": "The day when the document  expires, if null then never expires.",
            "format": "date"
          },
          "documentTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The title of the document given by the issuer."
          },
          "issuerDocumentIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The unique identifier on the issuer's identification system."
          },
          "issuerName": {
            "maxLength": 150,
            "type": "string",
            "description": "Name of the entity or institution that issued the document."
          }
        }
      },
      "staffInternationalAddress": {
        "required": [ "addressLine1", "addressTypeDescriptor", "countryDescriptor" ],
        "type": "object",
        "properties": {
          "addressTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)",
            "x-Ed-Fi-isIdentity": true
          },
          "countryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes."
          },
          "addressLine1": {
            "maxLength": 150,
            "type": "string",
            "description": "The first line of the address."
          },
          "addressLine2": {
            "maxLength": 150,
            "type": "string",
            "description": "The second line of the address."
          },
          "addressLine3": {
            "maxLength": 150,
            "type": "string",
            "description": "The third line of the address."
          },
          "addressLine4": {
            "maxLength": 150,
            "type": "string",
            "description": "The fourth line of the address."
          },
          "beginDate": {
            "type": "string",
            "description": "The first date the address is valid. For physical addresses, the date the person moved to that address.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The last date the address is valid. For physical addresses, this would be the date the person moved from that address.",
            "format": "date"
          },
          "latitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic latitude of the physical address."
          },
          "longitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic longitude of the physical address."
          }
        }
      },
      "staffLanguage": {
        "required": [ "languageDescriptor" ],
        "type": "object",
        "properties": {
          "languageDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A specification of which written or spoken communication is being used.",
            "x-Ed-Fi-isIdentity": true
          },
          "uses": {
            "type": "array",
            "description": "An unordered collection of staffLanguageUses. A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).",
            "items": {
              "$ref": "#/components/schemas/staffLanguageUse"
            }
          }
        }
      },
      "staffLanguageUse": {
        "required": [ "languageUseDescriptor" ],
        "type": "object",
        "properties": {
          "languageUseDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "staffLeave": {
        "required": [ "beginDate", "id", "staffLeaveEventCategoryDescriptor", "staffReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "The begin date of the staff leave.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "staffLeaveEventCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The code describing the type of leave taken, for example:          Sick          Personal          Vacation.",
            "x-Ed-Fi-isIdentity": true
          },
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the staff leave.",
            "format": "date"
          },
          "reason": {
            "maxLength": 40,
            "type": "string",
            "description": "Expanded reason for the staff leave."
          },
          "substituteAssigned": {
            "type": "boolean",
            "description": "Indicator of whether a substitute was assigned during the period of staff leave."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "staffOtherName": {
        "required": [ "firstName", "lastSurname", "otherNameTypeDescriptor" ],
        "type": "object",
        "properties": {
          "otherNameTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The types of alternate names for a person.",
            "x-Ed-Fi-isIdentity": true
          },
          "firstName": {
            "maxLength": 75,
            "type": "string",
            "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change."
          },
          "generationCodeSuffix": {
            "maxLength": 10,
            "type": "string",
            "description": "An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III)."
          },
          "lastSurname": {
            "maxLength": 75,
            "type": "string",
            "description": "The name borne in common by members of a family."
          },
          "middleName": {
            "maxLength": 75,
            "type": "string",
            "description": "A secondary name given to an individual at birth, baptism, or during another naming ceremony."
          },
          "personalTitlePrefix": {
            "maxLength": 30,
            "type": "string",
            "description": "A prefix used to denote the title, degree, position, or seniority of the person."
          }
        }
      },
      "staffPersonalIdentificationDocument": {
        "required": [ "identificationDocumentUseDescriptor", "personalInformationVerificationDescriptor" ],
        "type": "object",
        "properties": {
          "identificationDocumentUseDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The primary function of the document used for establishing identity.",
            "x-Ed-Fi-isIdentity": true
          },
          "personalInformationVerificationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The category of the document relative to its purpose.",
            "x-Ed-Fi-isIdentity": true
          },
          "issuerCountryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes."
          },
          "documentExpirationDate": {
            "type": "string",
            "description": "The day when the document  expires, if null then never expires.",
            "format": "date"
          },
          "documentTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The title of the document given by the issuer."
          },
          "issuerDocumentIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The unique identifier on the issuer's identification system."
          },
          "issuerName": {
            "maxLength": 150,
            "type": "string",
            "description": "Name of the entity or institution that issued the document."
          }
        }
      },
      "staffProgramAssociation": {
        "required": [ "beginDate", "id", "programReference", "staffReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "Start date for the association of staff to this program.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          },
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          },
          "endDate": {
            "type": "string",
            "description": "End date for the association of staff to this program.",
            "format": "date"
          },
          "studentRecordAccess": {
            "type": "boolean",
            "description": "Indicator of whether the staff has access to the student records of the program per district interpretation of FERPA and other privacy laws, regulations, and policies."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "staffRace": {
        "required": [ "raceDescriptor" ],
        "type": "object",
        "properties": {
          "raceDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "staffRecognition": {
        "required": [ "recognitionTypeDescriptor" ],
        "type": "object",
        "properties": {
          "recognitionTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The nature of recognition given to the learner for accomplishments in a co-curricular, or extra-curricular activity.",
            "x-Ed-Fi-isIdentity": true
          },
          "achievementCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The category of achievement attributed to the learner."
          },
          "achievementCategorySystem": {
            "maxLength": 60,
            "type": "string",
            "description": "The system that defines the categories by which an achievement is attributed to the learner."
          },
          "achievementTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The title assigned to the achievement."
          },
          "criteria": {
            "maxLength": 150,
            "type": "string",
            "description": "The criteria for competency-based completion of the achievement/award."
          },
          "criteriaURL": {
            "maxLength": 255,
            "type": "string",
            "description": "The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award."
          },
          "evidenceStatement": {
            "maxLength": 150,
            "type": "string",
            "description": "A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement."
          },
          "imageURL": {
            "maxLength": 255,
            "type": "string",
            "description": "The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement."
          },
          "issuerName": {
            "maxLength": 150,
            "type": "string",
            "description": "The name of the agent, entity, or institution issuing the element."
          },
          "issuerOriginURL": {
            "maxLength": 255,
            "type": "string",
            "description": "The Uniform Resource Locator (URL) from which the award was issued."
          },
          "recognitionAwardDate": {
            "type": "string",
            "description": "The date the recognition was awarded or earned.",
            "format": "date"
          },
          "recognitionAwardExpiresDate": {
            "type": "string",
            "description": "Date on which the award expires.",
            "format": "date"
          },
          "recognitionDescription": {
            "maxLength": 80,
            "type": "string",
            "description": "A description of the type of academic distinctions earned by or awarded to the individual."
          }
        }
      },
      "staffReference": {
        "required": [ "staffUniqueId" ],
        "type": "object",
        "properties": {
          "staffUniqueId": {
            "type": "string",
            "description": "A unique alphanumeric code assigned to a staff.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "staffSchoolAssociation": {
        "required": [ "id", "programAssignmentDescriptor", "schoolReference", "staffReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "programAssignmentDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The name of the program for which the individual is assigned; for example:          Regular education          Title I-Academic          Title I-Non-Academic          Special Education          Bilingual/English as a Second Language.",
            "x-Ed-Fi-isIdentity": true
          },
          "calendarReference": {
            "$ref": "#/components/schemas/calendarReference"
          },
          "schoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "schoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          },
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          },
          "academicSubjects": {
            "type": "array",
            "description": "An unordered collection of staffSchoolAssociationAcademicSubjects. The teaching field taught by an individual, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.",
            "items": {
              "$ref": "#/components/schemas/staffSchoolAssociationAcademicSubject"
            }
          },
          "gradeLevels": {
            "type": "array",
            "description": "An unordered collection of staffSchoolAssociationGradeLevels. The set of grade levels for which the individual's assignment is responsible.",
            "items": {
              "$ref": "#/components/schemas/staffSchoolAssociationGradeLevel"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "staffSchoolAssociationAcademicSubject": {
        "required": [ "academicSubjectDescriptor" ],
        "type": "object",
        "properties": {
          "academicSubjectDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The teaching field taught by an individual, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "staffSchoolAssociationGradeLevel": {
        "required": [ "gradeLevelDescriptor" ],
        "type": "object",
        "properties": {
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The set of grade levels for which the individual's assignment is responsible.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "staffSectionAssociation": {
        "required": [ "classroomPositionDescriptor", "id", "sectionReference", "staffReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sectionReference": {
            "$ref": "#/components/schemas/sectionReference"
          },
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          },
          "beginDate": {
            "type": "string",
            "description": "Month, day, and year of a teacher's assignment to the Section. If blank, defaults to the first day of the first grading period for the Section.",
            "format": "date"
          },
          "classroomPositionDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of position the Staff member holds in the specific class/section; for example:          Teacher of Record, Assistant Teacher, Support Teacher, Substitute Teacher..."
          },
          "endDate": {
            "type": "string",
            "description": "Month, day, and year of the last day of a staff member's assignment to the Section.",
            "format": "date"
          },
          "highlyQualifiedTeacher": {
            "type": "boolean",
            "description": "An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught."
          },
          "percentageContribution": {
            "type": "number",
            "description": "Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage.",
            "format": "double"
          },
          "teacherStudentDataLinkExclusion": {
            "type": "boolean",
            "description": "Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "staffTelephone": {
        "required": [ "telephoneNumber", "telephoneNumberTypeDescriptor" ],
        "type": "object",
        "properties": {
          "telephoneNumberTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of communication number listed for an individual or organization.",
            "x-Ed-Fi-isIdentity": true
          },
          "doNotPublishIndicator": {
            "type": "boolean",
            "description": "An indication that the telephone number should not be published."
          },
          "orderOfPriority": {
            "type": "integer",
            "description": "The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.",
            "format": "int32"
          },
          "telephoneNumber": {
            "maxLength": 24,
            "type": "string",
            "description": "The telephone number including the area code, and extension, if applicable."
          },
          "textMessageCapabilityIndicator": {
            "type": "boolean",
            "description": "An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages."
          }
        }
      },
      "staffTribalAffiliation": {
        "required": [ "tribalAffiliationDescriptor" ],
        "type": "object",
        "properties": {
          "tribalAffiliationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An American Indian tribe with which the staff member is affiliated.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "staffVisa": {
        "required": [ "visaDescriptor" ],
        "type": "object",
        "properties": {
          "visaDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indicator of a non-US citizen's Visa type.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "stateEducationAgency": {
        "required": [ "addresses", "categories", "id", "nameOfInstitution", "stateEducationAgencyId" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationAddresses. The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationAddress"
            }
          },
          "categories": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationCategories. The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationCategory"
            }
          },
          "stateEducationAgencyId": {
            "type": "integer",
            "description": "The identifier assigned to a state education agency.",
            "format": "int32",
            "x-Ed-Fi-isIdentity": true
          },
          "accountabilities": {
            "type": "array",
            "description": "An unordered collection of stateEducationAgencyAccountabilities. This entity maintains information about federal reporting and accountability for state education agencies.",
            "items": {
              "$ref": "#/components/schemas/stateEducationAgencyAccountability"
            }
          },
          "federalFunds": {
            "type": "array",
            "description": "An unordered collection of stateEducationAgencyFederalFunds. Contains the information about the reception and use of federal funds for reporting purposes.",
            "items": {
              "$ref": "#/components/schemas/stateEducationAgencyFederalFunds"
            }
          },
          "identificationCodes": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationIdentificationCodes. A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationIdentificationCode"
            }
          },
          "institutionTelephones": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInstitutionTelephones. The 10-digit telephone number, including the area code, for the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInstitutionTelephone"
            }
          },
          "internationalAddresses": {
            "type": "array",
            "description": "An unordered collection of educationOrganizationInternationalAddresses. The set of elements that describes the international physical location of the education entity.",
            "items": {
              "$ref": "#/components/schemas/educationOrganizationInternationalAddress"
            }
          },
          "nameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "The full, legally accepted name of the institution."
          },
          "operationalStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The current operational status of the EducationOrganization (e.g., active, inactive)."
          },
          "shortNameOfInstitution": {
            "maxLength": 75,
            "type": "string",
            "description": "A short name for the institution."
          },
          "webSite": {
            "maxLength": 255,
            "type": "string",
            "description": "The public web site address (URL) for the EducationOrganization."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "stateEducationAgencyAccountability": {
        "required": [ "schoolYearTypeReference" ],
        "type": "object",
        "properties": {
          "cteGraduationRateInclusion": {
            "type": "boolean",
            "description": "An indication of whether CTE concentrators are included in the state's computation of its graduation rate."
          },
          "schoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          }
        }
      },
      "stateEducationAgencyFederalFunds": {
        "required": [ "fiscalYear" ],
        "type": "object",
        "properties": {
          "fiscalYear": {
            "type": "integer",
            "description": "The fiscal year for which the federal funds are received.",
            "format": "int32",
            "x-Ed-Fi-isIdentity": true
          },
          "federalProgramsFundingAllocation": {
            "type": "number",
            "description": "The amount of federal dollars distributed to Local Education Agencies (LEAs), retained by the State Education Agency (SEA) for program administration or other approved state-level activities (including unallocated, transferred to another state agency, or distributed to entities other than LEAs).",
            "format": "double"
          }
        }
      },
      "stateEducationAgencyReference": {
        "required": [ "stateEducationAgencyId" ],
        "type": "object",
        "properties": {
          "stateEducationAgencyId": {
            "type": "integer",
            "description": "The identifier assigned to a state education agency.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "student": {
        "required": [ "birthDate", "firstName", "id", "lastSurname", "studentUniqueId" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "studentUniqueId": {
            "maxLength": 32,
            "type": "string",
            "description": "A unique alphanumeric code assigned to a student.",
            "x-Ed-Fi-isIdentity": true
          },
          "birthCity": {
            "maxLength": 30,
            "type": "string",
            "description": "The city the student was born in."
          },
          "birthCountryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes."
          },
          "birthDate": {
            "type": "string",
            "description": "The month, day, and year on which an individual was born.",
            "format": "date"
          },
          "birthInternationalProvince": {
            "maxLength": 150,
            "type": "string",
            "description": "For students born outside of the U.S., the Province or jurisdiction in which an individual is born."
          },
          "birthSexDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A person's gender at birth."
          },
          "birthStateAbbreviationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born."
          },
          "citizenshipStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indicator of whether or not the person is a U.S. citizen."
          },
          "dateEnteredUS": {
            "type": "string",
            "description": "For students born outside of the U.S., the date the student entered the U.S.",
            "format": "date"
          },
          "firstName": {
            "maxLength": 75,
            "type": "string",
            "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change."
          },
          "generationCodeSuffix": {
            "maxLength": 10,
            "type": "string",
            "description": "An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III)."
          },
          "identificationDocuments": {
            "type": "array",
            "description": "An unordered collection of studentIdentificationDocuments. Describe the documentation of citizenship.",
            "items": {
              "$ref": "#/components/schemas/studentIdentificationDocument"
            }
          },
          "lastSurname": {
            "maxLength": 75,
            "type": "string",
            "description": "The name borne in common by members of a family."
          },
          "maidenName": {
            "maxLength": 75,
            "type": "string",
            "description": "The person's maiden name."
          },
          "middleName": {
            "maxLength": 75,
            "type": "string",
            "description": "A secondary name given to an individual at birth, baptism, or during another naming ceremony."
          },
          "multipleBirthStatus": {
            "type": "boolean",
            "description": "Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)"
          },
          "otherNames": {
            "type": "array",
            "description": "An unordered collection of studentOtherNames. Other names (e.g., alias, nickname, previous legal name) associated with a person.",
            "items": {
              "$ref": "#/components/schemas/studentOtherName"
            }
          },
          "personalIdentificationDocuments": {
            "type": "array",
            "description": "An unordered collection of studentPersonalIdentificationDocuments. The documents presented as evident to verify one's personal identity; for example: drivers license, passport, birth certificate, etc.",
            "items": {
              "$ref": "#/components/schemas/studentPersonalIdentificationDocument"
            }
          },
          "personalTitlePrefix": {
            "maxLength": 30,
            "type": "string",
            "description": "A prefix used to denote the title, degree, position, or seniority of the person."
          },
          "visas": {
            "type": "array",
            "description": "An unordered collection of studentVisas. An indicator of a non-US citizen's Visa type.",
            "items": {
              "$ref": "#/components/schemas/studentVisa"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentAcademicRecord": {
        "required": [ "educationOrganizationReference", "id", "schoolYearTypeReference", "studentReference", "termDescriptor" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "termDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The term for the session during the school year.",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "schoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "academicHonors": {
            "type": "array",
            "description": "An unordered collection of studentAcademicRecordAcademicHonors. Academic distinctions earned by or awarded to the student.",
            "items": {
              "$ref": "#/components/schemas/studentAcademicRecordAcademicHonor"
            }
          },
          "classRanking": {
            "$ref": "#/components/schemas/studentAcademicRecordClassRanking"
          },
          "cumulativeAttemptedCreditConversion": {
            "type": "number",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "format": "double"
          },
          "cumulativeAttemptedCredits": {
            "type": "number",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "format": "double"
          },
          "cumulativeAttemptedCreditTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of credits or units of value awarded for the completion of a course."
          },
          "cumulativeEarnedCreditConversion": {
            "type": "number",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "format": "double"
          },
          "cumulativeEarnedCredits": {
            "type": "number",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "format": "double"
          },
          "cumulativeEarnedCreditTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of credits or units of value awarded for the completion of a course."
          },
          "cumulativeGradePointAverage": {
            "type": "number",
            "description": "A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.",
            "format": "double"
          },
          "cumulativeGradePointsEarned": {
            "type": "number",
            "description": "The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.",
            "format": "double"
          },
          "diplomas": {
            "type": "array",
            "description": "An unordered collection of studentAcademicRecordDiplomas. Diploma(s) earned by the student.",
            "items": {
              "$ref": "#/components/schemas/studentAcademicRecordDiploma"
            }
          },
          "gradeValueQualifier": {
            "maxLength": 80,
            "type": "string",
            "description": "The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student's Grade Point Average (A=4, B=3, C=2, D=1 in a four-point system) or letter equivalents for percentage grades (90-100%=A, 80-90%=B, etc.)"
          },
          "projectedGraduationDate": {
            "type": "string",
            "description": "The month and year the student is projected to graduate.",
            "format": "date"
          },
          "recognitions": {
            "type": "array",
            "description": "An unordered collection of studentAcademicRecordRecognitions. Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.",
            "items": {
              "$ref": "#/components/schemas/studentAcademicRecordRecognition"
            }
          },
          "reportCards": {
            "type": "array",
            "description": "An unordered collection of studentAcademicRecordReportCards. Report cards for the student.",
            "items": {
              "$ref": "#/components/schemas/studentAcademicRecordReportCard"
            }
          },
          "sessionAttemptedCreditConversion": {
            "type": "number",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "format": "double"
          },
          "sessionAttemptedCredits": {
            "type": "number",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "format": "double"
          },
          "sessionAttemptedCreditTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of credits or units of value awarded for the completion of a course."
          },
          "sessionEarnedCreditConversion": {
            "type": "number",
            "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
            "format": "double"
          },
          "sessionEarnedCredits": {
            "type": "number",
            "description": "The value of credits or units of value awarded for the completion of a course.",
            "format": "double"
          },
          "sessionEarnedCreditTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of credits or units of value awarded for the completion of a course."
          },
          "sessionGradePointAverage": {
            "type": "number",
            "description": "The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.",
            "format": "double"
          },
          "sessionGradePointsEarned": {
            "type": "number",
            "description": "The number of grade points an individual earned for this session.",
            "format": "double"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentAcademicRecordAcademicHonor": {
        "required": [ "academicHonorCategoryDescriptor", "honorDescription" ],
        "type": "object",
        "properties": {
          "academicHonorCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A designation of the type of academic distinctions earned by or awarded to the student.",
            "x-Ed-Fi-isIdentity": true
          },
          "honorDescription": {
            "maxLength": 80,
            "type": "string",
            "description": "A description of the type of academic distinctions earned by or awarded to the individual.",
            "x-Ed-Fi-isIdentity": true
          },
          "achievementCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The category of achievement attributed to the learner."
          },
          "achievementCategorySystem": {
            "maxLength": 60,
            "type": "string",
            "description": "The system that defines the categories by which an achievement is attributed to the learner."
          },
          "achievementTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The title assigned to the achievement."
          },
          "criteria": {
            "maxLength": 150,
            "type": "string",
            "description": "The criteria for competency-based completion of the achievement/award."
          },
          "criteriaURL": {
            "maxLength": 255,
            "type": "string",
            "description": "The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award."
          },
          "evidenceStatement": {
            "maxLength": 150,
            "type": "string",
            "description": "A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement."
          },
          "honorAwardDate": {
            "type": "string",
            "description": "The date the honor was awarded or earned.",
            "format": "date"
          },
          "honorAwardExpiresDate": {
            "type": "string",
            "description": "Date on which the award expires.",
            "format": "date"
          },
          "imageURL": {
            "maxLength": 255,
            "type": "string",
            "description": "The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement."
          },
          "issuerName": {
            "maxLength": 150,
            "type": "string",
            "description": "The name of the agent, entity, or institution issuing the element."
          },
          "issuerOriginURL": {
            "maxLength": 255,
            "type": "string",
            "description": "The Uniform Resource Locator (URL) from which the award was issued."
          }
        }
      },
      "studentAcademicRecordClassRanking": {
        "required": [ "classRank", "totalNumberInClass" ],
        "type": "object",
        "properties": {
          "classRank": {
            "type": "integer",
            "description": "The academic rank of a student in relation to his or her graduating class (e.g., 1st, 2nd, 3rd).",
            "format": "int32"
          },
          "classRankingDate": {
            "type": "string",
            "description": "Date class ranking was determined.",
            "format": "date"
          },
          "percentageRanking": {
            "type": "integer",
            "description": "The academic percentage rank of a student in relation to his or her graduating class (e.g., 95%, 80%, 50%).",
            "format": "int32"
          },
          "totalNumberInClass": {
            "type": "integer",
            "description": "The total number of students in the student's graduating class.",
            "format": "int32"
          }
        }
      },
      "studentAcademicRecordDiploma": {
        "required": [ "diplomaAwardDate", "diplomaTypeDescriptor" ],
        "type": "object",
        "properties": {
          "diplomaTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.",
            "x-Ed-Fi-isIdentity": true
          },
          "diplomaAwardDate": {
            "type": "string",
            "description": "The month, day, and year on which the student met  graduation requirements and was awarded a diploma.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "achievementCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The category of achievement attributed to the learner."
          },
          "diplomaLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The level of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.          Minimum high school program          Recommended high school program          Distinguished Achievement Program."
          },
          "achievementCategorySystem": {
            "maxLength": 60,
            "type": "string",
            "description": "The system that defines the categories by which an achievement is attributed to the learner."
          },
          "achievementTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The title assigned to the achievement."
          },
          "criteria": {
            "maxLength": 150,
            "type": "string",
            "description": "The criteria for competency-based completion of the achievement/award."
          },
          "criteriaURL": {
            "maxLength": 255,
            "type": "string",
            "description": "The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award."
          },
          "cteCompleter": {
            "type": "boolean",
            "description": "Indicated a student who reached a state-defined threshold of vocational education and who attained a high school diploma or its recognized state equivalent or GED."
          },
          "diplomaAwardExpiresDate": {
            "type": "string",
            "description": "Date on which the award expires.",
            "format": "date"
          },
          "diplomaDescription": {
            "maxLength": 80,
            "type": "string",
            "description": "The description of diploma given to the student for accomplishments."
          },
          "evidenceStatement": {
            "maxLength": 150,
            "type": "string",
            "description": "A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement."
          },
          "imageURL": {
            "maxLength": 255,
            "type": "string",
            "description": "The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement."
          },
          "issuerName": {
            "maxLength": 150,
            "type": "string",
            "description": "The name of the agent, entity, or institution issuing the element."
          },
          "issuerOriginURL": {
            "maxLength": 255,
            "type": "string",
            "description": "The Uniform Resource Locator (URL) from which the award was issued."
          }
        }
      },
      "studentAcademicRecordRecognition": {
        "required": [ "recognitionTypeDescriptor" ],
        "type": "object",
        "properties": {
          "recognitionTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The nature of recognition given to the learner for accomplishments in a co-curricular, or extra-curricular activity.",
            "x-Ed-Fi-isIdentity": true
          },
          "achievementCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The category of achievement attributed to the learner."
          },
          "achievementCategorySystem": {
            "maxLength": 60,
            "type": "string",
            "description": "The system that defines the categories by which an achievement is attributed to the learner."
          },
          "achievementTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The title assigned to the achievement."
          },
          "criteria": {
            "maxLength": 150,
            "type": "string",
            "description": "The criteria for competency-based completion of the achievement/award."
          },
          "criteriaURL": {
            "maxLength": 255,
            "type": "string",
            "description": "The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award."
          },
          "evidenceStatement": {
            "maxLength": 150,
            "type": "string",
            "description": "A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement."
          },
          "imageURL": {
            "maxLength": 255,
            "type": "string",
            "description": "The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement."
          },
          "issuerName": {
            "maxLength": 150,
            "type": "string",
            "description": "The name of the agent, entity, or institution issuing the element."
          },
          "issuerOriginURL": {
            "maxLength": 255,
            "type": "string",
            "description": "The Uniform Resource Locator (URL) from which the award was issued."
          },
          "recognitionAwardDate": {
            "type": "string",
            "description": "The date the recognition was awarded or earned.",
            "format": "date"
          },
          "recognitionAwardExpiresDate": {
            "type": "string",
            "description": "Date on which the award expires.",
            "format": "date"
          },
          "recognitionDescription": {
            "maxLength": 80,
            "type": "string",
            "description": "A description of the type of academic distinctions earned by or awarded to the individual."
          }
        }
      },
      "studentAcademicRecordReference": {
        "required": [ "educationOrganizationId", "schoolYear", "studentUniqueId", "termDescriptor" ],
        "type": "object",
        "properties": {
          "educationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "schoolYear": {
            "type": "integer",
            "description": "The identifier for the school year.",
            "format": "int32"
          },
          "studentUniqueId": {
            "maxLength": 32,
            "type": "string",
            "description": "A unique alphanumeric code assigned to a student."
          },
          "termDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The term for the session during the school year."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "studentAcademicRecordReportCard": {
        "required": [ "reportCardReference" ],
        "type": "object",
        "properties": {
          "reportCardReference": {
            "$ref": "#/components/schemas/reportCardReference"
          }
        }
      },
      "studentAssessment": {
        "required": [ "administrationDate", "assessmentReference", "id", "studentAssessmentIdentifier", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "studentAssessmentIdentifier": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to an assessment administered to a student.",
            "x-Ed-Fi-isIdentity": true
          },
          "assessmentReference": {
            "$ref": "#/components/schemas/assessmentReference"
          },
          "schoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "accommodations": {
            "type": "array",
            "description": "An unordered collection of studentAssessmentAccommodations. The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:          Braille          Enlarged monitor view          Extra time          Large Print          Setting          Oral Administration          ...",
            "items": {
              "$ref": "#/components/schemas/studentAssessmentAccommodation"
            }
          },
          "administrationDate": {
            "type": "string",
            "description": "The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.",
            "format": "date-time"
          },
          "administrationEndDate": {
            "type": "string",
            "description": "The date and time an assessment administration ended.",
            "format": "date-time"
          },
          "administrationEnvironmentDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The environment in which the test was administered. For example:          Electronic          Classroom          Testing Center          ..."
          },
          "administrationLanguageDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The language in which an assessment is written and/or administered."
          },
          "eventCircumstanceDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc."
          },
          "eventDescription": {
            "maxLength": 1024,
            "type": "string",
            "description": "Describes special events that occur before during or after the assessment session that may impact use of results."
          },
          "items": {
            "type": "array",
            "description": "An unordered collection of studentAssessmentItems. The student's response to an assessment item and the item-level scores such as correct, incorrect, or met standard.",
            "items": {
              "$ref": "#/components/schemas/studentAssessmentItem"
            }
          },
          "performanceLevels": {
            "type": "array",
            "description": "An unordered collection of studentAssessmentPerformanceLevels. The performance level(s) achieved for the StudentAssessment.",
            "items": {
              "$ref": "#/components/schemas/studentAssessmentPerformanceLevel"
            }
          },
          "reasonNotTestedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The primary reason student is not tested. For example:          Absent          Refusal by parent          Refusal by student          Medical waiver          Illness          Disruptive behavior          LEP Exempt          ..."
          },
          "retestIndicatorDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicator if the test was retaken. For example:          Primary administration          First retest          Second retest          ..."
          },
          "scoreResults": {
            "type": "array",
            "description": "An unordered collection of studentAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.",
            "items": {
              "$ref": "#/components/schemas/studentAssessmentScoreResult"
            }
          },
          "serialNumber": {
            "maxLength": 60,
            "type": "string",
            "description": "The unique number for the assessment form or answer document."
          },
          "studentObjectiveAssessments": {
            "type": "array",
            "description": "An unordered collection of studentAssessmentStudentObjectiveAssessments. The student's score and/or performance levels earned for an ObjectiveAssessment.",
            "items": {
              "$ref": "#/components/schemas/studentAssessmentStudentObjectiveAssessment"
            }
          },
          "whenAssessedGradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade level of a student when assessed."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentAssessmentAccommodation": {
        "required": [ "accommodationDescriptor" ],
        "type": "object",
        "properties": {
          "accommodationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:          Braille          Enlarged monitor view          Extra time          Large Print          Setting          Oral Administration          ...",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "studentAssessmentItem": {
        "required": [ "assessmentItemReference", "assessmentItemResultDescriptor" ],
        "type": "object",
        "properties": {
          "assessmentItemResultDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The analyzed result of a student's response to an assessment item. For example:          Correct          Incorrect           Met standard          ..."
          },
          "responseIndicatorDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicator of the response. For example:          Nonscorable response          Ineffective response          Effective response          Partial response          ..."
          },
          "assessmentResponse": {
            "maxLength": 60,
            "type": "string",
            "description": "A student's response to a stimulus on a test."
          },
          "descriptiveFeedback": {
            "maxLength": 1024,
            "type": "string",
            "description": "The formative descriptive feedback that was given to a learner in response to the results from a scored/evaluated assessment item."
          },
          "rawScoreResult": {
            "type": "integer",
            "description": "A meaningful raw score of the performance of an individual on an assessment item.",
            "format": "int32"
          },
          "timeAssessed": {
            "maxLength": 30,
            "type": "string",
            "description": "The overall time a student actually spent during the AssessmentItem."
          },
          "assessmentItemReference": {
            "$ref": "#/components/schemas/assessmentItemReference"
          }
        }
      },
      "studentAssessmentPerformanceLevel": {
        "required": [ "assessmentReportingMethodDescriptor", "performanceLevelDescriptor", "performanceLevelMet" ],
        "type": "object",
        "properties": {
          "assessmentReportingMethodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The method that the instructor of the class uses to report the performance and achievement. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.",
            "x-Ed-Fi-isIdentity": true
          },
          "performanceLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A specification of which performance level value describes the student proficiency.",
            "x-Ed-Fi-isIdentity": true
          },
          "performanceLevelMet": {
            "type": "boolean",
            "description": "Optional indicator of whether the performance level was met."
          }
        }
      },
      "studentAssessmentScoreResult": {
        "required": [ "assessmentReportingMethodDescriptor", "result", "resultDatatypeTypeDescriptor" ],
        "type": "object",
        "properties": {
          "assessmentReportingMethodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.",
            "x-Ed-Fi-isIdentity": true
          },
          "resultDatatypeTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The datatype of the result. The results can be expressed as a number, percentile, range, level, etc."
          },
          "result": {
            "maxLength": 35,
            "type": "string",
            "description": "The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc."
          }
        }
      },
      "studentAssessmentStudentObjectiveAssessment": {
        "required": [ "objectiveAssessmentReference", "scoreResults" ],
        "type": "object",
        "properties": {
          "objectiveAssessmentReference": {
            "$ref": "#/components/schemas/objectiveAssessmentReference"
          },
          "performanceLevels": {
            "type": "array",
            "description": "An unordered collection of studentAssessmentStudentObjectiveAssessmentPerformanceLevels. The PerformanceLevel(s) achieved for the ObjectiveAssessment.",
            "items": {
              "$ref": "#/components/schemas/studentAssessmentStudentObjectiveAssessmentPerformanceLevel"
            }
          },
          "scoreResults": {
            "type": "array",
            "description": "An unordered collection of studentAssessmentStudentObjectiveAssessmentScoreResults. A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.",
            "items": {
              "$ref": "#/components/schemas/studentAssessmentStudentObjectiveAssessmentScoreResult"
            }
          }
        }
      },
      "studentAssessmentStudentObjectiveAssessmentPerformanceLevel": {
        "required": [ "assessmentReportingMethodDescriptor", "performanceLevelDescriptor", "performanceLevelMet" ],
        "type": "object",
        "properties": {
          "assessmentReportingMethodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The method that the instructor of the class uses to report the performance and achievement. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.",
            "x-Ed-Fi-isIdentity": true
          },
          "performanceLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A specification of which performance level value describes the student proficiency.",
            "x-Ed-Fi-isIdentity": true
          },
          "performanceLevelMet": {
            "type": "boolean",
            "description": "Optional indicator of whether the performance level was met."
          }
        }
      },
      "studentAssessmentStudentObjectiveAssessmentScoreResult": {
        "required": [ "assessmentReportingMethodDescriptor", "result", "resultDatatypeTypeDescriptor" ],
        "type": "object",
        "properties": {
          "assessmentReportingMethodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.",
            "x-Ed-Fi-isIdentity": true
          },
          "resultDatatypeTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The datatype of the result. The results can be expressed as a number, percentile, range, level, etc."
          },
          "result": {
            "maxLength": 35,
            "type": "string",
            "description": "The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc."
          }
        }
      },
      "studentCohortAssociation": {
        "required": [ "beginDate", "cohortReference", "id", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student was first identified as part of the Cohort.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "cohortReference": {
            "$ref": "#/components/schemas/cohortReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student was removed as part of the Cohort.",
            "format": "date"
          },
          "sections": {
            "type": "array",
            "description": "An unordered collection of studentCohortAssociationSections. The Cohort representing the subdivision of students within one or more sections. For example, a group of students may be given additional instruction and tracked as a cohort.",
            "items": {
              "$ref": "#/components/schemas/studentCohortAssociationSection"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentCohortAssociationSection": {
        "required": [ "sectionReference" ],
        "type": "object",
        "properties": {
          "sectionReference": {
            "$ref": "#/components/schemas/sectionReference"
          }
        }
      },
      "studentCompetencyObjective": {
        "required": [ "competencyLevelDescriptor", "gradingPeriodReference", "id", "objectiveCompetencyObjectiveReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "gradingPeriodReference": {
            "$ref": "#/components/schemas/gradingPeriodReference"
          },
          "objectiveCompetencyObjectiveReference": {
            "$ref": "#/components/schemas/competencyObjectiveReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "competencyLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The CompetencyLevel assessed for the student for the referenced LearningObjective."
          },
          "diagnosticStatement": {
            "maxLength": 1024,
            "type": "string",
            "description": "A statement provided by the teacher that provides information in addition to the grade or assessment score."
          },
          "generalStudentProgramAssociations": {
            "type": "array",
            "description": "An unordered collection of studentCompetencyObjectiveGeneralStudentProgramAssociations. Relates the Student and Program associated with the CompetencyObjective.",
            "items": {
              "$ref": "#/components/schemas/studentCompetencyObjectiveGeneralStudentProgramAssociation"
            }
          },
          "studentSectionAssociations": {
            "type": "array",
            "description": "An unordered collection of studentCompetencyObjectiveStudentSectionAssociations. Relates the Student and Section associated with the CompetencyObjective.",
            "items": {
              "$ref": "#/components/schemas/studentCompetencyObjectiveStudentSectionAssociation"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentCompetencyObjectiveGeneralStudentProgramAssociation": {
        "required": [ "generalStudentProgramAssociationReference" ],
        "type": "object",
        "properties": {
          "generalStudentProgramAssociationReference": {
            "$ref": "#/components/schemas/generalStudentProgramAssociationReference"
          }
        }
      },
      "studentCompetencyObjectiveReference": {
        "required": [ "gradingPeriodDescriptor", "gradingPeriodSchoolId", "gradingPeriodSchoolYear", "gradingPeriodSequence", "objective", "objectiveEducationOrganizationId", "objectiveGradeLevelDescriptor", "studentUniqueId" ],
        "type": "object",
        "properties": {
          "gradingPeriodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The name of the period for which grades are reported."
          },
          "gradingPeriodSchoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "gradingPeriodSchoolYear": {
            "type": "integer",
            "description": "The identifier for the grading period school year.",
            "format": "int32"
          },
          "gradingPeriodSequence": {
            "type": "integer",
            "description": "The sequential order of this period relative to other periods.",
            "format": "int32"
          },
          "objective": {
            "maxLength": 60,
            "type": "string",
            "description": "The designated title of the CompetencyObjective."
          },
          "objectiveEducationOrganizationId": {
            "type": "integer",
            "description": "The identifier assigned to an education organization.",
            "format": "int32"
          },
          "objectiveGradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade level for which the CompetencyObjective is targeted."
          },
          "studentUniqueId": {
            "maxLength": 32,
            "type": "string",
            "description": "A unique alphanumeric code assigned to a student."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "studentCompetencyObjectiveStudentSectionAssociation": {
        "required": [ "studentSectionAssociationReference" ],
        "type": "object",
        "properties": {
          "studentSectionAssociationReference": {
            "$ref": "#/components/schemas/studentSectionAssociationReference"
          }
        }
      },
      "studentCTEProgramAssociation": {
        "required": [ "beginDate", "educationOrganizationReference", "id", "programReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student first received services.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "ctePrograms": {
            "type": "array",
            "description": "An unordered collection of studentCTEProgramAssociationCTEPrograms. The career cluster representing the career path of the Vocational/Career Tech concentrator.",
            "items": {
              "$ref": "#/components/schemas/studentCTEProgramAssociationCTEProgram"
            }
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student exited the Program or stopped receiving services.",
            "format": "date"
          },
          "nonTraditionalGenderStatus": {
            "type": "boolean",
            "description": "Indicator that student is from a gender group that comprises less than 25% of the individuals employed in an occupation or field of work."
          },
          "privateCTEProgram": {
            "type": "boolean",
            "description": "Indicator that student participated in career and technical education at private agencies or institutions that are reported by the state for purposes of the Elementary and Secondary Education Act (ESEA).  Students in private institutions which do not receive Perkins funding are reported only in the state file."
          },
          "reasonExitedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The reason the child left the Program within a school or district."
          },
          "servedOutsideOfRegularSession": {
            "type": "boolean",
            "description": "Indicates whether the Student received services during the summer session or between sessions."
          },
          "services": {
            "type": "array",
            "description": "An unordered collection of studentCTEProgramAssociationServices. Indicates the Service(s) being provided to the Student by the Program.",
            "items": {
              "$ref": "#/components/schemas/studentCTEProgramAssociationService"
            }
          },
          "technicalSkillsAssessmentDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Results of technical skills assessment aligned with industry recognized standards."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentCTEProgramAssociationCTEProgram": {
        "required": [ "careerPathwayDescriptor" ],
        "type": "object",
        "properties": {
          "careerPathwayDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A sequence of courses within an area of interest that is a student's educational road map to a chosen career.",
            "x-Ed-Fi-isIdentity": true
          },
          "cipCode": {
            "maxLength": 120,
            "type": "string",
            "description": "Number and description of the CIP Code associated with the student's CTEProgram."
          },
          "cteProgramCompletionIndicator": {
            "type": "boolean",
            "description": "A boolean indicator of whether the Student has completed the CTEProgram."
          },
          "primaryCTEProgramIndicator": {
            "type": "boolean",
            "description": "A boolean indicator of whether this CTEProgram, is the student's primary CTEProgram."
          }
        }
      },
      "studentCTEProgramAssociationService": {
        "required": [ "serviceDescriptor" ],
        "type": "object",
        "properties": {
          "serviceDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the Service being provided to the student by the Program.",
            "x-Ed-Fi-isIdentity": true
          },
          "primaryIndicator": {
            "type": "boolean",
            "description": "True if service is a primary service."
          },
          "serviceBeginDate": {
            "type": "string",
            "description": "First date the Student was in this option for the current school year.",
            "format": "date"
          },
          "serviceEndDate": {
            "type": "string",
            "description": "Last date the Student was in this option for the current school year.",
            "format": "date"
          }
        }
      },
      "studentDisciplineIncidentAssociation": {
        "required": [ "disciplineIncidentReference", "id", "studentParticipationCodeDescriptor", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "disciplineIncidentReference": {
            "$ref": "#/components/schemas/disciplineIncidentReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "behaviors": {
            "type": "array",
            "description": "An unordered collection of studentDisciplineIncidentAssociationBehaviors. Describes behavior by category and provides a detailed description.",
            "items": {
              "$ref": "#/components/schemas/studentDisciplineIncidentAssociationBehavior"
            }
          },
          "studentParticipationCodeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The role or type of participation of a student in a discipline incident;           for example:          Victim          Perpetrator          Witness          Reporter."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentDisciplineIncidentAssociationBehavior": {
        "required": [ "behaviorDescriptor" ],
        "type": "object",
        "properties": {
          "behaviorDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Describes behavior by category and provides a detailed description.",
            "x-Ed-Fi-isIdentity": true
          },
          "behaviorDetailedDescription": {
            "maxLength": 1024,
            "type": "string",
            "description": "Specifies a more granular level of detail of a behavior involved in the incident."
          }
        }
      },
      "studentDisciplineIncidentAssociationReference": {
        "required": [ "incidentIdentifier", "schoolId", "studentUniqueId" ],
        "type": "object",
        "properties": {
          "incidentIdentifier": {
            "maxLength": 20,
            "type": "string",
            "description": "A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders."
          },
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "studentUniqueId": {
            "maxLength": 32,
            "type": "string",
            "description": "A unique alphanumeric code assigned to a student."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "studentEducationOrganizationAssociation": {
        "required": [ "educationOrganizationReference", "id", "sexDescriptor", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "addresses": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationAddress"
            }
          },
          "cohortYears": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationCohortYears. The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationCohortYear"
            }
          },
          "disabilities": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationDisabilities. The disability condition(s) that best describes an individual's impairment, as determined by evaluation(s) conducted by the education organization.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationDisability"
            }
          },
          "electronicMails": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationElectronicMails. The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationElectronicMail"
            }
          },
          "hispanicLatinoEthnicity": {
            "type": "boolean",
            "description": "An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\""
          },
          "internationalAddresses": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationInternationalAddresses. The set of elements that describes an international address.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationInternationalAddress"
            }
          },
          "languages": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationLanguages. The language(s) the individual uses to communicate. It is strongly recommended that entries use only ISO 639-3 language codes.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationLanguage"
            }
          },
          "limitedEnglishProficiencyDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient."
          },
          "loginId": {
            "maxLength": 60,
            "type": "string",
            "description": "The login ID for the user; used for security access control interface."
          },
          "oldEthnicityDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Previous definition of Ethnicity combining Hispanic/Latino and race:          1 - American Indian or Alaskan Native          2 - Asian or Pacific Islander          3 - Black, not of Hispanic origin          4 - Hispanic          5 - White, not of Hispanic origin."
          },
          "profileThumbnail": {
            "maxLength": 255,
            "type": "string",
            "description": "Locator reference for the student photo. The specification for that reference is left to local definition."
          },
          "programParticipations": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationProgramParticipations. Key programs the student is participating in or receives services from.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationProgramParticipation"
            }
          },
          "races": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationRaces. The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationRace"
            }
          },
          "sexDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A person's gender."
          },
          "studentCharacteristics": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationStudentCharacteristics. Reflects important characteristics of the student's home situation:          Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationStudentCharacteristic"
            }
          },
          "studentIdentificationCodes": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationStudentIdentificationCodes. A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationStudentIdentificationCode"
            }
          },
          "studentIndicators": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationStudentIndicators. Indicator(s) or metric(s) computed for the student (e.g., at risk) to influence more effective education or direct specific interventions.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationStudentIndicator"
            }
          },
          "telephones": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationTelephones. The 10-digit telephone number, including the area code, for the person.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationTelephone"
            }
          },
          "tribalAffiliations": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationTribalAffiliations. An American Indian tribe with which the student is affiliated.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationTribalAffiliation"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentEducationOrganizationAssociationAddress": {
        "required": [ "addressTypeDescriptor", "city", "postalCode", "stateAbbreviationDescriptor", "streetNumberName" ],
        "type": "object",
        "properties": {
          "addressTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)",
            "x-Ed-Fi-isIdentity": true
          },
          "localeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban)."
          },
          "stateAbbreviationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The abbreviation for the state (within the United States) or outlying area in which an address is located."
          },
          "apartmentRoomSuiteNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The apartment, room, or suite number of an address."
          },
          "buildingSiteNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "The number of the building on the site, if more than one building shares the same address."
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of the city in which an address is located."
          },
          "congressionalDistrict": {
            "maxLength": 30,
            "type": "string",
            "description": "The congressional district in which an address is located."
          },
          "countyFIPSCode": {
            "maxLength": 5,
            "type": "string",
            "description": "The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code."
          },
          "doNotPublishIndicator": {
            "type": "boolean",
            "description": "An indication that the address should not be published."
          },
          "latitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic latitude of the physical address."
          },
          "longitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic longitude of the physical address."
          },
          "nameOfCounty": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located."
          },
          "postalCode": {
            "maxLength": 17,
            "type": "string",
            "description": "The five or nine digit zip code or overseas postal code portion of an address."
          },
          "streetNumberName": {
            "maxLength": 150,
            "type": "string",
            "description": "The street number and street name or post office box number of an address."
          },
          "periods": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationAddressPeriods. The time periods for which the address is valid. For physical addresses, the periods in which the person lived at that address.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationAddressPeriod"
            }
          }
        }
      },
      "studentEducationOrganizationAssociationAddressPeriod": {
        "required": [ "beginDate" ],
        "type": "object",
        "properties": {
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year for the start of the period.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year for the end of the period.",
            "format": "date"
          }
        }
      },
      "studentEducationOrganizationAssociationCohortYear": {
        "required": [ "cohortYearTypeDescriptor", "schoolYearTypeReference" ],
        "type": "object",
        "properties": {
          "cohortYearTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of cohort year (9th grade, graduation).",
            "x-Ed-Fi-isIdentity": true
          },
          "schoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          }
        }
      },
      "studentEducationOrganizationAssociationDisability": {
        "required": [ "disabilityDescriptor" ],
        "type": "object",
        "properties": {
          "disabilityDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A disability category that describes a child's impairment.",
            "x-Ed-Fi-isIdentity": true
          },
          "disabilityDeterminationSourceTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The source that provided the disability determination."
          },
          "disabilityDiagnosis": {
            "maxLength": 80,
            "type": "string",
            "description": "A description of the disability diagnosis."
          },
          "orderOfDisability": {
            "type": "integer",
            "description": "The order by severity of student's disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.",
            "format": "int32"
          },
          "designations": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationDisabilityDesignations. Whether the disability is IDEA, Section 504, or other disability designation.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationDisabilityDesignation"
            }
          }
        }
      },
      "studentEducationOrganizationAssociationDisabilityDesignation": {
        "required": [ "disabilityDesignationDescriptor" ],
        "type": "object",
        "properties": {
          "disabilityDesignationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Whether the disability is IDEA, Section 504, or other disability designation.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "studentEducationOrganizationAssociationElectronicMail": {
        "required": [ "electronicMailAddress", "electronicMailTypeDescriptor" ],
        "type": "object",
        "properties": {
          "electronicMailTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)",
            "x-Ed-Fi-isIdentity": true
          },
          "doNotPublishIndicator": {
            "type": "boolean",
            "description": "An indication that the electronic email address should not be published."
          },
          "electronicMailAddress": {
            "maxLength": 128,
            "type": "string",
            "description": "The electronic mail (e-mail) address listed for an individual or organization."
          },
          "primaryEmailAddressIndicator": {
            "type": "boolean",
            "description": "An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization."
          }
        }
      },
      "studentEducationOrganizationAssociationInternationalAddress": {
        "required": [ "addressLine1", "addressTypeDescriptor", "countryDescriptor" ],
        "type": "object",
        "properties": {
          "addressTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)",
            "x-Ed-Fi-isIdentity": true
          },
          "countryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The name of the country. It is strongly recommended that entries use only ISO 3166 2-letter country codes."
          },
          "addressLine1": {
            "maxLength": 150,
            "type": "string",
            "description": "The first line of the address."
          },
          "addressLine2": {
            "maxLength": 150,
            "type": "string",
            "description": "The second line of the address."
          },
          "addressLine3": {
            "maxLength": 150,
            "type": "string",
            "description": "The third line of the address."
          },
          "addressLine4": {
            "maxLength": 150,
            "type": "string",
            "description": "The fourth line of the address."
          },
          "beginDate": {
            "type": "string",
            "description": "The first date the address is valid. For physical addresses, the date the person moved to that address.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The last date the address is valid. For physical addresses, this would be the date the person moved from that address.",
            "format": "date"
          },
          "latitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic latitude of the physical address."
          },
          "longitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic longitude of the physical address."
          }
        }
      },
      "studentEducationOrganizationAssociationLanguage": {
        "required": [ "languageDescriptor" ],
        "type": "object",
        "properties": {
          "languageDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A specification of which written or spoken communication is being used.",
            "x-Ed-Fi-isIdentity": true
          },
          "uses": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationLanguageUses. A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationLanguageUse"
            }
          }
        }
      },
      "studentEducationOrganizationAssociationLanguageUse": {
        "required": [ "languageUseDescriptor" ],
        "type": "object",
        "properties": {
          "languageUseDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "studentEducationOrganizationAssociationProgramParticipation": {
        "required": [ "programTypeDescriptor" ],
        "type": "object",
        "properties": {
          "programTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of program.",
            "x-Ed-Fi-isIdentity": true
          },
          "beginDate": {
            "type": "string",
            "description": "The date the Student was associated with the Program or service.",
            "format": "date"
          },
          "designatedBy": {
            "maxLength": 60,
            "type": "string",
            "description": "The person, organization, or department that designated the program association."
          },
          "endDate": {
            "type": "string",
            "description": "The date the Program participation ended.",
            "format": "date"
          },
          "programCharacteristics": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationProgramParticipationProgramCharacteristics. Reflects important characteristics of the Program, such as categories or particular indications.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationProgramParticipationProgramCharacteristic"
            }
          }
        }
      },
      "studentEducationOrganizationAssociationProgramParticipationProgramCharacteristic": {
        "required": [ "programCharacteristicDescriptor" ],
        "type": "object",
        "properties": {
          "programCharacteristicDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Reflects important characteristics of the Program, such as categories or particular indications.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "studentEducationOrganizationAssociationRace": {
        "required": [ "raceDescriptor" ],
        "type": "object",
        "properties": {
          "raceDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The general racial category which most clearly reflects the individual's recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "studentEducationOrganizationAssociationStudentCharacteristic": {
        "required": [ "studentCharacteristicDescriptor" ],
        "type": "object",
        "properties": {
          "studentCharacteristicDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The characteristic designated for the Student.",
            "x-Ed-Fi-isIdentity": true
          },
          "designatedBy": {
            "maxLength": 60,
            "type": "string",
            "description": "The person, organization, or department that designated the characteristic."
          },
          "periods": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationStudentCharacteristicPeriods. The time periods for which characteristic was effective.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationStudentCharacteristicPeriod"
            }
          }
        }
      },
      "studentEducationOrganizationAssociationStudentCharacteristicPeriod": {
        "required": [ "beginDate" ],
        "type": "object",
        "properties": {
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year for the start of the period.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year for the end of the period.",
            "format": "date"
          }
        }
      },
      "studentEducationOrganizationAssociationStudentIdentificationCode": {
        "required": [ "assigningOrganizationIdentificationCode", "identificationCode", "studentIdentificationSystemDescriptor" ],
        "type": "object",
        "properties": {
          "studentIdentificationSystemDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student.",
            "x-Ed-Fi-isIdentity": true
          },
          "assigningOrganizationIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The organization code or name assigning the StudentIdentificationCode.",
            "x-Ed-Fi-isIdentity": true
          },
          "identificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity."
          }
        }
      },
      "studentEducationOrganizationAssociationStudentIndicator": {
        "required": [ "indicator", "indicatorName" ],
        "type": "object",
        "properties": {
          "indicatorName": {
            "maxLength": 60,
            "type": "string",
            "description": "The name of the indicator or metric.",
            "x-Ed-Fi-isIdentity": true
          },
          "designatedBy": {
            "maxLength": 60,
            "type": "string",
            "description": "The person, organization, or department that designated the program association."
          },
          "indicator": {
            "maxLength": 35,
            "type": "string",
            "description": "The value of the indicator or metric."
          },
          "indicatorGroup": {
            "maxLength": 60,
            "type": "string",
            "description": "The name for a group of indicators."
          },
          "periods": {
            "type": "array",
            "description": "An unordered collection of studentEducationOrganizationAssociationStudentIndicatorPeriods. The time periods for which the indicator was effective.",
            "items": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociationStudentIndicatorPeriod"
            }
          }
        }
      },
      "studentEducationOrganizationAssociationStudentIndicatorPeriod": {
        "required": [ "beginDate" ],
        "type": "object",
        "properties": {
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year for the start of the period.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year for the end of the period.",
            "format": "date"
          }
        }
      },
      "studentEducationOrganizationAssociationTelephone": {
        "required": [ "telephoneNumber", "telephoneNumberTypeDescriptor" ],
        "type": "object",
        "properties": {
          "telephoneNumberTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of communication number listed for an individual or organization.",
            "x-Ed-Fi-isIdentity": true
          },
          "doNotPublishIndicator": {
            "type": "boolean",
            "description": "An indication that the telephone number should not be published."
          },
          "orderOfPriority": {
            "type": "integer",
            "description": "The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.",
            "format": "int32"
          },
          "telephoneNumber": {
            "maxLength": 24,
            "type": "string",
            "description": "The telephone number including the area code, and extension, if applicable."
          },
          "textMessageCapabilityIndicator": {
            "type": "boolean",
            "description": "An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages."
          }
        }
      },
      "studentEducationOrganizationAssociationTribalAffiliation": {
        "required": [ "tribalAffiliationDescriptor" ],
        "type": "object",
        "properties": {
          "tribalAffiliationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An American Indian tribe with which the student is affiliated.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "studentEducationOrganizationResponsibilityAssociation": {
        "required": [ "beginDate", "educationOrganizationReference", "id", "responsibilityDescriptor", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "Month, day, and year of the start date of an education organization's responsibility for a student.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "responsibilityDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indications of an education organization's responsibility for a student, such as accountability, attendance, funding, etc.",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "endDate": {
            "type": "string",
            "description": "Month, day, and year of the end date of an education organization's responsibility for a student.",
            "format": "date"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentGradebookEntry": {
        "required": [ "gradebookEntryReference", "id", "studentSectionAssociationReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "gradebookEntryReference": {
            "$ref": "#/components/schemas/gradebookEntryReference"
          },
          "studentSectionAssociationReference": {
            "$ref": "#/components/schemas/studentSectionAssociationReference"
          },
          "competencyLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The CompetencyLevel assessed for the student for the referenced LearningObjective."
          },
          "dateFulfilled": {
            "type": "string",
            "description": "The date an assignment was turned in or the date of an assessment.",
            "format": "date"
          },
          "diagnosticStatement": {
            "maxLength": 1024,
            "type": "string",
            "description": "A statement provided by the teacher that provides information in addition to the grade or assessment score."
          },
          "letterGradeEarned": {
            "maxLength": 20,
            "type": "string",
            "description": "A final or interim (grading period) indicator of student performance in a class as submitted by the instructor."
          },
          "numericGradeEarned": {
            "type": "number",
            "description": "A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.",
            "format": "double"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentHomelessProgramAssociation": {
        "required": [ "beginDate", "educationOrganizationReference", "id", "programReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student first received services.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "awaitingFosterCare": {
            "type": "boolean",
            "description": "State defined definition for awaiting foster care."
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student exited the Program or stopped receiving services.",
            "format": "date"
          },
          "homelessPrimaryNighttimeResidenceDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The primary nighttime residence of the student at the time the student is identified as homeless."
          },
          "homelessProgramServices": {
            "type": "array",
            "description": "An unordered collection of studentHomelessProgramAssociationHomelessProgramServices. Indicates the service(s) being provided to the Student by the Homeless Program.",
            "items": {
              "$ref": "#/components/schemas/studentHomelessProgramAssociationHomelessProgramService"
            }
          },
          "homelessUnaccompaniedYouth": {
            "type": "boolean",
            "description": "A homeless unaccompanied youth is a youth who is not in the physical custody of a parent or guardian and who fits the McKinney-Vento definition of homeless. Students must be both unaccompanied and homeless to be included as an unaccompanied homeless youth."
          },
          "reasonExitedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The reason the child left the Program within a school or district."
          },
          "servedOutsideOfRegularSession": {
            "type": "boolean",
            "description": "Indicates whether the Student received services during the summer session or between sessions."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentHomelessProgramAssociationHomelessProgramService": {
        "required": [ "homelessProgramServiceDescriptor" ],
        "type": "object",
        "properties": {
          "homelessProgramServiceDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the service being provided to the student by the Homeless Program.",
            "x-Ed-Fi-isIdentity": true
          },
          "primaryIndicator": {
            "type": "boolean",
            "description": "True if service is a primary service."
          },
          "serviceBeginDate": {
            "type": "string",
            "description": "First date the Student was in this option for the current school year.",
            "format": "date"
          },
          "serviceEndDate": {
            "type": "string",
            "description": "Last date the Student was in this option for the current school year.",
            "format": "date"
          }
        }
      },
      "studentIdentificationDocument": {
        "required": [ "identificationDocumentUseDescriptor", "personalInformationVerificationDescriptor" ],
        "type": "object",
        "properties": {
          "identificationDocumentUseDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The primary function of the document used for establishing identity.",
            "x-Ed-Fi-isIdentity": true
          },
          "personalInformationVerificationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The category of the document relative to its purpose.",
            "x-Ed-Fi-isIdentity": true
          },
          "issuerCountryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes."
          },
          "documentExpirationDate": {
            "type": "string",
            "description": "The day when the document  expires, if null then never expires.",
            "format": "date"
          },
          "documentTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The title of the document given by the issuer."
          },
          "issuerDocumentIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The unique identifier on the issuer's identification system."
          },
          "issuerName": {
            "maxLength": 150,
            "type": "string",
            "description": "Name of the entity or institution that issued the document."
          }
        }
      },
      "studentInterventionAssociation": {
        "required": [ "id", "interventionReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "cohortReference": {
            "$ref": "#/components/schemas/cohortReference"
          },
          "interventionReference": {
            "$ref": "#/components/schemas/interventionReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "diagnosticStatement": {
            "maxLength": 1024,
            "type": "string",
            "description": "A statement provided by the assigner that provides information regarding why the student was assigned to this intervention."
          },
          "dosage": {
            "type": "integer",
            "description": "The duration of time in minutes for which the student was assigned to participate in the intervention.",
            "format": "int32"
          },
          "interventionEffectivenesses": {
            "type": "array",
            "description": "An unordered collection of studentInterventionAssociationInterventionEffectivenesses. A measure of the effects of an intervention in each outcome domain. The rating of effectiveness takes into account four factors: the quality of the research on the intervention, the statistical significance of the research findings, the size of the differences between participants in the intervention and comparison groups and the consistency in results.",
            "items": {
              "$ref": "#/components/schemas/studentInterventionAssociationInterventionEffectiveness"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentInterventionAssociationInterventionEffectiveness": {
        "required": [ "diagnosisDescriptor", "gradeLevelDescriptor", "interventionEffectivenessRatingDescriptor", "populationServedDescriptor" ],
        "type": "object",
        "properties": {
          "diagnosisDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.",
            "x-Ed-Fi-isIdentity": true
          },
          "gradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Grade level for which effectiveness is measured.",
            "x-Ed-Fi-isIdentity": true
          },
          "populationServedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Population for which effectiveness is measured.",
            "x-Ed-Fi-isIdentity": true
          },
          "interventionEffectivenessRatingDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects."
          },
          "improvementIndex": {
            "type": "integer",
            "description": "Along a percentile distribution of students, the improvement index represents the change in an average student's percentile rank that is considered to be due to the intervention.",
            "format": "int32"
          }
        }
      },
      "studentInterventionAttendanceEvent": {
        "required": [ "attendanceEventCategoryDescriptor", "eventDate", "id", "interventionReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "attendanceEventCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A code describing the attendance event, for example:          Present          Unexcused absence          Excused absence          Tardy.",
            "x-Ed-Fi-isIdentity": true
          },
          "eventDate": {
            "type": "string",
            "description": "Date for this attendance event.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "interventionReference": {
            "$ref": "#/components/schemas/interventionReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "attendanceEventReason": {
            "maxLength": 40,
            "type": "string",
            "description": "The reported reason for a student's absence."
          },
          "educationalEnvironmentDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section."
          },
          "eventDuration": {
            "type": "number",
            "description": "The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.",
            "format": "double"
          },
          "interventionDuration": {
            "type": "integer",
            "description": "The duration in minutes in which the student participated in the intervention during this instance.",
            "format": "int32"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentLanguageInstructionProgramAssociation": {
        "required": [ "beginDate", "educationOrganizationReference", "id", "programReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student first received services.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student exited the Program or stopped receiving services.",
            "format": "date"
          },
          "englishLanguageProficiencyAssessments": {
            "type": "array",
            "description": "An unordered collection of studentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessments. Results of yearly English language assessment.",
            "items": {
              "$ref": "#/components/schemas/studentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment"
            }
          },
          "englishLearnerParticipation": {
            "type": "boolean",
            "description": "An indication that an English Learner student is served by an English language instruction educational program supported with Title III of ESEA funds."
          },
          "languageInstructionProgramServices": {
            "type": "array",
            "description": "An unordered collection of studentLanguageInstructionProgramAssociationLanguageInstructionProgramServices. Indicates the service(s) being provided to the Student by the Language Instruction Program.",
            "items": {
              "$ref": "#/components/schemas/studentLanguageInstructionProgramAssociationLanguageInstructionProgramService"
            }
          },
          "reasonExitedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The reason the child left the Program within a school or district."
          },
          "servedOutsideOfRegularSession": {
            "type": "boolean",
            "description": "Indicates whether the Student received services during the summer session or between sessions."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment": {
        "required": [ "schoolYearTypeReference" ],
        "type": "object",
        "properties": {
          "monitoredDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Student is monitored on content achievement who are no longer receiving services."
          },
          "participationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Field indicating the participation in the yearly English language assessment."
          },
          "proficiencyDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The proficiency level for the yearly English language assessment."
          },
          "progressDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The yearly progress or growth from last year's assessment."
          },
          "schoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          }
        }
      },
      "studentLanguageInstructionProgramAssociationLanguageInstructionProgramService": {
        "required": [ "languageInstructionProgramServiceDescriptor" ],
        "type": "object",
        "properties": {
          "languageInstructionProgramServiceDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the service being provided to the student by the Language Instruction Program.",
            "x-Ed-Fi-isIdentity": true
          },
          "primaryIndicator": {
            "type": "boolean",
            "description": "True if service is a primary service."
          },
          "serviceBeginDate": {
            "type": "string",
            "description": "First date the Student was in this option for the current school year.",
            "format": "date"
          },
          "serviceEndDate": {
            "type": "string",
            "description": "Last date the Student was in this option for the current school year.",
            "format": "date"
          }
        }
      },
      "studentLearningObjective": {
        "required": [ "competencyLevelDescriptor", "gradingPeriodReference", "id", "learningObjectiveReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "gradingPeriodReference": {
            "$ref": "#/components/schemas/gradingPeriodReference"
          },
          "learningObjectiveReference": {
            "$ref": "#/components/schemas/learningObjectiveReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "competencyLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The CompetencyLevel assessed for the student for the referenced LearningObjective."
          },
          "diagnosticStatement": {
            "maxLength": 1024,
            "type": "string",
            "description": "A statement provided by the teacher that provides information in addition to the grade or assessment score."
          },
          "generalStudentProgramAssociations": {
            "type": "array",
            "description": "An unordered collection of studentLearningObjectiveGeneralStudentProgramAssociations. Relates the Student and Program associated with the LearningObjective.",
            "items": {
              "$ref": "#/components/schemas/studentLearningObjectiveGeneralStudentProgramAssociation"
            }
          },
          "studentSectionAssociations": {
            "type": "array",
            "description": "An unordered collection of studentLearningObjectiveStudentSectionAssociations. Relates the Student and Section associated with the LearningObjective.",
            "items": {
              "$ref": "#/components/schemas/studentLearningObjectiveStudentSectionAssociation"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentLearningObjectiveGeneralStudentProgramAssociation": {
        "required": [ "generalStudentProgramAssociationReference" ],
        "type": "object",
        "properties": {
          "generalStudentProgramAssociationReference": {
            "$ref": "#/components/schemas/generalStudentProgramAssociationReference"
          }
        }
      },
      "studentLearningObjectiveReference": {
        "required": [ "gradingPeriodDescriptor", "gradingPeriodSchoolId", "gradingPeriodSchoolYear", "gradingPeriodSequence", "learningObjectiveId", "namespace", "studentUniqueId" ],
        "type": "object",
        "properties": {
          "gradingPeriodDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The name of the period for which grades are reported."
          },
          "gradingPeriodSchoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "gradingPeriodSchoolYear": {
            "type": "integer",
            "description": "The identifier for the grading period school year.",
            "format": "int32"
          },
          "gradingPeriodSequence": {
            "type": "integer",
            "description": "The sequential order of this period relative to other periods.",
            "format": "int32"
          },
          "learningObjectiveId": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A)."
          },
          "namespace": {
            "maxLength": 255,
            "type": "string",
            "description": "Namespace for the LearningObjective."
          },
          "studentUniqueId": {
            "maxLength": 32,
            "type": "string",
            "description": "A unique alphanumeric code assigned to a student."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "studentLearningObjectiveStudentSectionAssociation": {
        "required": [ "studentSectionAssociationReference" ],
        "type": "object",
        "properties": {
          "studentSectionAssociationReference": {
            "$ref": "#/components/schemas/studentSectionAssociationReference"
          }
        }
      },
      "studentMigrantEducationProgramAssociation": {
        "required": [ "beginDate", "educationOrganizationReference", "id", "lastQualifyingMove", "priorityForServices", "programReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student first received services.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "continuationOfServicesReasonDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The \"continuation of services\" provision found in Section 1304(e) of the statute provides that (1) a child who ceases to be a migratory child during a school term shall be eligible for services until the end of such term; (2) a child who is no longer a migratory child may continue to receive services for one additional school year, but only if comparable services are not available through other programs; and (3) secondary school students who were eligible for services in secondary school may continue to be served through credit accrual programs until graduation. Only students who received services at any time during their 36 month eligibility period may continue to receive services (not necessarily the same service)."
          },
          "eligibilityExpirationDate": {
            "type": "string",
            "description": "The Eligibility Expiration Date is used to determine end of eligibility and to account for a child's eligibility expiring earlier than 36 months from the child's QAD. A child's eligibility would end earlier than 36 months from the child's QAD, if the child is no longer entitled to a free public education (e.g., graduated with a high school diploma, obtained a high school equivalency diploma (HSED), or for other reasons as determined by States' requirements), or if the child passes away.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student exited the Program or stopped receiving services.",
            "format": "date"
          },
          "lastQualifyingMove": {
            "type": "string",
            "description": "Date the last qualifying move occurred; used to compute MEP status.",
            "format": "date"
          },
          "migrantEducationProgramServices": {
            "type": "array",
            "description": "An unordered collection of studentMigrantEducationProgramAssociationMigrantEducationProgramServices. Indicates the Service(s) being provided to the Student by the Migrant Education Program.",
            "items": {
              "$ref": "#/components/schemas/studentMigrantEducationProgramAssociationMigrantEducationProgramService"
            }
          },
          "priorityForServices": {
            "type": "boolean",
            "description": "Report migratory children who are classified as having \"priority for services\" because they are failing, or most at risk of failing to meet the State's challenging State academic content standards and challenging State student academic achievement standards, and their education has been interrupted during the regular school year."
          },
          "qualifyingArrivalDate": {
            "type": "string",
            "description": "The Qualifying Arrival Date (QAD) is the date the child joins the worker who has already moved, or the date when the worker joins the child who has already moved. The QAD is the date that the child's eligibility for the MEP begins. The QAD is not affected by subsequent non-qualifying moves.",
            "format": "date"
          },
          "reasonExitedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The reason the child left the Program within a school or district."
          },
          "servedOutsideOfRegularSession": {
            "type": "boolean",
            "description": "Indicates whether the Student received services during the summer session or between sessions."
          },
          "stateResidencyDate": {
            "type": "string",
            "description": "The verified State residency for the student.",
            "format": "date"
          },
          "usInitialEntry": {
            "type": "string",
            "description": "The month, day, and year on which the Student first entered the U.S.",
            "format": "date"
          },
          "usInitialSchoolEntry": {
            "type": "string",
            "description": "The month, day, and year on which the Student first entered a U.S. school.",
            "format": "date"
          },
          "usMostRecentEntry": {
            "type": "string",
            "description": "The month, day, and year of the Student's most recent entry into the U.S.",
            "format": "date"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentMigrantEducationProgramAssociationMigrantEducationProgramService": {
        "required": [ "migrantEducationProgramServiceDescriptor" ],
        "type": "object",
        "properties": {
          "migrantEducationProgramServiceDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the Service being provided to the student by the Migrant Education Program.",
            "x-Ed-Fi-isIdentity": true
          },
          "primaryIndicator": {
            "type": "boolean",
            "description": "True if service is a primary service."
          },
          "serviceBeginDate": {
            "type": "string",
            "description": "First date the Student was in this option for the current school year.",
            "format": "date"
          },
          "serviceEndDate": {
            "type": "string",
            "description": "Last date the Student was in this option for the current school year.",
            "format": "date"
          }
        }
      },
      "studentNeglectedOrDelinquentProgramAssociation": {
        "required": [ "beginDate", "educationOrganizationReference", "id", "programReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student first received services.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "elaProgressLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The progress measured from pre- to post- test for ELA."
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student exited the Program or stopped receiving services.",
            "format": "date"
          },
          "mathematicsProgressLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The progress measured from pre- to post-test for Mathematics."
          },
          "neglectedOrDelinquentProgramDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of program under ESEA Title I, Part D, Subpart 1 (state programs) or Subpart 2 (LEA)."
          },
          "neglectedOrDelinquentProgramServices": {
            "type": "array",
            "description": "An unordered collection of studentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramServices. Indicates the service(s) being provided to the Student by the Neglected or Delinquent Program.",
            "items": {
              "$ref": "#/components/schemas/studentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService"
            }
          },
          "reasonExitedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The reason the child left the Program within a school or district."
          },
          "servedOutsideOfRegularSession": {
            "type": "boolean",
            "description": "Indicates whether the Student received services during the summer session or between sessions."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService": {
        "required": [ "neglectedOrDelinquentProgramServiceDescriptor" ],
        "type": "object",
        "properties": {
          "neglectedOrDelinquentProgramServiceDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the service being provided to the student by the Neglected or Delinquent Program.",
            "x-Ed-Fi-isIdentity": true
          },
          "primaryIndicator": {
            "type": "boolean",
            "description": "True if service is a primary service."
          },
          "serviceBeginDate": {
            "type": "string",
            "description": "First date the Student was in this option for the current school year.",
            "format": "date"
          },
          "serviceEndDate": {
            "type": "string",
            "description": "Last date the Student was in this option for the current school year.",
            "format": "date"
          }
        }
      },
      "studentOtherName": {
        "required": [ "firstName", "lastSurname", "otherNameTypeDescriptor" ],
        "type": "object",
        "properties": {
          "otherNameTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The types of alternate names for a person.",
            "x-Ed-Fi-isIdentity": true
          },
          "firstName": {
            "maxLength": 75,
            "type": "string",
            "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change."
          },
          "generationCodeSuffix": {
            "maxLength": 10,
            "type": "string",
            "description": "An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III)."
          },
          "lastSurname": {
            "maxLength": 75,
            "type": "string",
            "description": "The name borne in common by members of a family."
          },
          "middleName": {
            "maxLength": 75,
            "type": "string",
            "description": "A secondary name given to an individual at birth, baptism, or during another naming ceremony."
          },
          "personalTitlePrefix": {
            "maxLength": 30,
            "type": "string",
            "description": "A prefix used to denote the title, degree, position, or seniority of the person."
          }
        }
      },
      "studentParentAssociation": {
        "required": [ "id", "parentReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "parentReference": {
            "$ref": "#/components/schemas/parentReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "contactPriority": {
            "type": "integer",
            "description": "The numeric order of the preferred sequence or priority of contact.",
            "format": "int32"
          },
          "contactRestrictions": {
            "maxLength": 250,
            "type": "string",
            "description": "Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual)."
          },
          "emergencyContactStatus": {
            "type": "boolean",
            "description": "Indicator of whether the person is a designated emergency contact for the Student."
          },
          "livesWith": {
            "type": "boolean",
            "description": "Indicator of whether the Student lives with the associated parent."
          },
          "primaryContactStatus": {
            "type": "boolean",
            "description": "Indicator of whether the person is a primary parental contact for the Student."
          },
          "relationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The nature of an individual's relationship to a student; for example:          Father, Mother, Step Father, Step Mother, Foster Father, Foster Mother, Guardian, etc."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentPersonalIdentificationDocument": {
        "required": [ "identificationDocumentUseDescriptor", "personalInformationVerificationDescriptor" ],
        "type": "object",
        "properties": {
          "identificationDocumentUseDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The primary function of the document used for establishing identity.",
            "x-Ed-Fi-isIdentity": true
          },
          "personalInformationVerificationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The category of the document relative to its purpose.",
            "x-Ed-Fi-isIdentity": true
          },
          "issuerCountryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes."
          },
          "documentExpirationDate": {
            "type": "string",
            "description": "The day when the document  expires, if null then never expires.",
            "format": "date"
          },
          "documentTitle": {
            "maxLength": 60,
            "type": "string",
            "description": "The title of the document given by the issuer."
          },
          "issuerDocumentIdentificationCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The unique identifier on the issuer's identification system."
          },
          "issuerName": {
            "maxLength": 150,
            "type": "string",
            "description": "Name of the entity or institution that issued the document."
          }
        }
      },
      "studentProgramAssociation": {
        "required": [ "beginDate", "educationOrganizationReference", "id", "programReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student first received services.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student exited the Program or stopped receiving services.",
            "format": "date"
          },
          "reasonExitedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The reason the child left the Program within a school or district."
          },
          "servedOutsideOfRegularSession": {
            "type": "boolean",
            "description": "Indicates whether the Student received services during the summer session or between sessions."
          },
          "services": {
            "type": "array",
            "description": "An unordered collection of studentProgramAssociationServices. Indicates the Service(s) being provided to the Student by the Program.",
            "items": {
              "$ref": "#/components/schemas/studentProgramAssociationService"
            }
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentProgramAssociationService": {
        "required": [ "serviceDescriptor" ],
        "type": "object",
        "properties": {
          "serviceDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the Service being provided to the student by the Program.",
            "x-Ed-Fi-isIdentity": true
          },
          "primaryIndicator": {
            "type": "boolean",
            "description": "True if service is a primary service."
          },
          "serviceBeginDate": {
            "type": "string",
            "description": "First date the Student was in this option for the current school year.",
            "format": "date"
          },
          "serviceEndDate": {
            "type": "string",
            "description": "Last date the Student was in this option for the current school year.",
            "format": "date"
          }
        }
      },
      "studentProgramAttendanceEvent": {
        "required": [ "attendanceEventCategoryDescriptor", "educationOrganizationReference", "eventDate", "id", "programReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "attendanceEventCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A code describing the attendance event, for example:          Present          Unexcused absence          Excused absence          Tardy.",
            "x-Ed-Fi-isIdentity": true
          },
          "eventDate": {
            "type": "string",
            "description": "Date for this attendance event.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "attendanceEventReason": {
            "maxLength": 40,
            "type": "string",
            "description": "The reported reason for a student's absence."
          },
          "educationalEnvironmentDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section."
          },
          "eventDuration": {
            "type": "number",
            "description": "The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.",
            "format": "double"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentReference": {
        "required": [ "studentUniqueId" ],
        "type": "object",
        "properties": {
          "studentUniqueId": {
            "type": "string",
            "description": "A unique alphanumeric code assigned to a student.",
            "format": "int32"
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "studentSchoolAssociation": {
        "required": [ "entryDate", "entryGradeLevelDescriptor", "id", "schoolReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "entryDate": {
            "type": "string",
            "description": "The month, day, and year on which an individual enters and begins to receive instructional services in a school.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "calendarReference": {
            "$ref": "#/components/schemas/calendarReference"
          },
          "classOfSchoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          },
          "graduationPlanReference": {
            "$ref": "#/components/schemas/graduationPlanReference"
          },
          "schoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "schoolYearTypeReference": {
            "$ref": "#/components/schemas/schoolYearTypeReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "educationPlans": {
            "type": "array",
            "description": "An unordered collection of studentSchoolAssociationEducationPlans. The type of education plan(s) the student is following, if appropriate.",
            "items": {
              "$ref": "#/components/schemas/studentSchoolAssociationEducationPlan"
            }
          },
          "employedWhileEnrolled": {
            "type": "boolean",
            "description": "An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education."
          },
          "entryGradeLevelDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session."
          },
          "entryGradeLevelReasonDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term."
          },
          "entryTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The process by which a student enters a school during a given academic session."
          },
          "exitWithdrawDate": {
            "type": "string",
            "description": "The month, day, and year of the first day after the date of an individual's last attendance at a school (if known), the day on which an individual graduated, or the date on which it becomes known officially that an individual left school.",
            "format": "date"
          },
          "exitWithdrawTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The circumstances under which the student exited from membership in an educational institution."
          },
          "primarySchool": {
            "type": "boolean",
            "description": "Indicates if a given enrollment record should be considered the primary record for a student."
          },
          "repeatGradeIndicator": {
            "type": "boolean",
            "description": "An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back."
          },
          "residencyStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit."
          },
          "schoolChoiceTransfer": {
            "type": "boolean",
            "description": "An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentSchoolAssociationEducationPlan": {
        "required": [ "educationPlanDescriptor" ],
        "type": "object",
        "properties": {
          "educationPlanDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of education plan(s) the student is following, if appropriate.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "studentSchoolAttendanceEvent": {
        "required": [ "attendanceEventCategoryDescriptor", "eventDate", "id", "schoolReference", "sessionReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "attendanceEventCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A code describing the attendance event, for example:          Present          Unexcused absence          Excused absence          Tardy.",
            "x-Ed-Fi-isIdentity": true
          },
          "eventDate": {
            "type": "string",
            "description": "Date for this attendance event.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "schoolReference": {
            "$ref": "#/components/schemas/schoolReference"
          },
          "sessionReference": {
            "$ref": "#/components/schemas/sessionReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "attendanceEventReason": {
            "maxLength": 40,
            "type": "string",
            "description": "The reported reason for a student's absence."
          },
          "educationalEnvironmentDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section."
          },
          "eventDuration": {
            "type": "number",
            "description": "The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.",
            "format": "double"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentSchoolFoodServiceProgramAssociation": {
        "required": [ "beginDate", "educationOrganizationReference", "id", "programReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student first received services.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "directCertification": {
            "type": "boolean",
            "description": "Indicates that the student's National School Lunch Program (NSLP) eligibility has been determined through direct certification."
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student exited the Program or stopped receiving services.",
            "format": "date"
          },
          "reasonExitedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The reason the child left the Program within a school or district."
          },
          "schoolFoodServiceProgramServices": {
            "type": "array",
            "description": "An unordered collection of studentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramServices. Indicates the service(s) being provided to the Student by the School Food Service Program.",
            "items": {
              "$ref": "#/components/schemas/studentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService"
            }
          },
          "servedOutsideOfRegularSession": {
            "type": "boolean",
            "description": "Indicates whether the Student received services during the summer session or between sessions."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService": {
        "required": [ "schoolFoodServiceProgramServiceDescriptor" ],
        "type": "object",
        "properties": {
          "schoolFoodServiceProgramServiceDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the service being provided to the student by the School Food Service Program.",
            "x-Ed-Fi-isIdentity": true
          },
          "primaryIndicator": {
            "type": "boolean",
            "description": "True if service is a primary service."
          },
          "serviceBeginDate": {
            "type": "string",
            "description": "First date the Student was in this option for the current school year.",
            "format": "date"
          },
          "serviceEndDate": {
            "type": "string",
            "description": "Last date the Student was in this option for the current school year.",
            "format": "date"
          }
        }
      },
      "studentSectionAssociation": {
        "required": [ "beginDate", "id", "sectionReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "Month, day, and year of the Student's entry or assignment to the Section.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "sectionReference": {
            "$ref": "#/components/schemas/sectionReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "attemptStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indication of the student's attempt status for the section."
          },
          "endDate": {
            "type": "string",
            "description": "Month, day, and year of the withdrawal or exit of the Student from the Section.",
            "format": "date"
          },
          "homeroomIndicator": {
            "type": "boolean",
            "description": "Indicates the Section is the student's homeroom. Homeroom period may the convention for taking daily attendance."
          },
          "repeatIdentifierDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indication as to whether a student has previously taken a given course.          Repeated, counted in grade point average          Repeated, not counted in grade point average          Not repeated          Other."
          },
          "teacherStudentDataLinkExclusion": {
            "type": "boolean",
            "description": "Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentSectionAssociationReference": {
        "required": [ "beginDate", "localCourseCode", "schoolId", "schoolYear", "sectionIdentifier", "sessionName", "studentUniqueId" ],
        "type": "object",
        "properties": {
          "beginDate": {
            "type": "string",
            "description": "Month, day, and year of the Student's entry or assignment to the Section.",
            "format": "date"
          },
          "localCourseCode": {
            "maxLength": 60,
            "type": "string",
            "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students."
          },
          "schoolId": {
            "type": "integer",
            "description": "The identifier assigned to a school.",
            "format": "int32"
          },
          "schoolYear": {
            "type": "integer",
            "description": "The identifier for the school year.",
            "format": "int32"
          },
          "sectionIdentifier": {
            "maxLength": 255,
            "type": "string",
            "description": "The local identifier assigned to a section."
          },
          "sessionName": {
            "maxLength": 60,
            "type": "string",
            "description": "The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer)."
          },
          "studentUniqueId": {
            "maxLength": 32,
            "type": "string",
            "description": "A unique alphanumeric code assigned to a student."
          },
          "link": {
            "$ref": "#/components/schemas/link"
          }
        }
      },
      "studentSectionAttendanceEvent": {
        "required": [ "attendanceEventCategoryDescriptor", "eventDate", "id", "sectionReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "attendanceEventCategoryDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A code describing the attendance event, for example:          Present          Unexcused absence          Excused absence          Tardy.",
            "x-Ed-Fi-isIdentity": true
          },
          "eventDate": {
            "type": "string",
            "description": "Date for this attendance event.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "sectionReference": {
            "$ref": "#/components/schemas/sectionReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "attendanceEventReason": {
            "maxLength": 40,
            "type": "string",
            "description": "The reported reason for a student's absence."
          },
          "educationalEnvironmentDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section."
          },
          "eventDuration": {
            "type": "number",
            "description": "The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.",
            "format": "double"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentSpecialEducationProgramAssociation": {
        "required": [ "beginDate", "educationOrganizationReference", "id", "programReference", "studentReference" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student first received services.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "disabilities": {
            "type": "array",
            "description": "An unordered collection of studentSpecialEducationProgramAssociationDisabilities. The disability condition(s) that best describes an individual's impairment, as related to special education services received.",
            "items": {
              "$ref": "#/components/schemas/studentSpecialEducationProgramAssociationDisability"
            }
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student exited the Program or stopped receiving services.",
            "format": "date"
          },
          "ideaEligibility": {
            "type": "boolean",
            "description": "Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA)."
          },
          "iepBeginDate": {
            "type": "string",
            "description": "The effective date of the most recent IEP.",
            "format": "date"
          },
          "iepEndDate": {
            "type": "string",
            "description": "The end date of the most recent IEP.",
            "format": "date"
          },
          "iepReviewDate": {
            "type": "string",
            "description": "The date of the last IEP review.",
            "format": "date"
          },
          "lastEvaluationDate": {
            "type": "string",
            "description": "The date of the last special education evaluation.",
            "format": "date"
          },
          "medicallyFragile": {
            "type": "boolean",
            "description": "Indicates whether the Student receiving special education and related services is:          1) in the age range of birth to 22 years, and          2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and          3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and          4) lives with ongoing threat to his or her continued well-being.          Aligns with federal requirements."
          },
          "multiplyDisabled": {
            "type": "boolean",
            "description": "Indicates whether the Student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements."
          },
          "reasonExitedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The reason the child left the Program within a school or district."
          },
          "schoolHoursPerWeek": {
            "type": "number",
            "description": "Indicate the total number of hours of instructional time per week for the school that the student attends.",
            "format": "double"
          },
          "servedOutsideOfRegularSession": {
            "type": "boolean",
            "description": "Indicates whether the Student received services during the summer session or between sessions."
          },
          "serviceProviders": {
            "type": "array",
            "description": "An unordered collection of studentSpecialEducationProgramAssociationServiceProviders. The Staff providing special education services to the Student.",
            "items": {
              "$ref": "#/components/schemas/studentSpecialEducationProgramAssociationServiceProvider"
            }
          },
          "specialEducationHoursPerWeek": {
            "type": "number",
            "description": "The number of hours per week for special education instruction and therapy.",
            "format": "double"
          },
          "specialEducationProgramServices": {
            "type": "array",
            "description": "An unordered collection of studentSpecialEducationProgramAssociationSpecialEducationProgramServices. Indicates the Service(s) being provided to the Student by the Special Education Program.",
            "items": {
              "$ref": "#/components/schemas/studentSpecialEducationProgramAssociationSpecialEducationProgramService"
            }
          },
          "specialEducationSettingDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The major instructional setting (more than 50 percent of a student's special education program)."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentSpecialEducationProgramAssociationDisability": {
        "required": [ "disabilityDescriptor" ],
        "type": "object",
        "properties": {
          "disabilityDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A disability category that describes a child's impairment.",
            "x-Ed-Fi-isIdentity": true
          },
          "disabilityDeterminationSourceTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The source that provided the disability determination."
          },
          "disabilityDiagnosis": {
            "maxLength": 80,
            "type": "string",
            "description": "A description of the disability diagnosis."
          },
          "orderOfDisability": {
            "type": "integer",
            "description": "The order by severity of student's disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.",
            "format": "int32"
          },
          "designations": {
            "type": "array",
            "description": "An unordered collection of studentSpecialEducationProgramAssociationDisabilityDesignations. Whether the disability is IDEA, Section 504, or other disability designation.",
            "items": {
              "$ref": "#/components/schemas/studentSpecialEducationProgramAssociationDisabilityDesignation"
            }
          }
        }
      },
      "studentSpecialEducationProgramAssociationDisabilityDesignation": {
        "required": [ "disabilityDesignationDescriptor" ],
        "type": "object",
        "properties": {
          "disabilityDesignationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Whether the disability is IDEA, Section 504, or other disability designation.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "studentSpecialEducationProgramAssociationServiceProvider": {
        "required": [ "staffReference" ],
        "type": "object",
        "properties": {
          "primaryProvider": {
            "type": "boolean",
            "description": "Primary ServiceProvider."
          },
          "staffReference": {
            "$ref": "#/components/schemas/staffReference"
          }
        }
      },
      "studentSpecialEducationProgramAssociationSpecialEducationProgramService": {
        "required": [ "specialEducationProgramServiceDescriptor" ],
        "type": "object",
        "properties": {
          "specialEducationProgramServiceDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the service being provided to the student by the Special Education Program.",
            "x-Ed-Fi-isIdentity": true
          },
          "primaryIndicator": {
            "type": "boolean",
            "description": "True if service is a primary service."
          },
          "serviceBeginDate": {
            "type": "string",
            "description": "First date the Student was in this option for the current school year.",
            "format": "date"
          },
          "serviceEndDate": {
            "type": "string",
            "description": "Last date the Student was in this option for the current school year.",
            "format": "date"
          }
        }
      },
      "studentTitleIPartAProgramAssociation": {
        "required": [ "beginDate", "educationOrganizationReference", "id", "programReference", "studentReference", "titleIPartAParticipantDescriptor" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student first received services.",
            "format": "date",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "programReference": {
            "$ref": "#/components/schemas/programReference"
          },
          "studentReference": {
            "$ref": "#/components/schemas/studentReference"
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year on which the Student exited the Program or stopped receiving services.",
            "format": "date"
          },
          "reasonExitedDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The reason the child left the Program within a school or district."
          },
          "servedOutsideOfRegularSession": {
            "type": "boolean",
            "description": "Indicates whether the Student received services during the summer session or between sessions."
          },
          "services": {
            "type": "array",
            "description": "An unordered collection of studentTitleIPartAProgramAssociationServices. Indicates the Service(s) being provided to the Student by the Program.",
            "items": {
              "$ref": "#/components/schemas/studentTitleIPartAProgramAssociationService"
            }
          },
          "titleIPartAParticipantDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indication of the type of Title I program, if any, in which the student is participating and by which the student is served:          Public Targeted Assistance Program          Public Schoolwide Program          Private School Students Participating          Local Neglected Program."
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "studentTitleIPartAProgramAssociationService": {
        "required": [ "serviceDescriptor" ],
        "type": "object",
        "properties": {
          "serviceDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "Indicates the Service being provided to the student by the Program.",
            "x-Ed-Fi-isIdentity": true
          },
          "primaryIndicator": {
            "type": "boolean",
            "description": "True if service is a primary service."
          },
          "serviceBeginDate": {
            "type": "string",
            "description": "First date the Student was in this option for the current school year.",
            "format": "date"
          },
          "serviceEndDate": {
            "type": "string",
            "description": "Last date the Student was in this option for the current school year.",
            "format": "date"
          }
        }
      },
      "studentVisa": {
        "required": [ "visaDescriptor" ],
        "type": "object",
        "properties": {
          "visaDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indicator of a non-US citizen's Visa type.",
            "x-Ed-Fi-isIdentity": true
          }
        }
      },
      "grandBend_applicant": {
        "required": [ "applicantIdentifier", "educationOrganizationReference", "firstName", "id", "lastSurname" ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "applicantIdentifier": {
            "maxLength": 32,
            "type": "string",
            "description": "A unique alphanumeric code assigned to an applicant.",
            "x-Ed-Fi-isIdentity": true
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/educationOrganizationReference"
          },
          "addresses": {
            "type": "array",
            "description": "An unordered collection of applicantAddresses. The set of elements that describes an address, including the street address, city, state, and ZIP code.",
            "items": {
              "$ref": "#/components/schemas/grandBend_applicantAddress"
            }
          },
          "birthDate": {
            "type": "string",
            "description": "The month, day, and year on which an individual was born.",
            "format": "date"
          },
          "citizenshipStatusDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An indicator of whether or not the person is a U.S. citizen."
          },
          "firstName": {
            "maxLength": 75,
            "type": "string",
            "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change."
          },
          "generationCodeSuffix": {
            "maxLength": 10,
            "type": "string",
            "description": "An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III)."
          },
          "highestCompletedLevelOfEducationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received)."
          },
          "highlyQualifiedAcademicSubjectDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "An applicant subject in which a teacher applicant is classified as highly qualified."
          },
          "highlyQualifiedTeacher": {
            "type": "boolean",
            "description": "An indication of whether a teacher applicant is classified as highly qualified for his/her prospective assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections to be taught."
          },
          "hispanicLatinoEthnicity": {
            "type": "boolean",
            "description": "An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\""
          },
          "lastSurname": {
            "maxLength": 75,
            "type": "string",
            "description": "The name borne in common by members of a family."
          },
          "loginId": {
            "maxLength": 60,
            "type": "string",
            "description": "The login ID for the user; used for security access control interface."
          },
          "maidenName": {
            "maxLength": 75,
            "type": "string",
            "description": "The person's maiden name."
          },
          "middleName": {
            "maxLength": 75,
            "type": "string",
            "description": "A secondary name given to an individual at birth, baptism, or during another naming ceremony."
          },
          "personalTitlePrefix": {
            "maxLength": 30,
            "type": "string",
            "description": "A prefix used to denote the title, degree, position, or seniority of the person."
          },
          "sexDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "A person's gender."
          },
          "yearsOfPriorProfessionalExperience": {
            "type": "number",
            "description": "The total number of years that an individual has previously held a similar professional position in one or more education institutions.",
            "format": "double"
          },
          "yearsOfPriorTeachingExperience": {
            "type": "number",
            "description": "The total number of years that an individual has previously held a teaching position in one or more education institutions.",
            "format": "double"
          },
          "_etag": {
            "type": "string",
            "description": "A unique system-generated value that identifies the version of the resource."
          }
        }
      },
      "grandBend_applicantAddress": {
        "required": [ "addressTypeDescriptor", "city", "postalCode", "stateAbbreviationDescriptor", "streetNumberName" ],
        "type": "object",
        "properties": {
          "addressTypeDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)",
            "x-Ed-Fi-isIdentity": true
          },
          "stateAbbreviationDescriptor": {
            "maxLength": 306,
            "type": "string",
            "description": "The abbreviation for the state (within the United States) or outlying area in which an address is located."
          },
          "apartmentRoomSuiteNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "The apartment, room, or suite number of an address."
          },
          "beginDate": {
            "type": "string",
            "description": "The month, day, and year the address became effective.",
            "format": "date"
          },
          "buildingSiteNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "The number of the building on the site, if more than one building shares the same address."
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of the city in which an address is located."
          },
          "countyFIPSCode": {
            "maxLength": 5,
            "type": "string",
            "description": "The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code."
          },
          "endDate": {
            "type": "string",
            "description": "The month, day, and year the address ceased to be in effect.",
            "format": "date"
          },
          "latitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic latitude of the physical address."
          },
          "longitude": {
            "maxLength": 20,
            "type": "string",
            "description": "The geographic longitude of the physical address."
          },
          "nameOfCounty": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of the county, parish, borough, or comparable unit (within a state) in                        'which an address is located."
          },
          "postalCode": {
            "maxLength": 17,
            "type": "string",
            "description": "The five or nine digit zip code or overseas postal code portion of an address."
          },
          "streetNumberName": {
            "maxLength": 150,
            "type": "string",
            "description": "The street number and street name or post office box number of an address."
          }
        }
      },
      "grandBend_staffExtension": {
        "type": "object",
        "properties": {
          "probationCompleteDate": {
            "type": "string",
            "description": "The date that the staff member's new hire probationary period was completed.",
            "format": "date"
          },
          "tenured": {
            "type": "boolean",
            "description": "An indication as to whether the staff member is tenured."
          }
        }
      },
      "link": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string",
            "description": "Describes the nature of the relationship to the referenced resource."
          },
          "href": {
            "type": "string",
            "description": "The URL to the related resource."
          }
        }
      },
      "staffExtensions": {
        "type": "object",
        "properties": {
          "GrandBend": {
            "$ref": "#/components/schemas/grandBend_staffExtension"
          }
        }
      }
    },
    "responses": {
      "Created": {
        "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
      },
      "Updated": {
        "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
      },
      "Deleted": {
        "description": "The resource was successfully deleted."
      },
      "NotModified": {
        "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
      },
      "BadRequest": {
        "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
      },
      "Unauthorized": {
        "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
      },
      "Forbidden": {
        "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
      },
      "NotFound": {
        "description": "The resource could not be found."
      },
      "Conflict": {
        "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
      },
      "PreconditionFailed": {
        "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
      },
      "Error": {
        "description": "An unhandled error occurred on the server. See the response body for details."
      }
    },
    "parameters": {
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "Indicates how many items should be skipped before returning results.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Indicates the maximum number of items that should be returned in the results.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "maxItems": 100,
          "minItems": 1,
          "type": "integer",
          "format": "int32",
          "default": 25
        }
      },
      "MinChangeVersion": {
        "name": "minChangeVersion",
        "in": "query",
        "description": "Used in synchronization to set sequence minimum ChangeVersion",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "MaxChangeVersion": {
        "name": "maxChangeVersion",
        "in": "query",
        "description": "Used in synchronization to set sequence maximum ChangeVersion",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "If-None-Match": {
        "name": "If-None-Match",
        "in": "header",
        "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "id": {
        "name": "id",
        "in": "path",
        "description": "A resource identifier that uniquely identifies the resource.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "fields": {
        "name": "fields",
        "in": "query",
        "description": "Specifies a subset of properties that should be returned for each entity (e.g. \"property1,collection1(collProp1,collProp2)\").",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "queryExpression": {
        "name": "q",
        "in": "query",
        "description": "Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \"[2016-03-07..2016-03-10]\").",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "totalCount": {
        "name": "totalCount",
        "in": "query",
        "description": "Indicates if the total number of items available should be returned in the 'Total-Count' header of the response.  If set to false, 'Total-Count' header will not be provided.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "requestBodies": {
      "educationOrganizationInterventionPrescriptionAssociation": {
        "description": "The JSON representation of the \"educationOrganizationInterventionPrescriptionAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/educationOrganizationInterventionPrescriptionAssociation"
            }
          }
        },
        "required": true
      },
      "disciplineIncident": {
        "description": "The JSON representation of the \"disciplineIncident\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/disciplineIncident"
            }
          }
        },
        "required": true
      },
      "reportCard": {
        "description": "The JSON representation of the \"reportCard\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/reportCard"
            }
          }
        },
        "required": true
      },
      "staffCohortAssociation": {
        "description": "The JSON representation of the \"staffCohortAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/staffCohortAssociation"
            }
          }
        },
        "required": true
      },
      "studentLanguageInstructionProgramAssociation": {
        "description": "The JSON representation of the \"studentLanguageInstructionProgramAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentLanguageInstructionProgramAssociation"
            }
          }
        },
        "required": true
      },
      "studentParentAssociation": {
        "description": "The JSON representation of the \"studentParentAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentParentAssociation"
            }
          }
        },
        "required": true
      },
      "gradebookEntry": {
        "description": "The JSON representation of the \"gradebookEntry\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/gradebookEntry"
            }
          }
        },
        "required": true
      },
      "credential": {
        "description": "The JSON representation of the \"credential\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/credential"
            }
          }
        },
        "required": true
      },
      "cohort": {
        "description": "The JSON representation of the \"cohort\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/cohort"
            }
          }
        },
        "required": true
      },
      "educationOrganizationPeerAssociation": {
        "description": "The JSON representation of the \"educationOrganizationPeerAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/educationOrganizationPeerAssociation"
            }
          }
        },
        "required": true
      },
      "staffSchoolAssociation": {
        "description": "The JSON representation of the \"staffSchoolAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/staffSchoolAssociation"
            }
          }
        },
        "required": true
      },
      "budget": {
        "description": "The JSON representation of the \"budget\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/budget"
            }
          }
        },
        "required": true
      },
      "objectiveAssessment": {
        "description": "The JSON representation of the \"objectiveAssessment\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/objectiveAssessment"
            }
          }
        },
        "required": true
      },
      "staffEducationOrganizationContactAssociation": {
        "description": "The JSON representation of the \"staffEducationOrganizationContactAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/staffEducationOrganizationContactAssociation"
            }
          }
        },
        "required": true
      },
      "staffEducationOrganizationAssignmentAssociation": {
        "description": "The JSON representation of the \"staffEducationOrganizationAssignmentAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/staffEducationOrganizationAssignmentAssociation"
            }
          }
        },
        "required": true
      },
      "educationContent": {
        "description": "The JSON representation of the \"educationContent\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/educationContent"
            }
          }
        },
        "required": true
      },
      "studentSpecialEducationProgramAssociation": {
        "description": "The JSON representation of the \"studentSpecialEducationProgramAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentSpecialEducationProgramAssociation"
            }
          }
        },
        "required": true
      },
      "graduationPlan": {
        "description": "The JSON representation of the \"graduationPlan\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/graduationPlan"
            }
          }
        },
        "required": true
      },
      "studentCTEProgramAssociation": {
        "description": "The JSON representation of the \"studentCTEProgramAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentCTEProgramAssociation"
            }
          }
        },
        "required": true
      },
      "studentAcademicRecord": {
        "description": "The JSON representation of the \"studentAcademicRecord\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentAcademicRecord"
            }
          }
        },
        "required": true
      },
      "studentSectionAttendanceEvent": {
        "description": "The JSON representation of the \"studentSectionAttendanceEvent\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentSectionAttendanceEvent"
            }
          }
        },
        "required": true
      },
      "studentSchoolAttendanceEvent": {
        "description": "The JSON representation of the \"studentSchoolAttendanceEvent\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentSchoolAttendanceEvent"
            }
          }
        },
        "required": true
      },
      "postSecondaryInstitution": {
        "description": "The JSON representation of the \"postSecondaryInstitution\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/postSecondaryInstitution"
            }
          }
        },
        "required": true
      },
      "studentProgramAssociation": {
        "description": "The JSON representation of the \"studentProgramAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentProgramAssociation"
            }
          }
        },
        "required": true
      },
      "courseOffering": {
        "description": "The JSON representation of the \"courseOffering\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/courseOffering"
            }
          }
        },
        "required": true
      },
      "studentCompetencyObjective": {
        "description": "The JSON representation of the \"studentCompetencyObjective\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentCompetencyObjective"
            }
          }
        },
        "required": true
      },
      "assessmentItem": {
        "description": "The JSON representation of the \"assessmentItem\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/assessmentItem"
            }
          }
        },
        "required": true
      },
      "student": {
        "description": "The JSON representation of the \"student\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/student"
            }
          }
        },
        "required": true
      },
      "intervention": {
        "description": "The JSON representation of the \"intervention\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/intervention"
            }
          }
        },
        "required": true
      },
      "accountCode": {
        "description": "The JSON representation of the \"accountCode\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/accountCode"
            }
          }
        },
        "required": true
      },
      "learningObjective": {
        "description": "The JSON representation of the \"learningObjective\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/learningObjective"
            }
          }
        },
        "required": true
      },
      "courseTranscript": {
        "description": "The JSON representation of the \"courseTranscript\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/courseTranscript"
            }
          }
        },
        "required": true
      },
      "competencyObjective": {
        "description": "The JSON representation of the \"competencyObjective\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/competencyObjective"
            }
          }
        },
        "required": true
      },
      "program": {
        "description": "The JSON representation of the \"program\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/program"
            }
          }
        },
        "required": true
      },
      "communityOrganization": {
        "description": "The JSON representation of the \"communityOrganization\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/communityOrganization"
            }
          }
        },
        "required": true
      },
      "educationServiceCenter": {
        "description": "The JSON representation of the \"educationServiceCenter\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/educationServiceCenter"
            }
          }
        },
        "required": true
      },
      "bellSchedule": {
        "description": "The JSON representation of the \"bellSchedule\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/bellSchedule"
            }
          }
        },
        "required": true
      },
      "postSecondaryEvent": {
        "description": "The JSON representation of the \"postSecondaryEvent\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/postSecondaryEvent"
            }
          }
        },
        "required": true
      },
      "accountabilityRating": {
        "description": "The JSON representation of the \"accountabilityRating\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/accountabilityRating"
            }
          }
        },
        "required": true
      },
      "studentGradebookEntry": {
        "description": "The JSON representation of the \"studentGradebookEntry\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentGradebookEntry"
            }
          }
        },
        "required": true
      },
      "grandBend_applicant": {
        "description": "The JSON representation of the \"applicant\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/grandBend_applicant"
            }
          }
        },
        "required": true
      },
      "studentAssessment": {
        "description": "The JSON representation of the \"studentAssessment\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentAssessment"
            }
          }
        },
        "required": true
      },
      "assessment": {
        "description": "The JSON representation of the \"assessment\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/assessment"
            }
          }
        },
        "required": true
      },
      "studentNeglectedOrDelinquentProgramAssociation": {
        "description": "The JSON representation of the \"studentNeglectedOrDelinquentProgramAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentNeglectedOrDelinquentProgramAssociation"
            }
          }
        },
        "required": true
      },
      "feederSchoolAssociation": {
        "description": "The JSON representation of the \"feederSchoolAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/feederSchoolAssociation"
            }
          }
        },
        "required": true
      },
      "academicWeek": {
        "description": "The JSON representation of the \"academicWeek\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/academicWeek"
            }
          }
        },
        "required": true
      },
      "account": {
        "description": "The JSON representation of the \"account\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/account"
            }
          }
        },
        "required": true
      },
      "actual": {
        "description": "The JSON representation of the \"actual\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/actual"
            }
          }
        },
        "required": true
      },
      "calendar": {
        "description": "The JSON representation of the \"calendar\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/calendar"
            }
          }
        },
        "required": true
      },
      "calendarDate": {
        "description": "The JSON representation of the \"calendarDate\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/calendarDate"
            }
          }
        },
        "required": true
      },
      "classPeriod": {
        "description": "The JSON representation of the \"classPeriod\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/classPeriod"
            }
          }
        },
        "required": true
      },
      "communityProvider": {
        "description": "The JSON representation of the \"communityProvider\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/communityProvider"
            }
          }
        },
        "required": true
      },
      "communityProviderLicense": {
        "description": "The JSON representation of the \"communityProviderLicense\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/communityProviderLicense"
            }
          }
        },
        "required": true
      },
      "contractedStaff": {
        "description": "The JSON representation of the \"contractedStaff\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/contractedStaff"
            }
          }
        },
        "required": true
      },
      "course": {
        "description": "The JSON representation of the \"course\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/course"
            }
          }
        },
        "required": true
      },
      "disciplineAction": {
        "description": "The JSON representation of the \"disciplineAction\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/disciplineAction"
            }
          }
        },
        "required": true
      },
      "educationOrganizationNetwork": {
        "description": "The JSON representation of the \"educationOrganizationNetwork\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/educationOrganizationNetwork"
            }
          }
        },
        "required": true
      },
      "educationOrganizationNetworkAssociation": {
        "description": "The JSON representation of the \"educationOrganizationNetworkAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/educationOrganizationNetworkAssociation"
            }
          }
        },
        "required": true
      },
      "grade": {
        "description": "The JSON representation of the \"grade\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/grade"
            }
          }
        },
        "required": true
      },
      "gradingPeriod": {
        "description": "The JSON representation of the \"gradingPeriod\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/gradingPeriod"
            }
          }
        },
        "required": true
      },
      "interventionPrescription": {
        "description": "The JSON representation of the \"interventionPrescription\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/interventionPrescription"
            }
          }
        },
        "required": true
      },
      "interventionStudy": {
        "description": "The JSON representation of the \"interventionStudy\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/interventionStudy"
            }
          }
        },
        "required": true
      },
      "learningStandard": {
        "description": "The JSON representation of the \"learningStandard\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/learningStandard"
            }
          }
        },
        "required": true
      },
      "localEducationAgency": {
        "description": "The JSON representation of the \"localEducationAgency\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/localEducationAgency"
            }
          }
        },
        "required": true
      },
      "location": {
        "description": "The JSON representation of the \"location\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/location"
            }
          }
        },
        "required": true
      },
      "openStaffPosition": {
        "description": "The JSON representation of the \"openStaffPosition\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/openStaffPosition"
            }
          }
        },
        "required": true
      },
      "parent": {
        "description": "The JSON representation of the \"parent\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/parent"
            }
          }
        },
        "required": true
      },
      "payroll": {
        "description": "The JSON representation of the \"payroll\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payroll"
            }
          }
        },
        "required": true
      },
      "restraintEvent": {
        "description": "The JSON representation of the \"restraintEvent\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/restraintEvent"
            }
          }
        },
        "required": true
      },
      "school": {
        "description": "The JSON representation of the \"school\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/school"
            }
          }
        },
        "required": true
      },
      "schoolYearType": {
        "description": "The JSON representation of the \"schoolYearType\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schoolYearType"
            }
          }
        },
        "required": true
      },
      "section": {
        "description": "The JSON representation of the \"section\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/section"
            }
          }
        },
        "required": true
      },
      "sectionAttendanceTakenEvent": {
        "description": "The JSON representation of the \"sectionAttendanceTakenEvent\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/sectionAttendanceTakenEvent"
            }
          }
        },
        "required": true
      },
      "session": {
        "description": "The JSON representation of the \"session\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/session"
            }
          }
        },
        "required": true
      },
      "staff": {
        "description": "The JSON representation of the \"staff\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/staff"
            }
          }
        },
        "required": true
      },
      "staffAbsenceEvent": {
        "description": "The JSON representation of the \"staffAbsenceEvent\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/staffAbsenceEvent"
            }
          }
        },
        "required": true
      },
      "staffEducationOrganizationEmploymentAssociation": {
        "description": "The JSON representation of the \"staffEducationOrganizationEmploymentAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/staffEducationOrganizationEmploymentAssociation"
            }
          }
        },
        "required": true
      },
      "staffLeave": {
        "description": "The JSON representation of the \"staffLeave\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/staffLeave"
            }
          }
        },
        "required": true
      },
      "staffProgramAssociation": {
        "description": "The JSON representation of the \"staffProgramAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/staffProgramAssociation"
            }
          }
        },
        "required": true
      },
      "staffSectionAssociation": {
        "description": "The JSON representation of the \"staffSectionAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/staffSectionAssociation"
            }
          }
        },
        "required": true
      },
      "stateEducationAgency": {
        "description": "The JSON representation of the \"stateEducationAgency\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/stateEducationAgency"
            }
          }
        },
        "required": true
      },
      "studentCohortAssociation": {
        "description": "The JSON representation of the \"studentCohortAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentCohortAssociation"
            }
          }
        },
        "required": true
      },
      "studentDisciplineIncidentAssociation": {
        "description": "The JSON representation of the \"studentDisciplineIncidentAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentDisciplineIncidentAssociation"
            }
          }
        },
        "required": true
      },
      "studentEducationOrganizationAssociation": {
        "description": "The JSON representation of the \"studentEducationOrganizationAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentEducationOrganizationAssociation"
            }
          }
        },
        "required": true
      },
      "studentEducationOrganizationResponsibilityAssociation": {
        "description": "The JSON representation of the \"studentEducationOrganizationResponsibilityAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentEducationOrganizationResponsibilityAssociation"
            }
          }
        },
        "required": true
      },
      "studentHomelessProgramAssociation": {
        "description": "The JSON representation of the \"studentHomelessProgramAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentHomelessProgramAssociation"
            }
          }
        },
        "required": true
      },
      "studentInterventionAssociation": {
        "description": "The JSON representation of the \"studentInterventionAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentInterventionAssociation"
            }
          }
        },
        "required": true
      },
      "studentInterventionAttendanceEvent": {
        "description": "The JSON representation of the \"studentInterventionAttendanceEvent\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentInterventionAttendanceEvent"
            }
          }
        },
        "required": true
      },
      "studentLearningObjective": {
        "description": "The JSON representation of the \"studentLearningObjective\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentLearningObjective"
            }
          }
        },
        "required": true
      },
      "studentMigrantEducationProgramAssociation": {
        "description": "The JSON representation of the \"studentMigrantEducationProgramAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentMigrantEducationProgramAssociation"
            }
          }
        },
        "required": true
      },
      "studentProgramAttendanceEvent": {
        "description": "The JSON representation of the \"studentProgramAttendanceEvent\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentProgramAttendanceEvent"
            }
          }
        },
        "required": true
      },
      "studentSchoolAssociation": {
        "description": "The JSON representation of the \"studentSchoolAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentSchoolAssociation"
            }
          }
        },
        "required": true
      },
      "studentSchoolFoodServiceProgramAssociation": {
        "description": "The JSON representation of the \"studentSchoolFoodServiceProgramAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentSchoolFoodServiceProgramAssociation"
            }
          }
        },
        "required": true
      },
      "studentSectionAssociation": {
        "description": "The JSON representation of the \"studentSectionAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentSectionAssociation"
            }
          }
        },
        "required": true
      },
      "studentTitleIPartAProgramAssociation": {
        "description": "The JSON representation of the \"studentTitleIPartAProgramAssociation\" resource to be created or updated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/studentTitleIPartAProgramAssociation"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "oauth2_client_credentials": {
        "type": "oauth2",
        "description": "Ed-Fi ODS/API OAuth 2.0 Client Credentials Grant Type authorization",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://api.ed-fi.org/v3.1.0/api/oauth/token"
          }
        }
      }
    }
  }
}